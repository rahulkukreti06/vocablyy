"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-select";
exports.ids = ["vendor-chunks/react-select"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-select/dist/Select-aab027f3.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-select/dist/Select-aab027f3.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ Select),\n/* harmony export */   a: () => (/* binding */ defaultProps),\n/* harmony export */   b: () => (/* binding */ getOptionLabel$1),\n/* harmony export */   c: () => (/* binding */ createFilter),\n/* harmony export */   d: () => (/* binding */ defaultTheme),\n/* harmony export */   g: () => (/* binding */ getOptionValue$1),\n/* harmony export */   m: () => (/* binding */ mergeStyles)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/createSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-641ee5b8.esm.js */ \"(ssr)/./node_modules/react-select/dist/index-641ee5b8.esm.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ \"(ssr)/./node_modules/@emotion/react/dist/emotion-react.development.esm.js\");\n/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__$2() {\n    return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\n// Assistive text to describe visual elements. Hidden for sighted users.\nvar _ref =  false ? 0 : {\n    name: \"1f43avz-a11yText-A11yText\",\n    styles: \"label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPSSIsImZpbGUiOiJBMTF5VGV4dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCB7IEpTWCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzeCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLy8gQXNzaXN0aXZlIHRleHQgdG8gZGVzY3JpYmUgdmlzdWFsIGVsZW1lbnRzLiBIaWRkZW4gZm9yIHNpZ2h0ZWQgdXNlcnMuXG5jb25zdCBBMTF5VGV4dCA9IChwcm9wczogSlNYLkludHJpbnNpY0VsZW1lbnRzWydzcGFuJ10pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0= */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__$2\n};\nvar A11yText = function A11yText(props) {\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        css: _ref\n    }, props));\n};\nvar A11yText$1 = A11yText;\nvar defaultAriaLiveMessages = {\n    guidance: function guidance(props) {\n        var isSearchable = props.isSearchable, isMulti = props.isMulti, tabSelectsValue = props.tabSelectsValue, context = props.context, isInitialFocus = props.isInitialFocus;\n        switch(context){\n            case \"menu\":\n                return \"Use Up and Down to choose options, press Enter to select the currently focused option, press Escape to exit the menu\".concat(tabSelectsValue ? \", press Tab to select the option and exit the menu\" : \"\", \".\");\n            case \"input\":\n                return isInitialFocus ? \"\".concat(props[\"aria-label\"] || \"Select\", \" is focused \").concat(isSearchable ? \",type to refine list\" : \"\", \", press Down to open the menu, \").concat(isMulti ? \" press left to focus selected values\" : \"\") : \"\";\n            case \"value\":\n                return \"Use left and right to toggle between focused values, press Backspace to remove the currently focused value\";\n            default:\n                return \"\";\n        }\n    },\n    onChange: function onChange(props) {\n        var action = props.action, _props$label = props.label, label = _props$label === void 0 ? \"\" : _props$label, labels = props.labels, isDisabled = props.isDisabled;\n        switch(action){\n            case \"deselect-option\":\n            case \"pop-value\":\n            case \"remove-value\":\n                return \"option \".concat(label, \", deselected.\");\n            case \"clear\":\n                return \"All selected options have been cleared.\";\n            case \"initial-input-focus\":\n                return \"option\".concat(labels.length > 1 ? \"s\" : \"\", \" \").concat(labels.join(\",\"), \", selected.\");\n            case \"select-option\":\n                return isDisabled ? \"option \".concat(label, \" is disabled. Select another option.\") : \"option \".concat(label, \", selected.\");\n            default:\n                return \"\";\n        }\n    },\n    onFocus: function onFocus(props) {\n        var context = props.context, focused = props.focused, options = props.options, _props$label2 = props.label, label = _props$label2 === void 0 ? \"\" : _props$label2, selectValue = props.selectValue, isDisabled = props.isDisabled, isSelected = props.isSelected, isAppleDevice = props.isAppleDevice;\n        var getArrayIndex = function getArrayIndex(arr, item) {\n            return arr && arr.length ? \"\".concat(arr.indexOf(item) + 1, \" of \").concat(arr.length) : \"\";\n        };\n        if (context === \"value\" && selectValue) {\n            return \"value \".concat(label, \" focused, \").concat(getArrayIndex(selectValue, focused), \".\");\n        }\n        if (context === \"menu\" && isAppleDevice) {\n            var disabled = isDisabled ? \" disabled\" : \"\";\n            var status = \"\".concat(isSelected ? \" selected\" : \"\").concat(disabled);\n            return \"\".concat(label).concat(status, \", \").concat(getArrayIndex(options, focused), \".\");\n        }\n        return \"\";\n    },\n    onFilter: function onFilter(props) {\n        var inputValue = props.inputValue, resultsMessage = props.resultsMessage;\n        return \"\".concat(resultsMessage).concat(inputValue ? \" for search term \" + inputValue : \"\", \".\");\n    }\n};\nvar LiveRegion = function LiveRegion(props) {\n    var ariaSelection = props.ariaSelection, focusedOption = props.focusedOption, focusedValue = props.focusedValue, focusableOptions = props.focusableOptions, isFocused = props.isFocused, selectValue = props.selectValue, selectProps = props.selectProps, id = props.id, isAppleDevice = props.isAppleDevice;\n    var ariaLiveMessages = selectProps.ariaLiveMessages, getOptionLabel = selectProps.getOptionLabel, inputValue = selectProps.inputValue, isMulti = selectProps.isMulti, isOptionDisabled = selectProps.isOptionDisabled, isSearchable = selectProps.isSearchable, menuIsOpen = selectProps.menuIsOpen, options = selectProps.options, screenReaderStatus = selectProps.screenReaderStatus, tabSelectsValue = selectProps.tabSelectsValue, isLoading = selectProps.isLoading;\n    var ariaLabel = selectProps[\"aria-label\"];\n    var ariaLive = selectProps[\"aria-live\"];\n    // Update aria live message configuration when prop changes\n    var messages = (0,react__WEBPACK_IMPORTED_MODULE_7__.useMemo)(function() {\n        return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, defaultAriaLiveMessages), ariaLiveMessages || {});\n    }, [\n        ariaLiveMessages\n    ]);\n    // Update aria live selected option when prop changes\n    var ariaSelected = (0,react__WEBPACK_IMPORTED_MODULE_7__.useMemo)(function() {\n        var message = \"\";\n        if (ariaSelection && messages.onChange) {\n            var option = ariaSelection.option, selectedOptions = ariaSelection.options, removedValue = ariaSelection.removedValue, removedValues = ariaSelection.removedValues, value = ariaSelection.value;\n            // select-option when !isMulti does not return option so we assume selected option is value\n            var asOption = function asOption(val) {\n                return !Array.isArray(val) ? val : null;\n            };\n            // If there is just one item from the action then get its label\n            var selected = removedValue || option || asOption(value);\n            var label = selected ? getOptionLabel(selected) : \"\";\n            // If there are multiple items from the action then return an array of labels\n            var multiSelected = selectedOptions || removedValues || undefined;\n            var labels = multiSelected ? multiSelected.map(getOptionLabel) : [];\n            var onChangeProps = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                // multiSelected items are usually items that have already been selected\n                // or set by the user as a default value so we assume they are not disabled\n                isDisabled: selected && isOptionDisabled(selected, selectValue),\n                label: label,\n                labels: labels\n            }, ariaSelection);\n            message = messages.onChange(onChangeProps);\n        }\n        return message;\n    }, [\n        ariaSelection,\n        messages,\n        isOptionDisabled,\n        selectValue,\n        getOptionLabel\n    ]);\n    var ariaFocused = (0,react__WEBPACK_IMPORTED_MODULE_7__.useMemo)(function() {\n        var focusMsg = \"\";\n        var focused = focusedOption || focusedValue;\n        var isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption));\n        if (focused && messages.onFocus) {\n            var onFocusProps = {\n                focused: focused,\n                label: getOptionLabel(focused),\n                isDisabled: isOptionDisabled(focused, selectValue),\n                isSelected: isSelected,\n                options: focusableOptions,\n                context: focused === focusedOption ? \"menu\" : \"value\",\n                selectValue: selectValue,\n                isAppleDevice: isAppleDevice\n            };\n            focusMsg = messages.onFocus(onFocusProps);\n        }\n        return focusMsg;\n    }, [\n        focusedOption,\n        focusedValue,\n        getOptionLabel,\n        isOptionDisabled,\n        messages,\n        focusableOptions,\n        selectValue,\n        isAppleDevice\n    ]);\n    var ariaResults = (0,react__WEBPACK_IMPORTED_MODULE_7__.useMemo)(function() {\n        var resultsMsg = \"\";\n        if (menuIsOpen && options.length && !isLoading && messages.onFilter) {\n            var resultsMessage = screenReaderStatus({\n                count: focusableOptions.length\n            });\n            resultsMsg = messages.onFilter({\n                inputValue: inputValue,\n                resultsMessage: resultsMessage\n            });\n        }\n        return resultsMsg;\n    }, [\n        focusableOptions,\n        inputValue,\n        menuIsOpen,\n        messages,\n        options,\n        screenReaderStatus,\n        isLoading\n    ]);\n    var isInitialFocus = (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === \"initial-input-focus\";\n    var ariaGuidance = (0,react__WEBPACK_IMPORTED_MODULE_7__.useMemo)(function() {\n        var guidanceMsg = \"\";\n        if (messages.guidance) {\n            var context = focusedValue ? \"value\" : menuIsOpen ? \"menu\" : \"input\";\n            guidanceMsg = messages.guidance({\n                \"aria-label\": ariaLabel,\n                context: context,\n                isDisabled: focusedOption && isOptionDisabled(focusedOption, selectValue),\n                isMulti: isMulti,\n                isSearchable: isSearchable,\n                tabSelectsValue: tabSelectsValue,\n                isInitialFocus: isInitialFocus\n            });\n        }\n        return guidanceMsg;\n    }, [\n        ariaLabel,\n        focusedOption,\n        focusedValue,\n        isMulti,\n        isOptionDisabled,\n        isSearchable,\n        menuIsOpen,\n        messages,\n        selectValue,\n        tabSelectsValue,\n        isInitialFocus\n    ]);\n    var ScreenReaderText = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(react__WEBPACK_IMPORTED_MODULE_7__.Fragment, null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", {\n        id: \"aria-selection\"\n    }, ariaSelected), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", {\n        id: \"aria-focused\"\n    }, ariaFocused), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", {\n        id: \"aria-results\"\n    }, ariaResults), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", {\n        id: \"aria-guidance\"\n    }, ariaGuidance));\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(react__WEBPACK_IMPORTED_MODULE_7__.Fragment, null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(A11yText$1, {\n        id: id\n    }, isInitialFocus && ScreenReaderText), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(A11yText$1, {\n        \"aria-live\": ariaLive,\n        \"aria-atomic\": \"false\",\n        \"aria-relevant\": \"additions text\",\n        role: \"log\"\n    }, isFocused && !isInitialFocus && ScreenReaderText));\n};\nvar LiveRegion$1 = LiveRegion;\nvar diacritics = [\n    {\n        base: \"A\",\n        letters: \"AⒶＡ\\xc0\\xc1\\xc2ẦẤẪẨ\\xc3ĀĂẰẮẴẲȦǠ\\xc4ǞẢ\\xc5ǺǍȀȂẠẬẶḀĄȺⱯ\"\n    },\n    {\n        base: \"AA\",\n        letters: \"Ꜳ\"\n    },\n    {\n        base: \"AE\",\n        letters: \"\\xc6ǼǢ\"\n    },\n    {\n        base: \"AO\",\n        letters: \"Ꜵ\"\n    },\n    {\n        base: \"AU\",\n        letters: \"Ꜷ\"\n    },\n    {\n        base: \"AV\",\n        letters: \"ꜸꜺ\"\n    },\n    {\n        base: \"AY\",\n        letters: \"Ꜽ\"\n    },\n    {\n        base: \"B\",\n        letters: \"BⒷＢḂḄḆɃƂƁ\"\n    },\n    {\n        base: \"C\",\n        letters: \"CⒸＣĆĈĊČ\\xc7ḈƇȻꜾ\"\n    },\n    {\n        base: \"D\",\n        letters: \"DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ\"\n    },\n    {\n        base: \"DZ\",\n        letters: \"ǱǄ\"\n    },\n    {\n        base: \"Dz\",\n        letters: \"ǲǅ\"\n    },\n    {\n        base: \"E\",\n        letters: \"EⒺＥ\\xc8\\xc9\\xcaỀẾỄỂẼĒḔḖĔĖ\\xcbẺĚȄȆẸỆȨḜĘḘḚƐƎ\"\n    },\n    {\n        base: \"F\",\n        letters: \"FⒻＦḞƑꝻ\"\n    },\n    {\n        base: \"G\",\n        letters: \"GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ\"\n    },\n    {\n        base: \"H\",\n        letters: \"HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ\"\n    },\n    {\n        base: \"I\",\n        letters: \"IⒾＩ\\xcc\\xcd\\xceĨĪĬİ\\xcfḮỈǏȈȊỊĮḬƗ\"\n    },\n    {\n        base: \"J\",\n        letters: \"JⒿＪĴɈ\"\n    },\n    {\n        base: \"K\",\n        letters: \"KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ\"\n    },\n    {\n        base: \"L\",\n        letters: \"LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ\"\n    },\n    {\n        base: \"LJ\",\n        letters: \"Ǉ\"\n    },\n    {\n        base: \"Lj\",\n        letters: \"ǈ\"\n    },\n    {\n        base: \"M\",\n        letters: \"MⓂＭḾṀṂⱮƜ\"\n    },\n    {\n        base: \"N\",\n        letters: \"NⓃＮǸŃ\\xd1ṄŇṆŅṊṈȠƝꞐꞤ\"\n    },\n    {\n        base: \"NJ\",\n        letters: \"Ǌ\"\n    },\n    {\n        base: \"Nj\",\n        letters: \"ǋ\"\n    },\n    {\n        base: \"O\",\n        letters: \"OⓄＯ\\xd2\\xd3\\xd4ỒỐỖỔ\\xd5ṌȬṎŌṐṒŎȮȰ\\xd6ȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬ\\xd8ǾƆƟꝊꝌ\"\n    },\n    {\n        base: \"OI\",\n        letters: \"Ƣ\"\n    },\n    {\n        base: \"OO\",\n        letters: \"Ꝏ\"\n    },\n    {\n        base: \"OU\",\n        letters: \"Ȣ\"\n    },\n    {\n        base: \"P\",\n        letters: \"PⓅＰṔṖƤⱣꝐꝒꝔ\"\n    },\n    {\n        base: \"Q\",\n        letters: \"QⓆＱꝖꝘɊ\"\n    },\n    {\n        base: \"R\",\n        letters: \"RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ\"\n    },\n    {\n        base: \"S\",\n        letters: \"SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ\"\n    },\n    {\n        base: \"T\",\n        letters: \"TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ\"\n    },\n    {\n        base: \"TZ\",\n        letters: \"Ꜩ\"\n    },\n    {\n        base: \"U\",\n        letters: \"UⓊＵ\\xd9\\xda\\xdbŨṸŪṺŬ\\xdcǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ\"\n    },\n    {\n        base: \"V\",\n        letters: \"VⓋＶṼṾƲꝞɅ\"\n    },\n    {\n        base: \"VY\",\n        letters: \"Ꝡ\"\n    },\n    {\n        base: \"W\",\n        letters: \"WⓌＷẀẂŴẆẄẈⱲ\"\n    },\n    {\n        base: \"X\",\n        letters: \"XⓍＸẊẌ\"\n    },\n    {\n        base: \"Y\",\n        letters: \"YⓎＹỲ\\xddŶỸȲẎŸỶỴƳɎỾ\"\n    },\n    {\n        base: \"Z\",\n        letters: \"ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ\"\n    },\n    {\n        base: \"a\",\n        letters: \"aⓐａẚ\\xe0\\xe1\\xe2ầấẫẩ\\xe3āăằắẵẳȧǡ\\xe4ǟả\\xe5ǻǎȁȃạậặḁąⱥɐ\"\n    },\n    {\n        base: \"aa\",\n        letters: \"ꜳ\"\n    },\n    {\n        base: \"ae\",\n        letters: \"\\xe6ǽǣ\"\n    },\n    {\n        base: \"ao\",\n        letters: \"ꜵ\"\n    },\n    {\n        base: \"au\",\n        letters: \"ꜷ\"\n    },\n    {\n        base: \"av\",\n        letters: \"ꜹꜻ\"\n    },\n    {\n        base: \"ay\",\n        letters: \"ꜽ\"\n    },\n    {\n        base: \"b\",\n        letters: \"bⓑｂḃḅḇƀƃɓ\"\n    },\n    {\n        base: \"c\",\n        letters: \"cⓒｃćĉċč\\xe7ḉƈȼꜿↄ\"\n    },\n    {\n        base: \"d\",\n        letters: \"dⓓｄḋďḍḑḓḏđƌɖɗꝺ\"\n    },\n    {\n        base: \"dz\",\n        letters: \"ǳǆ\"\n    },\n    {\n        base: \"e\",\n        letters: \"eⓔｅ\\xe8\\xe9\\xeaềếễểẽēḕḗĕė\\xebẻěȅȇẹệȩḝęḙḛɇɛǝ\"\n    },\n    {\n        base: \"f\",\n        letters: \"fⓕｆḟƒꝼ\"\n    },\n    {\n        base: \"g\",\n        letters: \"gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ\"\n    },\n    {\n        base: \"h\",\n        letters: \"hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ\"\n    },\n    {\n        base: \"hv\",\n        letters: \"ƕ\"\n    },\n    {\n        base: \"i\",\n        letters: \"iⓘｉ\\xec\\xed\\xeeĩīĭ\\xefḯỉǐȉȋịįḭɨı\"\n    },\n    {\n        base: \"j\",\n        letters: \"jⓙｊĵǰɉ\"\n    },\n    {\n        base: \"k\",\n        letters: \"kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ\"\n    },\n    {\n        base: \"l\",\n        letters: \"lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ\"\n    },\n    {\n        base: \"lj\",\n        letters: \"ǉ\"\n    },\n    {\n        base: \"m\",\n        letters: \"mⓜｍḿṁṃɱɯ\"\n    },\n    {\n        base: \"n\",\n        letters: \"nⓝｎǹń\\xf1ṅňṇņṋṉƞɲŉꞑꞥ\"\n    },\n    {\n        base: \"nj\",\n        letters: \"ǌ\"\n    },\n    {\n        base: \"o\",\n        letters: \"oⓞｏ\\xf2\\xf3\\xf4ồốỗổ\\xf5ṍȭṏōṑṓŏȯȱ\\xf6ȫỏőǒȍȏơờớỡởợọộǫǭ\\xf8ǿɔꝋꝍɵ\"\n    },\n    {\n        base: \"oi\",\n        letters: \"ƣ\"\n    },\n    {\n        base: \"ou\",\n        letters: \"ȣ\"\n    },\n    {\n        base: \"oo\",\n        letters: \"ꝏ\"\n    },\n    {\n        base: \"p\",\n        letters: \"pⓟｐṕṗƥᵽꝑꝓꝕ\"\n    },\n    {\n        base: \"q\",\n        letters: \"qⓠｑɋꝗꝙ\"\n    },\n    {\n        base: \"r\",\n        letters: \"rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ\"\n    },\n    {\n        base: \"s\",\n        letters: \"sⓢｓ\\xdfśṥŝṡšṧṣṩșşȿꞩꞅẛ\"\n    },\n    {\n        base: \"t\",\n        letters: \"tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ\"\n    },\n    {\n        base: \"tz\",\n        letters: \"ꜩ\"\n    },\n    {\n        base: \"u\",\n        letters: \"uⓤｕ\\xf9\\xfa\\xfbũṹūṻŭ\\xfcǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ\"\n    },\n    {\n        base: \"v\",\n        letters: \"vⓥｖṽṿʋꝟʌ\"\n    },\n    {\n        base: \"vy\",\n        letters: \"ꝡ\"\n    },\n    {\n        base: \"w\",\n        letters: \"wⓦｗẁẃŵẇẅẘẉⱳ\"\n    },\n    {\n        base: \"x\",\n        letters: \"xⓧｘẋẍ\"\n    },\n    {\n        base: \"y\",\n        letters: \"yⓨｙỳ\\xfdŷỹȳẏ\\xffỷẙỵƴɏỿ\"\n    },\n    {\n        base: \"z\",\n        letters: \"zⓩｚźẑżžẓẕƶȥɀⱬꝣ\"\n    }\n];\nvar anyDiacritic = new RegExp(\"[\" + diacritics.map(function(d) {\n    return d.letters;\n}).join(\"\") + \"]\", \"g\");\nvar diacriticToBase = {};\nfor(var i = 0; i < diacritics.length; i++){\n    var diacritic = diacritics[i];\n    for(var j = 0; j < diacritic.letters.length; j++){\n        diacriticToBase[diacritic.letters[j]] = diacritic.base;\n    }\n}\nvar stripDiacritics = function stripDiacritics(str) {\n    return str.replace(anyDiacritic, function(match) {\n        return diacriticToBase[match];\n    });\n};\nvar memoizedStripDiacriticsForInput = (0,memoize_one__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(stripDiacritics);\nvar trimString = function trimString(str) {\n    return str.replace(/^\\s+|\\s+$/g, \"\");\n};\nvar defaultStringify = function defaultStringify(option) {\n    return \"\".concat(option.label, \" \").concat(option.value);\n};\nvar createFilter = function createFilter(config) {\n    return function(option, rawInput) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (option.data.__isNew__) return true;\n        var _ignoreCase$ignoreAcc = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            ignoreCase: true,\n            ignoreAccents: true,\n            stringify: defaultStringify,\n            trim: true,\n            matchFrom: \"any\"\n        }, config), ignoreCase = _ignoreCase$ignoreAcc.ignoreCase, ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents, stringify = _ignoreCase$ignoreAcc.stringify, trim = _ignoreCase$ignoreAcc.trim, matchFrom = _ignoreCase$ignoreAcc.matchFrom;\n        var input = trim ? trimString(rawInput) : rawInput;\n        var candidate = trim ? trimString(stringify(option)) : stringify(option);\n        if (ignoreCase) {\n            input = input.toLowerCase();\n            candidate = candidate.toLowerCase();\n        }\n        if (ignoreAccents) {\n            input = memoizedStripDiacriticsForInput(input);\n            candidate = stripDiacritics(candidate);\n        }\n        return matchFrom === \"start\" ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;\n    };\n};\nvar _excluded = [\n    \"innerRef\"\n];\nfunction DummyInput(_ref) {\n    var innerRef = _ref.innerRef, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(_ref, _excluded);\n    // Remove animation props not meant for HTML elements\n    var filteredProps = (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.r)(props, \"onExited\", \"in\", \"enter\", \"exit\", \"appear\");\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"input\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        ref: innerRef\n    }, filteredProps, {\n        css: /*#__PURE__*/ (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n            label: \"dummyInput\",\n            // get rid of any default styles\n            background: 0,\n            border: 0,\n            // important! this hides the flashing cursor\n            caretColor: \"transparent\",\n            fontSize: \"inherit\",\n            gridArea: \"1 / 1 / 2 / 3\",\n            outline: 0,\n            padding: 0,\n            // important! without `width` browsers won't allow focus\n            width: 1,\n            // remove cursor on desktop\n            color: \"transparent\",\n            // remove cursor on mobile whilst maintaining \"scroll into view\" behaviour\n            left: -100,\n            opacity: 0,\n            position: \"relative\",\n            transform: \"scale(.01)\"\n        },  false ? 0 : \";label:DummyInput;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkR1bW15SW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlCTSIsImZpbGUiOiJEdW1teUlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgSlNYLCBSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyByZW1vdmVQcm9wcyB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRHVtbXlJbnB1dCh7XG4gIGlubmVyUmVmLFxuICAuLi5wcm9wc1xufTogSlNYLkludHJpbnNpY0VsZW1lbnRzWydpbnB1dCddICYge1xuICByZWFkb25seSBpbm5lclJlZjogUmVmPEhUTUxJbnB1dEVsZW1lbnQ+O1xufSkge1xuICAvLyBSZW1vdmUgYW5pbWF0aW9uIHByb3BzIG5vdCBtZWFudCBmb3IgSFRNTCBlbGVtZW50c1xuICBjb25zdCBmaWx0ZXJlZFByb3BzID0gcmVtb3ZlUHJvcHMoXG4gICAgcHJvcHMsXG4gICAgJ29uRXhpdGVkJyxcbiAgICAnaW4nLFxuICAgICdlbnRlcicsXG4gICAgJ2V4aXQnLFxuICAgICdhcHBlYXInXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8aW5wdXRcbiAgICAgIHJlZj17aW5uZXJSZWZ9XG4gICAgICB7Li4uZmlsdGVyZWRQcm9wc31cbiAgICAgIGNzcz17e1xuICAgICAgICBsYWJlbDogJ2R1bW15SW5wdXQnLFxuICAgICAgICAvLyBnZXQgcmlkIG9mIGFueSBkZWZhdWx0IHN0eWxlc1xuICAgICAgICBiYWNrZ3JvdW5kOiAwLFxuICAgICAgICBib3JkZXI6IDAsXG4gICAgICAgIC8vIGltcG9ydGFudCEgdGhpcyBoaWRlcyB0aGUgZmxhc2hpbmcgY3Vyc29yXG4gICAgICAgIGNhcmV0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCcsXG4gICAgICAgIGdyaWRBcmVhOiAnMSAvIDEgLyAyIC8gMycsXG4gICAgICAgIG91dGxpbmU6IDAsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIC8vIGltcG9ydGFudCEgd2l0aG91dCBgd2lkdGhgIGJyb3dzZXJzIHdvbid0IGFsbG93IGZvY3VzXG4gICAgICAgIHdpZHRoOiAxLFxuXG4gICAgICAgIC8vIHJlbW92ZSBjdXJzb3Igb24gZGVza3RvcFxuICAgICAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcblxuICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIG1vYmlsZSB3aGlsc3QgbWFpbnRhaW5pbmcgXCJzY3JvbGwgaW50byB2aWV3XCIgYmVoYXZpb3VyXG4gICAgICAgIGxlZnQ6IC0xMDAsXG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSguMDEpJyxcbiAgICAgIH19XG4gICAgLz5cbiAgKTtcbn1cbiJdfQ== */\")\n    }));\n}\nvar cancelScroll = function cancelScroll(event) {\n    if (event.cancelable) event.preventDefault();\n    event.stopPropagation();\n};\nfunction useScrollCapture(_ref) {\n    var isEnabled = _ref.isEnabled, onBottomArrive = _ref.onBottomArrive, onBottomLeave = _ref.onBottomLeave, onTopArrive = _ref.onTopArrive, onTopLeave = _ref.onTopLeave;\n    var isBottom = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)(false);\n    var isTop = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)(false);\n    var touchStart = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)(0);\n    var scrollTarget = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)(null);\n    var handleEventDelta = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(event, delta) {\n        if (scrollTarget.current === null) return;\n        var _scrollTarget$current = scrollTarget.current, scrollTop = _scrollTarget$current.scrollTop, scrollHeight = _scrollTarget$current.scrollHeight, clientHeight = _scrollTarget$current.clientHeight;\n        var target = scrollTarget.current;\n        var isDeltaPositive = delta > 0;\n        var availableScroll = scrollHeight - clientHeight - scrollTop;\n        var shouldCancelScroll = false;\n        // reset bottom/top flags\n        if (availableScroll > delta && isBottom.current) {\n            if (onBottomLeave) onBottomLeave(event);\n            isBottom.current = false;\n        }\n        if (isDeltaPositive && isTop.current) {\n            if (onTopLeave) onTopLeave(event);\n            isTop.current = false;\n        }\n        // bottom limit\n        if (isDeltaPositive && delta > availableScroll) {\n            if (onBottomArrive && !isBottom.current) {\n                onBottomArrive(event);\n            }\n            target.scrollTop = scrollHeight;\n            shouldCancelScroll = true;\n            isBottom.current = true;\n        // top limit\n        } else if (!isDeltaPositive && -delta > scrollTop) {\n            if (onTopArrive && !isTop.current) {\n                onTopArrive(event);\n            }\n            target.scrollTop = 0;\n            shouldCancelScroll = true;\n            isTop.current = true;\n        }\n        // cancel scroll\n        if (shouldCancelScroll) {\n            cancelScroll(event);\n        }\n    }, [\n        onBottomArrive,\n        onBottomLeave,\n        onTopArrive,\n        onTopLeave\n    ]);\n    var onWheel = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(event) {\n        handleEventDelta(event, event.deltaY);\n    }, [\n        handleEventDelta\n    ]);\n    var onTouchStart = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(event) {\n        // set touch start so we can calculate touchmove delta\n        touchStart.current = event.changedTouches[0].clientY;\n    }, []);\n    var onTouchMove = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(event) {\n        var deltaY = touchStart.current - event.changedTouches[0].clientY;\n        handleEventDelta(event, deltaY);\n    }, [\n        handleEventDelta\n    ]);\n    var startListening = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(el) {\n        // bail early if no element is available to attach to\n        if (!el) return;\n        var notPassive = _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.s ? {\n            passive: false\n        } : false;\n        el.addEventListener(\"wheel\", onWheel, notPassive);\n        el.addEventListener(\"touchstart\", onTouchStart, notPassive);\n        el.addEventListener(\"touchmove\", onTouchMove, notPassive);\n    }, [\n        onTouchMove,\n        onTouchStart,\n        onWheel\n    ]);\n    var stopListening = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(el) {\n        // bail early if no element is available to detach from\n        if (!el) return;\n        el.removeEventListener(\"wheel\", onWheel, false);\n        el.removeEventListener(\"touchstart\", onTouchStart, false);\n        el.removeEventListener(\"touchmove\", onTouchMove, false);\n    }, [\n        onTouchMove,\n        onTouchStart,\n        onWheel\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_7__.useEffect)(function() {\n        if (!isEnabled) return;\n        var element = scrollTarget.current;\n        startListening(element);\n        return function() {\n            stopListening(element);\n        };\n    }, [\n        isEnabled,\n        startListening,\n        stopListening\n    ]);\n    return function(element) {\n        scrollTarget.current = element;\n    };\n}\nvar STYLE_KEYS = [\n    \"boxSizing\",\n    \"height\",\n    \"overflow\",\n    \"paddingRight\",\n    \"position\"\n];\nvar LOCK_STYLES = {\n    boxSizing: \"border-box\",\n    // account for possible declaration `width: 100%;` on body\n    overflow: \"hidden\",\n    position: \"relative\",\n    height: \"100%\"\n};\nfunction preventTouchMove(e) {\n    if (e.cancelable) e.preventDefault();\n}\nfunction allowTouchMove(e) {\n    e.stopPropagation();\n}\nfunction preventInertiaScroll() {\n    var top = this.scrollTop;\n    var totalScroll = this.scrollHeight;\n    var currentScroll = top + this.offsetHeight;\n    if (top === 0) {\n        this.scrollTop = 1;\n    } else if (currentScroll === totalScroll) {\n        this.scrollTop = top - 1;\n    }\n}\n// `ontouchstart` check works on most browsers\n// `maxTouchPoints` works on IE10/11 and Surface\nfunction isTouchDevice() {\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\n}\nvar canUseDOM = !!( false && 0);\nvar activeScrollLocks = 0;\nvar listenerOptions = {\n    capture: false,\n    passive: false\n};\nfunction useScrollLock(_ref) {\n    var isEnabled = _ref.isEnabled, _ref$accountForScroll = _ref.accountForScrollbars, accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll;\n    var originalStyles = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)({});\n    var scrollTarget = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)(null);\n    var addScrollLock = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(touchScrollTarget) {\n        if (!canUseDOM) return;\n        var target = document.body;\n        var targetStyle = target && target.style;\n        if (accountForScrollbars) {\n            // store any styles already applied to the body\n            STYLE_KEYS.forEach(function(key) {\n                var val = targetStyle && targetStyle[key];\n                originalStyles.current[key] = val;\n            });\n        }\n        // apply the lock styles and padding if this is the first scroll lock\n        if (accountForScrollbars && activeScrollLocks < 1) {\n            var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;\n            var clientWidth = document.body ? document.body.clientWidth : 0;\n            var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;\n            Object.keys(LOCK_STYLES).forEach(function(key) {\n                var val = LOCK_STYLES[key];\n                if (targetStyle) {\n                    targetStyle[key] = val;\n                }\n            });\n            if (targetStyle) {\n                targetStyle.paddingRight = \"\".concat(adjustedPadding, \"px\");\n            }\n        }\n        // account for touch devices\n        if (target && isTouchDevice()) {\n            // Mobile Safari ignores { overflow: hidden } declaration on the body.\n            target.addEventListener(\"touchmove\", preventTouchMove, listenerOptions);\n            // Allow scroll on provided target\n            if (touchScrollTarget) {\n                touchScrollTarget.addEventListener(\"touchstart\", preventInertiaScroll, listenerOptions);\n                touchScrollTarget.addEventListener(\"touchmove\", allowTouchMove, listenerOptions);\n            }\n        }\n        // increment active scroll locks\n        activeScrollLocks += 1;\n    }, [\n        accountForScrollbars\n    ]);\n    var removeScrollLock = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(touchScrollTarget) {\n        if (!canUseDOM) return;\n        var target = document.body;\n        var targetStyle = target && target.style;\n        // safely decrement active scroll locks\n        activeScrollLocks = Math.max(activeScrollLocks - 1, 0);\n        // reapply original body styles, if any\n        if (accountForScrollbars && activeScrollLocks < 1) {\n            STYLE_KEYS.forEach(function(key) {\n                var val = originalStyles.current[key];\n                if (targetStyle) {\n                    targetStyle[key] = val;\n                }\n            });\n        }\n        // remove touch listeners\n        if (target && isTouchDevice()) {\n            target.removeEventListener(\"touchmove\", preventTouchMove, listenerOptions);\n            if (touchScrollTarget) {\n                touchScrollTarget.removeEventListener(\"touchstart\", preventInertiaScroll, listenerOptions);\n                touchScrollTarget.removeEventListener(\"touchmove\", allowTouchMove, listenerOptions);\n            }\n        }\n    }, [\n        accountForScrollbars\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_7__.useEffect)(function() {\n        if (!isEnabled) return;\n        var element = scrollTarget.current;\n        addScrollLock(element);\n        return function() {\n            removeScrollLock(element);\n        };\n    }, [\n        isEnabled,\n        addScrollLock,\n        removeScrollLock\n    ]);\n    return function(element) {\n        scrollTarget.current = element;\n    };\n}\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__$1() {\n    return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nvar blurSelectInput = function blurSelectInput(event) {\n    var element = event.target;\n    return element.ownerDocument.activeElement && element.ownerDocument.activeElement.blur();\n};\nvar _ref2$1 =  false ? 0 : {\n    name: \"bp8cua-ScrollManager\",\n    styles: \"position:fixed;left:0;bottom:0;right:0;top:0;label:ScrollManager;\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbE1hbmFnZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EVSIsImZpbGUiOiJTY3JvbGxNYW5hZ2VyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgUmVmQ2FsbGJhY2ssIE1vdXNlRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU2Nyb2xsQ2FwdHVyZSBmcm9tICcuL3VzZVNjcm9sbENhcHR1cmUnO1xuaW1wb3J0IHVzZVNjcm9sbExvY2sgZnJvbSAnLi91c2VTY3JvbGxMb2NrJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcmVhZG9ubHkgY2hpbGRyZW46IChyZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PikgPT4gUmVhY3RFbGVtZW50O1xuICByZWFkb25seSBsb2NrRW5hYmxlZDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgY2FwdHVyZUVuYWJsZWQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG9uQm90dG9tQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Cb3R0b21MZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG4gIHJlYWRvbmx5IG9uVG9wQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Ub3BMZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG59XG5cbmNvbnN0IGJsdXJTZWxlY3RJbnB1dCA9IChldmVudDogTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcbiAgcmV0dXJuIChcbiAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuICAgIChlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuYmx1cigpXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTY3JvbGxNYW5hZ2VyKHtcbiAgY2hpbGRyZW4sXG4gIGxvY2tFbmFibGVkLFxuICBjYXB0dXJlRW5hYmxlZCA9IHRydWUsXG4gIG9uQm90dG9tQXJyaXZlLFxuICBvbkJvdHRvbUxlYXZlLFxuICBvblRvcEFycml2ZSxcbiAgb25Ub3BMZWF2ZSxcbn06IFByb3BzKSB7XG4gIGNvbnN0IHNldFNjcm9sbENhcHR1cmVUYXJnZXQgPSB1c2VTY3JvbGxDYXB0dXJlKHtcbiAgICBpc0VuYWJsZWQ6IGNhcHR1cmVFbmFibGVkLFxuICAgIG9uQm90dG9tQXJyaXZlLFxuICAgIG9uQm90dG9tTGVhdmUsXG4gICAgb25Ub3BBcnJpdmUsXG4gICAgb25Ub3BMZWF2ZSxcbiAgfSk7XG4gIGNvbnN0IHNldFNjcm9sbExvY2tUYXJnZXQgPSB1c2VTY3JvbGxMb2NrKHsgaXNFbmFibGVkOiBsb2NrRW5hYmxlZCB9KTtcblxuICBjb25zdCB0YXJnZXRSZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PiA9IChlbGVtZW50KSA9PiB7XG4gICAgc2V0U2Nyb2xsQ2FwdHVyZVRhcmdldChlbGVtZW50KTtcbiAgICBzZXRTY3JvbGxMb2NrVGFyZ2V0KGVsZW1lbnQpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAge2xvY2tFbmFibGVkICYmIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIG9uQ2xpY2s9e2JsdXJTZWxlY3RJbnB1dH1cbiAgICAgICAgICBjc3M9e3sgcG9zaXRpb246ICdmaXhlZCcsIGxlZnQ6IDAsIGJvdHRvbTogMCwgcmlnaHQ6IDAsIHRvcDogMCB9fVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIHtjaGlsZHJlbih0YXJnZXRSZWYpfVxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iXX0= */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1\n};\nfunction ScrollManager(_ref) {\n    var children = _ref.children, lockEnabled = _ref.lockEnabled, _ref$captureEnabled = _ref.captureEnabled, captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled, onBottomArrive = _ref.onBottomArrive, onBottomLeave = _ref.onBottomLeave, onTopArrive = _ref.onTopArrive, onTopLeave = _ref.onTopLeave;\n    var setScrollCaptureTarget = useScrollCapture({\n        isEnabled: captureEnabled,\n        onBottomArrive: onBottomArrive,\n        onBottomLeave: onBottomLeave,\n        onTopArrive: onTopArrive,\n        onTopLeave: onTopLeave\n    });\n    var setScrollLockTarget = useScrollLock({\n        isEnabled: lockEnabled\n    });\n    var targetRef = function targetRef(element) {\n        setScrollCaptureTarget(element);\n        setScrollLockTarget(element);\n    };\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(react__WEBPACK_IMPORTED_MODULE_7__.Fragment, null, lockEnabled && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n        onClick: blurSelectInput,\n        css: _ref2$1\n    }), children(targetRef));\n}\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n    return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nvar _ref2 =  false ? 0 : {\n    name: \"5kkxb2-requiredInput-RequiredInput\",\n    styles: \"label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%;label:RequiredInput;\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlcXVpcmVkSW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNJIiwiZmlsZSI6IlJlcXVpcmVkSW5wdXQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyBGb2N1c0V2ZW50SGFuZGxlciwgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbmNvbnN0IFJlcXVpcmVkSW5wdXQ6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgb25Gb2N1czogRm9jdXNFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD47XG59PiA9ICh7IG5hbWUsIG9uRm9jdXMgfSkgPT4gKFxuICA8aW5wdXRcbiAgICByZXF1aXJlZFxuICAgIG5hbWU9e25hbWV9XG4gICAgdGFiSW5kZXg9ey0xfVxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAncmVxdWlyZWRJbnB1dCcsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH19XG4gICAgLy8gUHJldmVudCBgU3dpdGNoaW5nIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWRgIGVycm9yXG4gICAgdmFsdWU9XCJcIlxuICAgIG9uQ2hhbmdlPXsoKSA9PiB7fX1cbiAgLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJlcXVpcmVkSW5wdXQ7XG4iXX0= */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar RequiredInput = function RequiredInput(_ref) {\n    var name = _ref.name, onFocus = _ref.onFocus;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"input\", {\n        required: true,\n        name: name,\n        tabIndex: -1,\n        \"aria-hidden\": \"true\",\n        onFocus: onFocus,\n        css: _ref2,\n        value: \"\",\n        onChange: function onChange() {}\n    });\n};\nvar RequiredInput$1 = RequiredInput;\n/// <reference types=\"user-agent-data-types\" />\nfunction testPlatform(re) {\n    var _window$navigator$use;\n    return  false ? 0 : false;\n}\nfunction isIPhone() {\n    return testPlatform(/^iPhone/i);\n}\nfunction isMac() {\n    return testPlatform(/^Mac/i);\n}\nfunction isIPad() {\n    return testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    isMac() && navigator.maxTouchPoints > 1;\n}\nfunction isIOS() {\n    return isIPhone() || isIPad();\n}\nfunction isAppleDevice() {\n    return isMac() || isIOS();\n}\nvar formatGroupLabel = function formatGroupLabel(group) {\n    return group.label;\n};\nvar getOptionLabel$1 = function getOptionLabel(option) {\n    return option.label;\n};\nvar getOptionValue$1 = function getOptionValue(option) {\n    return option.value;\n};\nvar isOptionDisabled = function isOptionDisabled(option) {\n    return !!option.isDisabled;\n};\nvar defaultStyles = {\n    clearIndicator: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.a,\n    container: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.b,\n    control: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.d,\n    dropdownIndicator: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.e,\n    group: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.g,\n    groupHeading: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.f,\n    indicatorsContainer: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.i,\n    indicatorSeparator: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.h,\n    input: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.j,\n    loadingIndicator: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.l,\n    loadingMessage: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.k,\n    menu: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.m,\n    menuList: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.n,\n    menuPortal: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.o,\n    multiValue: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.p,\n    multiValueLabel: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.q,\n    multiValueRemove: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.t,\n    noOptionsMessage: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.u,\n    option: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.v,\n    placeholder: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.w,\n    singleValue: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.x,\n    valueContainer: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.y\n};\n// Merge Utility\n// Allows consumers to extend a base Select with additional styles\nfunction mergeStyles(source) {\n    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // initialize with source styles\n    var styles = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, source);\n    // massage in target styles\n    Object.keys(target).forEach(function(keyAsString) {\n        var key = keyAsString;\n        if (source[key]) {\n            styles[key] = function(rsCss, props) {\n                return target[key](source[key](rsCss, props), props);\n            };\n        } else {\n            styles[key] = target[key];\n        }\n    });\n    return styles;\n}\nvar colors = {\n    primary: \"#2684FF\",\n    primary75: \"#4C9AFF\",\n    primary50: \"#B2D4FF\",\n    primary25: \"#DEEBFF\",\n    danger: \"#DE350B\",\n    dangerLight: \"#FFBDAD\",\n    neutral0: \"hsl(0, 0%, 100%)\",\n    neutral5: \"hsl(0, 0%, 95%)\",\n    neutral10: \"hsl(0, 0%, 90%)\",\n    neutral20: \"hsl(0, 0%, 80%)\",\n    neutral30: \"hsl(0, 0%, 70%)\",\n    neutral40: \"hsl(0, 0%, 60%)\",\n    neutral50: \"hsl(0, 0%, 50%)\",\n    neutral60: \"hsl(0, 0%, 40%)\",\n    neutral70: \"hsl(0, 0%, 30%)\",\n    neutral80: \"hsl(0, 0%, 20%)\",\n    neutral90: \"hsl(0, 0%, 10%)\"\n};\nvar borderRadius = 4;\n// Used to calculate consistent margin/padding on elements\nvar baseUnit = 4;\n// The minimum height of the control\nvar controlHeight = 38;\n// The amount of space between the control and menu */\nvar menuGutter = baseUnit * 2;\nvar spacing = {\n    baseUnit: baseUnit,\n    controlHeight: controlHeight,\n    menuGutter: menuGutter\n};\nvar defaultTheme = {\n    borderRadius: borderRadius,\n    colors: colors,\n    spacing: spacing\n};\nvar defaultProps = {\n    \"aria-live\": \"polite\",\n    backspaceRemovesValue: true,\n    blurInputOnSelect: (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.z)(),\n    captureMenuScroll: !(0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.z)(),\n    classNames: {},\n    closeMenuOnSelect: true,\n    closeMenuOnScroll: false,\n    components: {},\n    controlShouldRenderValue: true,\n    escapeClearsValue: false,\n    filterOption: createFilter(),\n    formatGroupLabel: formatGroupLabel,\n    getOptionLabel: getOptionLabel$1,\n    getOptionValue: getOptionValue$1,\n    isDisabled: false,\n    isLoading: false,\n    isMulti: false,\n    isRtl: false,\n    isSearchable: true,\n    isOptionDisabled: isOptionDisabled,\n    loadingMessage: function loadingMessage() {\n        return \"Loading...\";\n    },\n    maxMenuHeight: 300,\n    minMenuHeight: 140,\n    menuIsOpen: false,\n    menuPlacement: \"bottom\",\n    menuPosition: \"absolute\",\n    menuShouldBlockScroll: false,\n    menuShouldScrollIntoView: !(0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.A)(),\n    noOptionsMessage: function noOptionsMessage() {\n        return \"No options\";\n    },\n    openMenuOnFocus: false,\n    openMenuOnClick: true,\n    options: [],\n    pageSize: 5,\n    placeholder: \"Select...\",\n    screenReaderStatus: function screenReaderStatus(_ref) {\n        var count = _ref.count;\n        return \"\".concat(count, \" result\").concat(count !== 1 ? \"s\" : \"\", \" available\");\n    },\n    styles: {},\n    tabIndex: 0,\n    tabSelectsValue: true,\n    unstyled: false\n};\nfunction toCategorizedOption(props, option, selectValue, index) {\n    var isDisabled = _isOptionDisabled(props, option, selectValue);\n    var isSelected = _isOptionSelected(props, option, selectValue);\n    var label = getOptionLabel(props, option);\n    var value = getOptionValue(props, option);\n    return {\n        type: \"option\",\n        data: option,\n        isDisabled: isDisabled,\n        isSelected: isSelected,\n        label: label,\n        value: value,\n        index: index\n    };\n}\nfunction buildCategorizedOptions(props, selectValue) {\n    return props.options.map(function(groupOrOption, groupOrOptionIndex) {\n        if (\"options\" in groupOrOption) {\n            var categorizedOptions = groupOrOption.options.map(function(option, optionIndex) {\n                return toCategorizedOption(props, option, selectValue, optionIndex);\n            }).filter(function(categorizedOption) {\n                return isFocusable(props, categorizedOption);\n            });\n            return categorizedOptions.length > 0 ? {\n                type: \"group\",\n                data: groupOrOption,\n                options: categorizedOptions,\n                index: groupOrOptionIndex\n            } : undefined;\n        }\n        var categorizedOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);\n        return isFocusable(props, categorizedOption) ? categorizedOption : undefined;\n    }).filter(_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.K);\n}\nfunction buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {\n    return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {\n        if (categorizedOption.type === \"group\") {\n            optionsAccumulator.push.apply(optionsAccumulator, (0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(categorizedOption.options.map(function(option) {\n                return option.data;\n            })));\n        } else {\n            optionsAccumulator.push(categorizedOption.data);\n        }\n        return optionsAccumulator;\n    }, []);\n}\nfunction buildFocusableOptionsWithIds(categorizedOptions, optionId) {\n    return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {\n        if (categorizedOption.type === \"group\") {\n            optionsAccumulator.push.apply(optionsAccumulator, (0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(categorizedOption.options.map(function(option) {\n                return {\n                    data: option.data,\n                    id: \"\".concat(optionId, \"-\").concat(categorizedOption.index, \"-\").concat(option.index)\n                };\n            })));\n        } else {\n            optionsAccumulator.push({\n                data: categorizedOption.data,\n                id: \"\".concat(optionId, \"-\").concat(categorizedOption.index)\n            });\n        }\n        return optionsAccumulator;\n    }, []);\n}\nfunction buildFocusableOptions(props, selectValue) {\n    return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue));\n}\nfunction isFocusable(props, categorizedOption) {\n    var _props$inputValue = props.inputValue, inputValue = _props$inputValue === void 0 ? \"\" : _props$inputValue;\n    var data = categorizedOption.data, isSelected = categorizedOption.isSelected, label = categorizedOption.label, value = categorizedOption.value;\n    return (!shouldHideSelectedOptions(props) || !isSelected) && _filterOption(props, {\n        label: label,\n        value: value,\n        data: data\n    }, inputValue);\n}\nfunction getNextFocusedValue(state, nextSelectValue) {\n    var focusedValue = state.focusedValue, lastSelectValue = state.selectValue;\n    var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);\n    if (lastFocusedIndex > -1) {\n        var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);\n        if (nextFocusedIndex > -1) {\n            // the focused value is still in the selectValue, return it\n            return focusedValue;\n        } else if (lastFocusedIndex < nextSelectValue.length) {\n            // the focusedValue is not present in the next selectValue array by\n            // reference, so return the new value at the same index\n            return nextSelectValue[lastFocusedIndex];\n        }\n    }\n    return null;\n}\nfunction getNextFocusedOption(state, options) {\n    var lastFocusedOption = state.focusedOption;\n    return lastFocusedOption && options.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options[0];\n}\nvar getFocusedOptionId = function getFocusedOptionId(focusableOptionsWithIds, focusedOption) {\n    var _focusableOptionsWith;\n    var focusedOptionId = (_focusableOptionsWith = focusableOptionsWithIds.find(function(option) {\n        return option.data === focusedOption;\n    })) === null || _focusableOptionsWith === void 0 ? void 0 : _focusableOptionsWith.id;\n    return focusedOptionId || null;\n};\nvar getOptionLabel = function getOptionLabel(props, data) {\n    return props.getOptionLabel(data);\n};\nvar getOptionValue = function getOptionValue(props, data) {\n    return props.getOptionValue(data);\n};\nfunction _isOptionDisabled(props, option, selectValue) {\n    return typeof props.isOptionDisabled === \"function\" ? props.isOptionDisabled(option, selectValue) : false;\n}\nfunction _isOptionSelected(props, option, selectValue) {\n    if (selectValue.indexOf(option) > -1) return true;\n    if (typeof props.isOptionSelected === \"function\") {\n        return props.isOptionSelected(option, selectValue);\n    }\n    var candidate = getOptionValue(props, option);\n    return selectValue.some(function(i) {\n        return getOptionValue(props, i) === candidate;\n    });\n}\nfunction _filterOption(props, option, inputValue) {\n    return props.filterOption ? props.filterOption(option, inputValue) : true;\n}\nvar shouldHideSelectedOptions = function shouldHideSelectedOptions(props) {\n    var hideSelectedOptions = props.hideSelectedOptions, isMulti = props.isMulti;\n    if (hideSelectedOptions === undefined) return isMulti;\n    return hideSelectedOptions;\n};\nvar instanceId = 1;\nvar Select = /*#__PURE__*/ function(_Component) {\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Select, _Component);\n    var _super = (0,_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Select);\n    // Misc. Instance Properties\n    // ------------------------------\n    // TODO\n    // Refs\n    // ------------------------------\n    // Lifecycle\n    // ------------------------------\n    function Select(_props) {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Select);\n        _this = _super.call(this, _props);\n        _this.state = {\n            ariaSelection: null,\n            focusedOption: null,\n            focusedOptionId: null,\n            focusableOptionsWithIds: [],\n            focusedValue: null,\n            inputIsHidden: false,\n            isFocused: false,\n            selectValue: [],\n            clearFocusValueOnUpdate: false,\n            prevWasFocused: false,\n            inputIsHiddenAfterUpdate: undefined,\n            prevProps: undefined,\n            instancePrefix: \"\"\n        };\n        _this.blockOptionHover = false;\n        _this.isComposing = false;\n        _this.commonProps = void 0;\n        _this.initialTouchX = 0;\n        _this.initialTouchY = 0;\n        _this.openAfterFocus = false;\n        _this.scrollToFocusedOptionOnUpdate = false;\n        _this.userIsDragging = void 0;\n        _this.isAppleDevice = isAppleDevice();\n        _this.controlRef = null;\n        _this.getControlRef = function(ref) {\n            _this.controlRef = ref;\n        };\n        _this.focusedOptionRef = null;\n        _this.getFocusedOptionRef = function(ref) {\n            _this.focusedOptionRef = ref;\n        };\n        _this.menuListRef = null;\n        _this.getMenuListRef = function(ref) {\n            _this.menuListRef = ref;\n        };\n        _this.inputRef = null;\n        _this.getInputRef = function(ref) {\n            _this.inputRef = ref;\n        };\n        _this.focus = _this.focusInput;\n        _this.blur = _this.blurInput;\n        _this.onChange = function(newValue, actionMeta) {\n            var _this$props = _this.props, onChange = _this$props.onChange, name = _this$props.name;\n            actionMeta.name = name;\n            _this.ariaOnChange(newValue, actionMeta);\n            onChange(newValue, actionMeta);\n        };\n        _this.setValue = function(newValue, action, option) {\n            var _this$props2 = _this.props, closeMenuOnSelect = _this$props2.closeMenuOnSelect, isMulti = _this$props2.isMulti, inputValue = _this$props2.inputValue;\n            _this.onInputChange(\"\", {\n                action: \"set-value\",\n                prevInputValue: inputValue\n            });\n            if (closeMenuOnSelect) {\n                _this.setState({\n                    inputIsHiddenAfterUpdate: !isMulti\n                });\n                _this.onMenuClose();\n            }\n            // when the select value should change, we should reset focusedValue\n            _this.setState({\n                clearFocusValueOnUpdate: true\n            });\n            _this.onChange(newValue, {\n                action: action,\n                option: option\n            });\n        };\n        _this.selectOption = function(newValue) {\n            var _this$props3 = _this.props, blurInputOnSelect = _this$props3.blurInputOnSelect, isMulti = _this$props3.isMulti, name = _this$props3.name;\n            var selectValue = _this.state.selectValue;\n            var deselected = isMulti && _this.isOptionSelected(newValue, selectValue);\n            var isDisabled = _this.isOptionDisabled(newValue, selectValue);\n            if (deselected) {\n                var candidate = _this.getOptionValue(newValue);\n                _this.setValue((0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.B)(selectValue.filter(function(i) {\n                    return _this.getOptionValue(i) !== candidate;\n                })), \"deselect-option\", newValue);\n            } else if (!isDisabled) {\n                // Select option if option is not disabled\n                if (isMulti) {\n                    _this.setValue((0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.B)([].concat((0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(selectValue), [\n                        newValue\n                    ])), \"select-option\", newValue);\n                } else {\n                    _this.setValue((0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.C)(newValue), \"select-option\");\n                }\n            } else {\n                _this.ariaOnChange((0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.C)(newValue), {\n                    action: \"select-option\",\n                    option: newValue,\n                    name: name\n                });\n                return;\n            }\n            if (blurInputOnSelect) {\n                _this.blurInput();\n            }\n        };\n        _this.removeValue = function(removedValue) {\n            var isMulti = _this.props.isMulti;\n            var selectValue = _this.state.selectValue;\n            var candidate = _this.getOptionValue(removedValue);\n            var newValueArray = selectValue.filter(function(i) {\n                return _this.getOptionValue(i) !== candidate;\n            });\n            var newValue = (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.D)(isMulti, newValueArray, newValueArray[0] || null);\n            _this.onChange(newValue, {\n                action: \"remove-value\",\n                removedValue: removedValue\n            });\n            _this.focusInput();\n        };\n        _this.clearValue = function() {\n            var selectValue = _this.state.selectValue;\n            _this.onChange((0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.D)(_this.props.isMulti, [], null), {\n                action: \"clear\",\n                removedValues: selectValue\n            });\n        };\n        _this.popValue = function() {\n            var isMulti = _this.props.isMulti;\n            var selectValue = _this.state.selectValue;\n            var lastSelectedValue = selectValue[selectValue.length - 1];\n            var newValueArray = selectValue.slice(0, selectValue.length - 1);\n            var newValue = (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.D)(isMulti, newValueArray, newValueArray[0] || null);\n            if (lastSelectedValue) {\n                _this.onChange(newValue, {\n                    action: \"pop-value\",\n                    removedValue: lastSelectedValue\n                });\n            }\n        };\n        _this.getFocusedOptionId = function(focusedOption) {\n            return getFocusedOptionId(_this.state.focusableOptionsWithIds, focusedOption);\n        };\n        _this.getFocusableOptionsWithIds = function() {\n            return buildFocusableOptionsWithIds(buildCategorizedOptions(_this.props, _this.state.selectValue), _this.getElementId(\"option\"));\n        };\n        _this.getValue = function() {\n            return _this.state.selectValue;\n        };\n        _this.cx = function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.E.apply(void 0, [\n                _this.props.classNamePrefix\n            ].concat(args));\n        };\n        _this.getOptionLabel = function(data) {\n            return getOptionLabel(_this.props, data);\n        };\n        _this.getOptionValue = function(data) {\n            return getOptionValue(_this.props, data);\n        };\n        _this.getStyles = function(key, props) {\n            var unstyled = _this.props.unstyled;\n            var base = defaultStyles[key](props, unstyled);\n            base.boxSizing = \"border-box\";\n            var custom = _this.props.styles[key];\n            return custom ? custom(base, props) : base;\n        };\n        _this.getClassNames = function(key, props) {\n            var _this$props$className, _this$props$className2;\n            return (_this$props$className = (_this$props$className2 = _this.props.classNames)[key]) === null || _this$props$className === void 0 ? void 0 : _this$props$className.call(_this$props$className2, props);\n        };\n        _this.getElementId = function(element) {\n            return \"\".concat(_this.state.instancePrefix, \"-\").concat(element);\n        };\n        _this.getComponents = function() {\n            return (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.F)(_this.props);\n        };\n        _this.buildCategorizedOptions = function() {\n            return buildCategorizedOptions(_this.props, _this.state.selectValue);\n        };\n        _this.getCategorizedOptions = function() {\n            return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];\n        };\n        _this.buildFocusableOptions = function() {\n            return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());\n        };\n        _this.getFocusableOptions = function() {\n            return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];\n        };\n        _this.ariaOnChange = function(value, actionMeta) {\n            _this.setState({\n                ariaSelection: (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    value: value\n                }, actionMeta)\n            });\n        };\n        _this.onMenuMouseDown = function(event) {\n            if (event.button !== 0) {\n                return;\n            }\n            event.stopPropagation();\n            event.preventDefault();\n            _this.focusInput();\n        };\n        _this.onMenuMouseMove = function(event) {\n            _this.blockOptionHover = false;\n        };\n        _this.onControlMouseDown = function(event) {\n            // Event captured by dropdown indicator\n            if (event.defaultPrevented) {\n                return;\n            }\n            var openMenuOnClick = _this.props.openMenuOnClick;\n            if (!_this.state.isFocused) {\n                if (openMenuOnClick) {\n                    _this.openAfterFocus = true;\n                }\n                _this.focusInput();\n            } else if (!_this.props.menuIsOpen) {\n                if (openMenuOnClick) {\n                    _this.openMenu(\"first\");\n                }\n            } else {\n                if (event.target.tagName !== \"INPUT\" && event.target.tagName !== \"TEXTAREA\") {\n                    _this.onMenuClose();\n                }\n            }\n            if (event.target.tagName !== \"INPUT\" && event.target.tagName !== \"TEXTAREA\") {\n                event.preventDefault();\n            }\n        };\n        _this.onDropdownIndicatorMouseDown = function(event) {\n            // ignore mouse events that weren't triggered by the primary button\n            if (event && event.type === \"mousedown\" && event.button !== 0) {\n                return;\n            }\n            if (_this.props.isDisabled) return;\n            var _this$props4 = _this.props, isMulti = _this$props4.isMulti, menuIsOpen = _this$props4.menuIsOpen;\n            _this.focusInput();\n            if (menuIsOpen) {\n                _this.setState({\n                    inputIsHiddenAfterUpdate: !isMulti\n                });\n                _this.onMenuClose();\n            } else {\n                _this.openMenu(\"first\");\n            }\n            event.preventDefault();\n        };\n        _this.onClearIndicatorMouseDown = function(event) {\n            // ignore mouse events that weren't triggered by the primary button\n            if (event && event.type === \"mousedown\" && event.button !== 0) {\n                return;\n            }\n            _this.clearValue();\n            event.preventDefault();\n            _this.openAfterFocus = false;\n            if (event.type === \"touchend\") {\n                _this.focusInput();\n            } else {\n                setTimeout(function() {\n                    return _this.focusInput();\n                });\n            }\n        };\n        _this.onScroll = function(event) {\n            if (typeof _this.props.closeMenuOnScroll === \"boolean\") {\n                if (event.target instanceof HTMLElement && (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.G)(event.target)) {\n                    _this.props.onMenuClose();\n                }\n            } else if (typeof _this.props.closeMenuOnScroll === \"function\") {\n                if (_this.props.closeMenuOnScroll(event)) {\n                    _this.props.onMenuClose();\n                }\n            }\n        };\n        _this.onCompositionStart = function() {\n            _this.isComposing = true;\n        };\n        _this.onCompositionEnd = function() {\n            _this.isComposing = false;\n        };\n        _this.onTouchStart = function(_ref2) {\n            var touches = _ref2.touches;\n            var touch = touches && touches.item(0);\n            if (!touch) {\n                return;\n            }\n            _this.initialTouchX = touch.clientX;\n            _this.initialTouchY = touch.clientY;\n            _this.userIsDragging = false;\n        };\n        _this.onTouchMove = function(_ref3) {\n            var touches = _ref3.touches;\n            var touch = touches && touches.item(0);\n            if (!touch) {\n                return;\n            }\n            var deltaX = Math.abs(touch.clientX - _this.initialTouchX);\n            var deltaY = Math.abs(touch.clientY - _this.initialTouchY);\n            var moveThreshold = 5;\n            _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;\n        };\n        _this.onTouchEnd = function(event) {\n            if (_this.userIsDragging) return;\n            // close the menu if the user taps outside\n            // we're checking on event.target here instead of event.currentTarget, because we want to assert information\n            // on events on child elements, not the document (which we've attached this handler to).\n            if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {\n                _this.blurInput();\n            }\n            // reset move vars\n            _this.initialTouchX = 0;\n            _this.initialTouchY = 0;\n        };\n        _this.onControlTouchEnd = function(event) {\n            if (_this.userIsDragging) return;\n            _this.onControlMouseDown(event);\n        };\n        _this.onClearIndicatorTouchEnd = function(event) {\n            if (_this.userIsDragging) return;\n            _this.onClearIndicatorMouseDown(event);\n        };\n        _this.onDropdownIndicatorTouchEnd = function(event) {\n            if (_this.userIsDragging) return;\n            _this.onDropdownIndicatorMouseDown(event);\n        };\n        _this.handleInputChange = function(event) {\n            var prevInputValue = _this.props.inputValue;\n            var inputValue = event.currentTarget.value;\n            _this.setState({\n                inputIsHiddenAfterUpdate: false\n            });\n            _this.onInputChange(inputValue, {\n                action: \"input-change\",\n                prevInputValue: prevInputValue\n            });\n            if (!_this.props.menuIsOpen) {\n                _this.onMenuOpen();\n            }\n        };\n        _this.onInputFocus = function(event) {\n            if (_this.props.onFocus) {\n                _this.props.onFocus(event);\n            }\n            _this.setState({\n                inputIsHiddenAfterUpdate: false,\n                isFocused: true\n            });\n            if (_this.openAfterFocus || _this.props.openMenuOnFocus) {\n                _this.openMenu(\"first\");\n            }\n            _this.openAfterFocus = false;\n        };\n        _this.onInputBlur = function(event) {\n            var prevInputValue = _this.props.inputValue;\n            if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {\n                _this.inputRef.focus();\n                return;\n            }\n            if (_this.props.onBlur) {\n                _this.props.onBlur(event);\n            }\n            _this.onInputChange(\"\", {\n                action: \"input-blur\",\n                prevInputValue: prevInputValue\n            });\n            _this.onMenuClose();\n            _this.setState({\n                focusedValue: null,\n                isFocused: false\n            });\n        };\n        _this.onOptionHover = function(focusedOption) {\n            if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {\n                return;\n            }\n            var options = _this.getFocusableOptions();\n            var focusedOptionIndex = options.indexOf(focusedOption);\n            _this.setState({\n                focusedOption: focusedOption,\n                focusedOptionId: focusedOptionIndex > -1 ? _this.getFocusedOptionId(focusedOption) : null\n            });\n        };\n        _this.shouldHideSelectedOptions = function() {\n            return shouldHideSelectedOptions(_this.props);\n        };\n        _this.onValueInputFocus = function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            _this.focus();\n        };\n        _this.onKeyDown = function(event) {\n            var _this$props5 = _this.props, isMulti = _this$props5.isMulti, backspaceRemovesValue = _this$props5.backspaceRemovesValue, escapeClearsValue = _this$props5.escapeClearsValue, inputValue = _this$props5.inputValue, isClearable = _this$props5.isClearable, isDisabled = _this$props5.isDisabled, menuIsOpen = _this$props5.menuIsOpen, onKeyDown = _this$props5.onKeyDown, tabSelectsValue = _this$props5.tabSelectsValue, openMenuOnFocus = _this$props5.openMenuOnFocus;\n            var _this$state = _this.state, focusedOption = _this$state.focusedOption, focusedValue = _this$state.focusedValue, selectValue = _this$state.selectValue;\n            if (isDisabled) return;\n            if (typeof onKeyDown === \"function\") {\n                onKeyDown(event);\n                if (event.defaultPrevented) {\n                    return;\n                }\n            }\n            // Block option hover events when the user has just pressed a key\n            _this.blockOptionHover = true;\n            switch(event.key){\n                case \"ArrowLeft\":\n                    if (!isMulti || inputValue) return;\n                    _this.focusValue(\"previous\");\n                    break;\n                case \"ArrowRight\":\n                    if (!isMulti || inputValue) return;\n                    _this.focusValue(\"next\");\n                    break;\n                case \"Delete\":\n                case \"Backspace\":\n                    if (inputValue) return;\n                    if (focusedValue) {\n                        _this.removeValue(focusedValue);\n                    } else {\n                        if (!backspaceRemovesValue) return;\n                        if (isMulti) {\n                            _this.popValue();\n                        } else if (isClearable) {\n                            _this.clearValue();\n                        }\n                    }\n                    break;\n                case \"Tab\":\n                    if (_this.isComposing) return;\n                    if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption || // don't capture the event if the menu opens on focus and the focused\n                    // option is already selected; it breaks the flow of navigation\n                    openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {\n                        return;\n                    }\n                    _this.selectOption(focusedOption);\n                    break;\n                case \"Enter\":\n                    if (event.keyCode === 229) {\n                        break;\n                    }\n                    if (menuIsOpen) {\n                        if (!focusedOption) return;\n                        if (_this.isComposing) return;\n                        _this.selectOption(focusedOption);\n                        break;\n                    }\n                    return;\n                case \"Escape\":\n                    if (menuIsOpen) {\n                        _this.setState({\n                            inputIsHiddenAfterUpdate: false\n                        });\n                        _this.onInputChange(\"\", {\n                            action: \"menu-close\",\n                            prevInputValue: inputValue\n                        });\n                        _this.onMenuClose();\n                    } else if (isClearable && escapeClearsValue) {\n                        _this.clearValue();\n                    }\n                    break;\n                case \" \":\n                    // space\n                    if (inputValue) {\n                        return;\n                    }\n                    if (!menuIsOpen) {\n                        _this.openMenu(\"first\");\n                        break;\n                    }\n                    if (!focusedOption) return;\n                    _this.selectOption(focusedOption);\n                    break;\n                case \"ArrowUp\":\n                    if (menuIsOpen) {\n                        _this.focusOption(\"up\");\n                    } else {\n                        _this.openMenu(\"last\");\n                    }\n                    break;\n                case \"ArrowDown\":\n                    if (menuIsOpen) {\n                        _this.focusOption(\"down\");\n                    } else {\n                        _this.openMenu(\"first\");\n                    }\n                    break;\n                case \"PageUp\":\n                    if (!menuIsOpen) return;\n                    _this.focusOption(\"pageup\");\n                    break;\n                case \"PageDown\":\n                    if (!menuIsOpen) return;\n                    _this.focusOption(\"pagedown\");\n                    break;\n                case \"Home\":\n                    if (!menuIsOpen) return;\n                    _this.focusOption(\"first\");\n                    break;\n                case \"End\":\n                    if (!menuIsOpen) return;\n                    _this.focusOption(\"last\");\n                    break;\n                default:\n                    return;\n            }\n            event.preventDefault();\n        };\n        _this.state.instancePrefix = \"react-select-\" + (_this.props.instanceId || ++instanceId);\n        _this.state.selectValue = (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.H)(_props.value);\n        // Set focusedOption if menuIsOpen is set on init (e.g. defaultMenuIsOpen)\n        if (_props.menuIsOpen && _this.state.selectValue.length) {\n            var focusableOptionsWithIds = _this.getFocusableOptionsWithIds();\n            var focusableOptions = _this.buildFocusableOptions();\n            var optionIndex = focusableOptions.indexOf(_this.state.selectValue[0]);\n            _this.state.focusableOptionsWithIds = focusableOptionsWithIds;\n            _this.state.focusedOption = focusableOptions[optionIndex];\n            _this.state.focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusableOptions[optionIndex]);\n        }\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Select, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.startListeningComposition();\n                this.startListeningToTouch();\n                if (this.props.closeMenuOnScroll && document && document.addEventListener) {\n                    // Listen to all scroll events, and filter them out inside of 'onScroll'\n                    document.addEventListener(\"scroll\", this.onScroll, true);\n                }\n                if (this.props.autoFocus) {\n                    this.focusInput();\n                }\n                // Scroll focusedOption into view if menuIsOpen is set on mount (e.g. defaultMenuIsOpen)\n                if (this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef) {\n                    (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.I)(this.menuListRef, this.focusedOptionRef);\n                }\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var _this$props6 = this.props, isDisabled = _this$props6.isDisabled, menuIsOpen = _this$props6.menuIsOpen;\n                var isFocused = this.state.isFocused;\n                if (// ensure focus is restored correctly when the control becomes enabled\n                isFocused && !isDisabled && prevProps.isDisabled || // ensure focus is on the Input when the menu opens\n                isFocused && menuIsOpen && !prevProps.menuIsOpen) {\n                    this.focusInput();\n                }\n                if (isFocused && isDisabled && !prevProps.isDisabled) {\n                    // ensure select state gets blurred in case Select is programmatically disabled while focused\n                    // eslint-disable-next-line react/no-did-update-set-state\n                    this.setState({\n                        isFocused: false\n                    }, this.onMenuClose);\n                } else if (!isFocused && !isDisabled && prevProps.isDisabled && this.inputRef === document.activeElement) {\n                    // ensure select state gets focused in case Select is programatically re-enabled while focused (Firefox)\n                    // eslint-disable-next-line react/no-did-update-set-state\n                    this.setState({\n                        isFocused: true\n                    });\n                }\n                // scroll the focused option into view if necessary\n                if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {\n                    (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.I)(this.menuListRef, this.focusedOptionRef);\n                    this.scrollToFocusedOptionOnUpdate = false;\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.stopListeningComposition();\n                this.stopListeningToTouch();\n                document.removeEventListener(\"scroll\", this.onScroll, true);\n            }\n        },\n        {\n            key: \"onMenuOpen\",\n            value: function onMenuOpen() {\n                this.props.onMenuOpen();\n            }\n        },\n        {\n            key: \"onMenuClose\",\n            value: function onMenuClose() {\n                this.onInputChange(\"\", {\n                    action: \"menu-close\",\n                    prevInputValue: this.props.inputValue\n                });\n                this.props.onMenuClose();\n            }\n        },\n        {\n            key: \"onInputChange\",\n            value: function onInputChange(newValue, actionMeta) {\n                this.props.onInputChange(newValue, actionMeta);\n            }\n        },\n        {\n            key: \"focusInput\",\n            value: function focusInput() {\n                if (!this.inputRef) return;\n                this.inputRef.focus();\n            }\n        },\n        {\n            key: \"blurInput\",\n            value: function blurInput() {\n                if (!this.inputRef) return;\n                this.inputRef.blur();\n            }\n        },\n        {\n            key: \"openMenu\",\n            value: function openMenu(focusOption) {\n                var _this2 = this;\n                var _this$state2 = this.state, selectValue = _this$state2.selectValue, isFocused = _this$state2.isFocused;\n                var focusableOptions = this.buildFocusableOptions();\n                var openAtIndex = focusOption === \"first\" ? 0 : focusableOptions.length - 1;\n                if (!this.props.isMulti) {\n                    var selectedIndex = focusableOptions.indexOf(selectValue[0]);\n                    if (selectedIndex > -1) {\n                        openAtIndex = selectedIndex;\n                    }\n                }\n                // only scroll if the menu isn't already open\n                this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);\n                this.setState({\n                    inputIsHiddenAfterUpdate: false,\n                    focusedValue: null,\n                    focusedOption: focusableOptions[openAtIndex],\n                    focusedOptionId: this.getFocusedOptionId(focusableOptions[openAtIndex])\n                }, function() {\n                    return _this2.onMenuOpen();\n                });\n            }\n        },\n        {\n            key: \"focusValue\",\n            value: function focusValue(direction) {\n                var _this$state3 = this.state, selectValue = _this$state3.selectValue, focusedValue = _this$state3.focusedValue;\n                // Only multiselects support value focusing\n                if (!this.props.isMulti) return;\n                this.setState({\n                    focusedOption: null\n                });\n                var focusedIndex = selectValue.indexOf(focusedValue);\n                if (!focusedValue) {\n                    focusedIndex = -1;\n                }\n                var lastIndex = selectValue.length - 1;\n                var nextFocus = -1;\n                if (!selectValue.length) return;\n                switch(direction){\n                    case \"previous\":\n                        if (focusedIndex === 0) {\n                            // don't cycle from the start to the end\n                            nextFocus = 0;\n                        } else if (focusedIndex === -1) {\n                            // if nothing is focused, focus the last value first\n                            nextFocus = lastIndex;\n                        } else {\n                            nextFocus = focusedIndex - 1;\n                        }\n                        break;\n                    case \"next\":\n                        if (focusedIndex > -1 && focusedIndex < lastIndex) {\n                            nextFocus = focusedIndex + 1;\n                        }\n                        break;\n                }\n                this.setState({\n                    inputIsHidden: nextFocus !== -1,\n                    focusedValue: selectValue[nextFocus]\n                });\n            }\n        },\n        {\n            key: \"focusOption\",\n            value: function focusOption() {\n                var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"first\";\n                var pageSize = this.props.pageSize;\n                var focusedOption = this.state.focusedOption;\n                var options = this.getFocusableOptions();\n                if (!options.length) return;\n                var nextFocus = 0; // handles 'first'\n                var focusedIndex = options.indexOf(focusedOption);\n                if (!focusedOption) {\n                    focusedIndex = -1;\n                }\n                if (direction === \"up\") {\n                    nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options.length - 1;\n                } else if (direction === \"down\") {\n                    nextFocus = (focusedIndex + 1) % options.length;\n                } else if (direction === \"pageup\") {\n                    nextFocus = focusedIndex - pageSize;\n                    if (nextFocus < 0) nextFocus = 0;\n                } else if (direction === \"pagedown\") {\n                    nextFocus = focusedIndex + pageSize;\n                    if (nextFocus > options.length - 1) nextFocus = options.length - 1;\n                } else if (direction === \"last\") {\n                    nextFocus = options.length - 1;\n                }\n                this.scrollToFocusedOptionOnUpdate = true;\n                this.setState({\n                    focusedOption: options[nextFocus],\n                    focusedValue: null,\n                    focusedOptionId: this.getFocusedOptionId(options[nextFocus])\n                });\n            }\n        },\n        {\n            key: \"getTheme\",\n            value: // ==============================\n            // Getters\n            // ==============================\n            function getTheme() {\n                // Use the default theme if there are no customisations.\n                if (!this.props.theme) {\n                    return defaultTheme;\n                }\n                // If the theme prop is a function, assume the function\n                // knows how to merge the passed-in default theme with\n                // its own modifications.\n                if (typeof this.props.theme === \"function\") {\n                    return this.props.theme(defaultTheme);\n                }\n                // Otherwise, if a plain theme object was passed in,\n                // overlay it with the default theme.\n                return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, defaultTheme), this.props.theme);\n            }\n        },\n        {\n            key: \"getCommonProps\",\n            value: function getCommonProps() {\n                var clearValue = this.clearValue, cx = this.cx, getStyles = this.getStyles, getClassNames = this.getClassNames, getValue = this.getValue, selectOption = this.selectOption, setValue = this.setValue, props = this.props;\n                var isMulti = props.isMulti, isRtl = props.isRtl, options = props.options;\n                var hasValue = this.hasValue();\n                return {\n                    clearValue: clearValue,\n                    cx: cx,\n                    getStyles: getStyles,\n                    getClassNames: getClassNames,\n                    getValue: getValue,\n                    hasValue: hasValue,\n                    isMulti: isMulti,\n                    isRtl: isRtl,\n                    options: options,\n                    selectOption: selectOption,\n                    selectProps: props,\n                    setValue: setValue,\n                    theme: this.getTheme()\n                };\n            }\n        },\n        {\n            key: \"hasValue\",\n            value: function hasValue() {\n                var selectValue = this.state.selectValue;\n                return selectValue.length > 0;\n            }\n        },\n        {\n            key: \"hasOptions\",\n            value: function hasOptions() {\n                return !!this.getFocusableOptions().length;\n            }\n        },\n        {\n            key: \"isClearable\",\n            value: function isClearable() {\n                var _this$props7 = this.props, isClearable = _this$props7.isClearable, isMulti = _this$props7.isMulti;\n                // single select, by default, IS NOT clearable\n                // multi select, by default, IS clearable\n                if (isClearable === undefined) return isMulti;\n                return isClearable;\n            }\n        },\n        {\n            key: \"isOptionDisabled\",\n            value: function isOptionDisabled(option, selectValue) {\n                return _isOptionDisabled(this.props, option, selectValue);\n            }\n        },\n        {\n            key: \"isOptionSelected\",\n            value: function isOptionSelected(option, selectValue) {\n                return _isOptionSelected(this.props, option, selectValue);\n            }\n        },\n        {\n            key: \"filterOption\",\n            value: function filterOption(option, inputValue) {\n                return _filterOption(this.props, option, inputValue);\n            }\n        },\n        {\n            key: \"formatOptionLabel\",\n            value: function formatOptionLabel(data, context) {\n                if (typeof this.props.formatOptionLabel === \"function\") {\n                    var _inputValue = this.props.inputValue;\n                    var _selectValue = this.state.selectValue;\n                    return this.props.formatOptionLabel(data, {\n                        context: context,\n                        inputValue: _inputValue,\n                        selectValue: _selectValue\n                    });\n                } else {\n                    return this.getOptionLabel(data);\n                }\n            }\n        },\n        {\n            key: \"formatGroupLabel\",\n            value: function formatGroupLabel(data) {\n                return this.props.formatGroupLabel(data);\n            }\n        },\n        {\n            key: \"startListeningComposition\",\n            value: // ==============================\n            // Composition Handlers\n            // ==============================\n            function startListeningComposition() {\n                if (document && document.addEventListener) {\n                    document.addEventListener(\"compositionstart\", this.onCompositionStart, false);\n                    document.addEventListener(\"compositionend\", this.onCompositionEnd, false);\n                }\n            }\n        },\n        {\n            key: \"stopListeningComposition\",\n            value: function stopListeningComposition() {\n                if (document && document.removeEventListener) {\n                    document.removeEventListener(\"compositionstart\", this.onCompositionStart);\n                    document.removeEventListener(\"compositionend\", this.onCompositionEnd);\n                }\n            }\n        },\n        {\n            key: \"startListeningToTouch\",\n            value: // ==============================\n            // Touch Handlers\n            // ==============================\n            function startListeningToTouch() {\n                if (document && document.addEventListener) {\n                    document.addEventListener(\"touchstart\", this.onTouchStart, false);\n                    document.addEventListener(\"touchmove\", this.onTouchMove, false);\n                    document.addEventListener(\"touchend\", this.onTouchEnd, false);\n                }\n            }\n        },\n        {\n            key: \"stopListeningToTouch\",\n            value: function stopListeningToTouch() {\n                if (document && document.removeEventListener) {\n                    document.removeEventListener(\"touchstart\", this.onTouchStart);\n                    document.removeEventListener(\"touchmove\", this.onTouchMove);\n                    document.removeEventListener(\"touchend\", this.onTouchEnd);\n                }\n            }\n        },\n        {\n            key: \"renderInput\",\n            value: // ==============================\n            // Renderers\n            // ==============================\n            function renderInput() {\n                var _this$props8 = this.props, isDisabled = _this$props8.isDisabled, isSearchable = _this$props8.isSearchable, inputId = _this$props8.inputId, inputValue = _this$props8.inputValue, tabIndex = _this$props8.tabIndex, form = _this$props8.form, menuIsOpen = _this$props8.menuIsOpen, required = _this$props8.required;\n                var _this$getComponents = this.getComponents(), Input = _this$getComponents.Input;\n                var _this$state4 = this.state, inputIsHidden = _this$state4.inputIsHidden, ariaSelection = _this$state4.ariaSelection;\n                var commonProps = this.commonProps;\n                var id = inputId || this.getElementId(\"input\");\n                // aria attributes makes the JSX \"noisy\", separated for clarity\n                var ariaAttributes = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    \"aria-autocomplete\": \"list\",\n                    \"aria-expanded\": menuIsOpen,\n                    \"aria-haspopup\": true,\n                    \"aria-errormessage\": this.props[\"aria-errormessage\"],\n                    \"aria-invalid\": this.props[\"aria-invalid\"],\n                    \"aria-label\": this.props[\"aria-label\"],\n                    \"aria-labelledby\": this.props[\"aria-labelledby\"],\n                    \"aria-required\": required,\n                    role: \"combobox\",\n                    \"aria-activedescendant\": this.isAppleDevice ? undefined : this.state.focusedOptionId || \"\"\n                }, menuIsOpen && {\n                    \"aria-controls\": this.getElementId(\"listbox\")\n                }), !isSearchable && {\n                    \"aria-readonly\": true\n                }), this.hasValue() ? (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === \"initial-input-focus\" && {\n                    \"aria-describedby\": this.getElementId(\"live-region\")\n                } : {\n                    \"aria-describedby\": this.getElementId(\"placeholder\")\n                });\n                if (!isSearchable) {\n                    // use a dummy input to maintain focus/blur functionality\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(DummyInput, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n                        id: id,\n                        innerRef: this.getInputRef,\n                        onBlur: this.onInputBlur,\n                        onChange: _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.J,\n                        onFocus: this.onInputFocus,\n                        disabled: isDisabled,\n                        tabIndex: tabIndex,\n                        inputMode: \"none\",\n                        form: form,\n                        value: \"\"\n                    }, ariaAttributes));\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(Input, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    autoCapitalize: \"none\",\n                    autoComplete: \"off\",\n                    autoCorrect: \"off\",\n                    id: id,\n                    innerRef: this.getInputRef,\n                    isDisabled: isDisabled,\n                    isHidden: inputIsHidden,\n                    onBlur: this.onInputBlur,\n                    onChange: this.handleInputChange,\n                    onFocus: this.onInputFocus,\n                    spellCheck: \"false\",\n                    tabIndex: tabIndex,\n                    form: form,\n                    type: \"text\",\n                    value: inputValue\n                }, ariaAttributes));\n            }\n        },\n        {\n            key: \"renderPlaceholderOrValue\",\n            value: function renderPlaceholderOrValue() {\n                var _this3 = this;\n                var _this$getComponents2 = this.getComponents(), MultiValue = _this$getComponents2.MultiValue, MultiValueContainer = _this$getComponents2.MultiValueContainer, MultiValueLabel = _this$getComponents2.MultiValueLabel, MultiValueRemove = _this$getComponents2.MultiValueRemove, SingleValue = _this$getComponents2.SingleValue, Placeholder = _this$getComponents2.Placeholder;\n                var commonProps = this.commonProps;\n                var _this$props9 = this.props, controlShouldRenderValue = _this$props9.controlShouldRenderValue, isDisabled = _this$props9.isDisabled, isMulti = _this$props9.isMulti, inputValue = _this$props9.inputValue, placeholder = _this$props9.placeholder;\n                var _this$state5 = this.state, selectValue = _this$state5.selectValue, focusedValue = _this$state5.focusedValue, isFocused = _this$state5.isFocused;\n                if (!this.hasValue() || !controlShouldRenderValue) {\n                    return inputValue ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(Placeholder, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                        key: \"placeholder\",\n                        isDisabled: isDisabled,\n                        isFocused: isFocused,\n                        innerProps: {\n                            id: this.getElementId(\"placeholder\")\n                        }\n                    }), placeholder);\n                }\n                if (isMulti) {\n                    return selectValue.map(function(opt, index) {\n                        var isOptionFocused = opt === focusedValue;\n                        var key = \"\".concat(_this3.getOptionLabel(opt), \"-\").concat(_this3.getOptionValue(opt));\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(MultiValue, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                            components: {\n                                Container: MultiValueContainer,\n                                Label: MultiValueLabel,\n                                Remove: MultiValueRemove\n                            },\n                            isFocused: isOptionFocused,\n                            isDisabled: isDisabled,\n                            key: key,\n                            index: index,\n                            removeProps: {\n                                onClick: function onClick() {\n                                    return _this3.removeValue(opt);\n                                },\n                                onTouchEnd: function onTouchEnd() {\n                                    return _this3.removeValue(opt);\n                                },\n                                onMouseDown: function onMouseDown(e) {\n                                    e.preventDefault();\n                                }\n                            },\n                            data: opt\n                        }), _this3.formatOptionLabel(opt, \"value\"));\n                    });\n                }\n                if (inputValue) {\n                    return null;\n                }\n                var singleValue = selectValue[0];\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(SingleValue, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    data: singleValue,\n                    isDisabled: isDisabled\n                }), this.formatOptionLabel(singleValue, \"value\"));\n            }\n        },\n        {\n            key: \"renderClearIndicator\",\n            value: function renderClearIndicator() {\n                var _this$getComponents3 = this.getComponents(), ClearIndicator = _this$getComponents3.ClearIndicator;\n                var commonProps = this.commonProps;\n                var _this$props10 = this.props, isDisabled = _this$props10.isDisabled, isLoading = _this$props10.isLoading;\n                var isFocused = this.state.isFocused;\n                if (!this.isClearable() || !ClearIndicator || isDisabled || !this.hasValue() || isLoading) {\n                    return null;\n                }\n                var innerProps = {\n                    onMouseDown: this.onClearIndicatorMouseDown,\n                    onTouchEnd: this.onClearIndicatorTouchEnd,\n                    \"aria-hidden\": \"true\"\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(ClearIndicator, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    innerProps: innerProps,\n                    isFocused: isFocused\n                }));\n            }\n        },\n        {\n            key: \"renderLoadingIndicator\",\n            value: function renderLoadingIndicator() {\n                var _this$getComponents4 = this.getComponents(), LoadingIndicator = _this$getComponents4.LoadingIndicator;\n                var commonProps = this.commonProps;\n                var _this$props11 = this.props, isDisabled = _this$props11.isDisabled, isLoading = _this$props11.isLoading;\n                var isFocused = this.state.isFocused;\n                if (!LoadingIndicator || !isLoading) return null;\n                var innerProps = {\n                    \"aria-hidden\": \"true\"\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(LoadingIndicator, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    innerProps: innerProps,\n                    isDisabled: isDisabled,\n                    isFocused: isFocused\n                }));\n            }\n        },\n        {\n            key: \"renderIndicatorSeparator\",\n            value: function renderIndicatorSeparator() {\n                var _this$getComponents5 = this.getComponents(), DropdownIndicator = _this$getComponents5.DropdownIndicator, IndicatorSeparator = _this$getComponents5.IndicatorSeparator;\n                // separator doesn't make sense without the dropdown indicator\n                if (!DropdownIndicator || !IndicatorSeparator) return null;\n                var commonProps = this.commonProps;\n                var isDisabled = this.props.isDisabled;\n                var isFocused = this.state.isFocused;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(IndicatorSeparator, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    isDisabled: isDisabled,\n                    isFocused: isFocused\n                }));\n            }\n        },\n        {\n            key: \"renderDropdownIndicator\",\n            value: function renderDropdownIndicator() {\n                var _this$getComponents6 = this.getComponents(), DropdownIndicator = _this$getComponents6.DropdownIndicator;\n                if (!DropdownIndicator) return null;\n                var commonProps = this.commonProps;\n                var isDisabled = this.props.isDisabled;\n                var isFocused = this.state.isFocused;\n                var innerProps = {\n                    onMouseDown: this.onDropdownIndicatorMouseDown,\n                    onTouchEnd: this.onDropdownIndicatorTouchEnd,\n                    \"aria-hidden\": \"true\"\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(DropdownIndicator, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    innerProps: innerProps,\n                    isDisabled: isDisabled,\n                    isFocused: isFocused\n                }));\n            }\n        },\n        {\n            key: \"renderMenu\",\n            value: function renderMenu() {\n                var _this4 = this;\n                var _this$getComponents7 = this.getComponents(), Group = _this$getComponents7.Group, GroupHeading = _this$getComponents7.GroupHeading, Menu = _this$getComponents7.Menu, MenuList = _this$getComponents7.MenuList, MenuPortal = _this$getComponents7.MenuPortal, LoadingMessage = _this$getComponents7.LoadingMessage, NoOptionsMessage = _this$getComponents7.NoOptionsMessage, Option = _this$getComponents7.Option;\n                var commonProps = this.commonProps;\n                var focusedOption = this.state.focusedOption;\n                var _this$props12 = this.props, captureMenuScroll = _this$props12.captureMenuScroll, inputValue = _this$props12.inputValue, isLoading = _this$props12.isLoading, loadingMessage = _this$props12.loadingMessage, minMenuHeight = _this$props12.minMenuHeight, maxMenuHeight = _this$props12.maxMenuHeight, menuIsOpen = _this$props12.menuIsOpen, menuPlacement = _this$props12.menuPlacement, menuPosition = _this$props12.menuPosition, menuPortalTarget = _this$props12.menuPortalTarget, menuShouldBlockScroll = _this$props12.menuShouldBlockScroll, menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView, noOptionsMessage = _this$props12.noOptionsMessage, onMenuScrollToTop = _this$props12.onMenuScrollToTop, onMenuScrollToBottom = _this$props12.onMenuScrollToBottom;\n                if (!menuIsOpen) return null;\n                // TODO: Internal Option Type here\n                var render = function render(props, id) {\n                    var type = props.type, data = props.data, isDisabled = props.isDisabled, isSelected = props.isSelected, label = props.label, value = props.value;\n                    var isFocused = focusedOption === data;\n                    var onHover = isDisabled ? undefined : function() {\n                        return _this4.onOptionHover(data);\n                    };\n                    var onSelect = isDisabled ? undefined : function() {\n                        return _this4.selectOption(data);\n                    };\n                    var optionId = \"\".concat(_this4.getElementId(\"option\"), \"-\").concat(id);\n                    var innerProps = {\n                        id: optionId,\n                        onClick: onSelect,\n                        onMouseMove: onHover,\n                        onMouseOver: onHover,\n                        tabIndex: -1,\n                        role: \"option\",\n                        \"aria-selected\": _this4.isAppleDevice ? undefined : isSelected // is not supported on Apple devices\n                    };\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(Option, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                        innerProps: innerProps,\n                        data: data,\n                        isDisabled: isDisabled,\n                        isSelected: isSelected,\n                        key: optionId,\n                        label: label,\n                        type: type,\n                        value: value,\n                        isFocused: isFocused,\n                        innerRef: isFocused ? _this4.getFocusedOptionRef : undefined\n                    }), _this4.formatOptionLabel(props.data, \"menu\"));\n                };\n                var menuUI;\n                if (this.hasOptions()) {\n                    menuUI = this.getCategorizedOptions().map(function(item) {\n                        if (item.type === \"group\") {\n                            var _data = item.data, options = item.options, groupIndex = item.index;\n                            var groupId = \"\".concat(_this4.getElementId(\"group\"), \"-\").concat(groupIndex);\n                            var headingId = \"\".concat(groupId, \"-heading\");\n                            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(Group, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                                key: groupId,\n                                data: _data,\n                                options: options,\n                                Heading: GroupHeading,\n                                headingProps: {\n                                    id: headingId,\n                                    data: item.data\n                                },\n                                label: _this4.formatGroupLabel(item.data)\n                            }), item.options.map(function(option) {\n                                return render(option, \"\".concat(groupIndex, \"-\").concat(option.index));\n                            }));\n                        } else if (item.type === \"option\") {\n                            return render(item, \"\".concat(item.index));\n                        }\n                    });\n                } else if (isLoading) {\n                    var message = loadingMessage({\n                        inputValue: inputValue\n                    });\n                    if (message === null) return null;\n                    menuUI = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(LoadingMessage, commonProps, message);\n                } else {\n                    var _message = noOptionsMessage({\n                        inputValue: inputValue\n                    });\n                    if (_message === null) return null;\n                    menuUI = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(NoOptionsMessage, commonProps, _message);\n                }\n                var menuPlacementProps = {\n                    minMenuHeight: minMenuHeight,\n                    maxMenuHeight: maxMenuHeight,\n                    menuPlacement: menuPlacement,\n                    menuPosition: menuPosition,\n                    menuShouldScrollIntoView: menuShouldScrollIntoView\n                };\n                var menuElement = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.M, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, menuPlacementProps), function(_ref4) {\n                    var ref = _ref4.ref, _ref4$placerProps = _ref4.placerProps, placement = _ref4$placerProps.placement, maxHeight = _ref4$placerProps.maxHeight;\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(Menu, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, menuPlacementProps, {\n                        innerRef: ref,\n                        innerProps: {\n                            onMouseDown: _this4.onMenuMouseDown,\n                            onMouseMove: _this4.onMenuMouseMove\n                        },\n                        isLoading: isLoading,\n                        placement: placement\n                    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(ScrollManager, {\n                        captureEnabled: captureMenuScroll,\n                        onTopArrive: onMenuScrollToTop,\n                        onBottomArrive: onMenuScrollToBottom,\n                        lockEnabled: menuShouldBlockScroll\n                    }, function(scrollTargetRef) {\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(MenuList, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                            innerRef: function innerRef(instance) {\n                                _this4.getMenuListRef(instance);\n                                scrollTargetRef(instance);\n                            },\n                            innerProps: {\n                                role: \"listbox\",\n                                \"aria-multiselectable\": commonProps.isMulti,\n                                id: _this4.getElementId(\"listbox\")\n                            },\n                            isLoading: isLoading,\n                            maxHeight: maxHeight,\n                            focusedOption: focusedOption\n                        }), menuUI);\n                    }));\n                });\n                // positioning behaviour is almost identical for portalled and fixed,\n                // so we use the same component. the actual portalling logic is forked\n                // within the component based on `menuPosition`\n                return menuPortalTarget || menuPosition === \"fixed\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(MenuPortal, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    appendTo: menuPortalTarget,\n                    controlElement: this.controlRef,\n                    menuPlacement: menuPlacement,\n                    menuPosition: menuPosition\n                }), menuElement) : menuElement;\n            }\n        },\n        {\n            key: \"renderFormField\",\n            value: function renderFormField() {\n                var _this5 = this;\n                var _this$props13 = this.props, delimiter = _this$props13.delimiter, isDisabled = _this$props13.isDisabled, isMulti = _this$props13.isMulti, name = _this$props13.name, required = _this$props13.required;\n                var selectValue = this.state.selectValue;\n                if (required && !this.hasValue() && !isDisabled) {\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(RequiredInput$1, {\n                        name: name,\n                        onFocus: this.onValueInputFocus\n                    });\n                }\n                if (!name || isDisabled) return;\n                if (isMulti) {\n                    if (delimiter) {\n                        var value = selectValue.map(function(opt) {\n                            return _this5.getOptionValue(opt);\n                        }).join(delimiter);\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(\"input\", {\n                            name: name,\n                            type: \"hidden\",\n                            value: value\n                        });\n                    } else {\n                        var input = selectValue.length > 0 ? selectValue.map(function(opt, i) {\n                            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(\"input\", {\n                                key: \"i-\".concat(i),\n                                name: name,\n                                type: \"hidden\",\n                                value: _this5.getOptionValue(opt)\n                            });\n                        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(\"input\", {\n                            name: name,\n                            type: \"hidden\",\n                            value: \"\"\n                        });\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(\"div\", null, input);\n                    }\n                } else {\n                    var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : \"\";\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(\"input\", {\n                        name: name,\n                        type: \"hidden\",\n                        value: _value\n                    });\n                }\n            }\n        },\n        {\n            key: \"renderLiveRegion\",\n            value: function renderLiveRegion() {\n                var commonProps = this.commonProps;\n                var _this$state6 = this.state, ariaSelection = _this$state6.ariaSelection, focusedOption = _this$state6.focusedOption, focusedValue = _this$state6.focusedValue, isFocused = _this$state6.isFocused, selectValue = _this$state6.selectValue;\n                var focusableOptions = this.getFocusableOptions();\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(LiveRegion$1, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    id: this.getElementId(\"live-region\"),\n                    ariaSelection: ariaSelection,\n                    focusedOption: focusedOption,\n                    focusedValue: focusedValue,\n                    isFocused: isFocused,\n                    selectValue: selectValue,\n                    focusableOptions: focusableOptions,\n                    isAppleDevice: this.isAppleDevice\n                }));\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$getComponents8 = this.getComponents(), Control = _this$getComponents8.Control, IndicatorsContainer = _this$getComponents8.IndicatorsContainer, SelectContainer = _this$getComponents8.SelectContainer, ValueContainer = _this$getComponents8.ValueContainer;\n                var _this$props14 = this.props, className = _this$props14.className, id = _this$props14.id, isDisabled = _this$props14.isDisabled, menuIsOpen = _this$props14.menuIsOpen;\n                var isFocused = this.state.isFocused;\n                var commonProps = this.commonProps = this.getCommonProps();\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(SelectContainer, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    className: className,\n                    innerProps: {\n                        id: id,\n                        onKeyDown: this.onKeyDown\n                    },\n                    isDisabled: isDisabled,\n                    isFocused: isFocused\n                }), this.renderLiveRegion(), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(Control, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    innerRef: this.getControlRef,\n                    innerProps: {\n                        onMouseDown: this.onControlMouseDown,\n                        onTouchEnd: this.onControlTouchEnd\n                    },\n                    isDisabled: isDisabled,\n                    isFocused: isFocused,\n                    menuIsOpen: menuIsOpen\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(ValueContainer, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    isDisabled: isDisabled\n                }), this.renderPlaceholderOrValue(), this.renderInput()), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_7__.createElement(IndicatorsContainer, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, commonProps, {\n                    isDisabled: isDisabled\n                }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());\n            }\n        }\n    ], [\n        {\n            key: \"getDerivedStateFromProps\",\n            value: function getDerivedStateFromProps(props, state) {\n                var prevProps = state.prevProps, clearFocusValueOnUpdate = state.clearFocusValueOnUpdate, inputIsHiddenAfterUpdate = state.inputIsHiddenAfterUpdate, ariaSelection = state.ariaSelection, isFocused = state.isFocused, prevWasFocused = state.prevWasFocused, instancePrefix = state.instancePrefix;\n                var options = props.options, value = props.value, menuIsOpen = props.menuIsOpen, inputValue = props.inputValue, isMulti = props.isMulti;\n                var selectValue = (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.H)(value);\n                var newMenuOptionsState = {};\n                if (prevProps && (value !== prevProps.value || options !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {\n                    var focusableOptions = menuIsOpen ? buildFocusableOptions(props, selectValue) : [];\n                    var focusableOptionsWithIds = menuIsOpen ? buildFocusableOptionsWithIds(buildCategorizedOptions(props, selectValue), \"\".concat(instancePrefix, \"-option\")) : [];\n                    var focusedValue = clearFocusValueOnUpdate ? getNextFocusedValue(state, selectValue) : null;\n                    var focusedOption = getNextFocusedOption(state, focusableOptions);\n                    var focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusedOption);\n                    newMenuOptionsState = {\n                        selectValue: selectValue,\n                        focusedOption: focusedOption,\n                        focusedOptionId: focusedOptionId,\n                        focusableOptionsWithIds: focusableOptionsWithIds,\n                        focusedValue: focusedValue,\n                        clearFocusValueOnUpdate: false\n                    };\n                }\n                // some updates should toggle the state of the input visibility\n                var newInputIsHiddenState = inputIsHiddenAfterUpdate != null && props !== prevProps ? {\n                    inputIsHidden: inputIsHiddenAfterUpdate,\n                    inputIsHiddenAfterUpdate: undefined\n                } : {};\n                var newAriaSelection = ariaSelection;\n                var hasKeptFocus = isFocused && prevWasFocused;\n                if (isFocused && !hasKeptFocus) {\n                    // If `value` or `defaultValue` props are not empty then announce them\n                    // when the Select is initially focused\n                    newAriaSelection = {\n                        value: (0,_index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_11__.D)(isMulti, selectValue, selectValue[0] || null),\n                        options: selectValue,\n                        action: \"initial-input-focus\"\n                    };\n                    hasKeptFocus = !prevWasFocused;\n                }\n                // If the 'initial-input-focus' action has been set already\n                // then reset the ariaSelection to null\n                if ((ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === \"initial-input-focus\") {\n                    newAriaSelection = null;\n                }\n                return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, newMenuOptionsState), newInputIsHiddenState), {}, {\n                    prevProps: props,\n                    ariaSelection: newAriaSelection,\n                    prevWasFocused: hasKeptFocus\n                });\n            }\n        }\n    ]);\n    return Select;\n}(react__WEBPACK_IMPORTED_MODULE_7__.Component);\nSelect.defaultProps = defaultProps;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-select/dist/Select-aab027f3.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-select/dist/index-641ee5b8.esm.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-select/dist/index-641ee5b8.esm.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ isMobileDevice),\n/* harmony export */   B: () => (/* binding */ multiValueAsValue),\n/* harmony export */   C: () => (/* binding */ singleValueAsValue),\n/* harmony export */   D: () => (/* binding */ valueTernary),\n/* harmony export */   E: () => (/* binding */ classNames),\n/* harmony export */   F: () => (/* binding */ defaultComponents),\n/* harmony export */   G: () => (/* binding */ isDocumentElement),\n/* harmony export */   H: () => (/* binding */ cleanValue),\n/* harmony export */   I: () => (/* binding */ scrollIntoView),\n/* harmony export */   J: () => (/* binding */ noop),\n/* harmony export */   K: () => (/* binding */ notNullish),\n/* harmony export */   L: () => (/* binding */ handleInputChange),\n/* harmony export */   M: () => (/* binding */ MenuPlacer),\n/* harmony export */   a: () => (/* binding */ clearIndicatorCSS),\n/* harmony export */   b: () => (/* binding */ containerCSS),\n/* harmony export */   c: () => (/* binding */ components),\n/* harmony export */   d: () => (/* binding */ css$1),\n/* harmony export */   e: () => (/* binding */ dropdownIndicatorCSS),\n/* harmony export */   f: () => (/* binding */ groupHeadingCSS),\n/* harmony export */   g: () => (/* binding */ groupCSS),\n/* harmony export */   h: () => (/* binding */ indicatorSeparatorCSS),\n/* harmony export */   i: () => (/* binding */ indicatorsContainerCSS),\n/* harmony export */   j: () => (/* binding */ inputCSS),\n/* harmony export */   k: () => (/* binding */ loadingMessageCSS),\n/* harmony export */   l: () => (/* binding */ loadingIndicatorCSS),\n/* harmony export */   m: () => (/* binding */ menuCSS),\n/* harmony export */   n: () => (/* binding */ menuListCSS),\n/* harmony export */   o: () => (/* binding */ menuPortalCSS),\n/* harmony export */   p: () => (/* binding */ multiValueCSS),\n/* harmony export */   q: () => (/* binding */ multiValueLabelCSS),\n/* harmony export */   r: () => (/* binding */ removeProps),\n/* harmony export */   s: () => (/* binding */ supportsPassiveEvents),\n/* harmony export */   t: () => (/* binding */ multiValueRemoveCSS),\n/* harmony export */   u: () => (/* binding */ noOptionsMessageCSS),\n/* harmony export */   v: () => (/* binding */ optionCSS),\n/* harmony export */   w: () => (/* binding */ placeholderCSS),\n/* harmony export */   x: () => (/* binding */ css),\n/* harmony export */   y: () => (/* binding */ valueContainerCSS),\n/* harmony export */   z: () => (/* binding */ isTouchCapable)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/react */ \"(ssr)/./node_modules/@emotion/react/dist/emotion-react.development.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/taggedTemplateLiteral */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var use_isomorphic_layout_effect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! use-isomorphic-layout-effect */ \"(ssr)/./node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar _excluded$4 = [\n    \"className\",\n    \"clearValue\",\n    \"cx\",\n    \"getStyles\",\n    \"getClassNames\",\n    \"getValue\",\n    \"hasValue\",\n    \"isMulti\",\n    \"isRtl\",\n    \"options\",\n    \"selectOption\",\n    \"selectProps\",\n    \"setValue\",\n    \"theme\"\n];\n// ==============================\n// NO OP\n// ==============================\nvar noop = function noop() {};\n// ==============================\n// Class Name Prefixer\n// ==============================\n/**\n String representation of component state for styling with class names.\n\n Expects an array of strings OR a string/object pair:\n - className(['comp', 'comp-arg', 'comp-arg-2'])\n   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'\n - className('comp', { some: true, state: false })\n   @returns 'react-select__comp react-select__comp--some'\n*/ function applyPrefixToName(prefix, name) {\n    if (!name) {\n        return prefix;\n    } else if (name[0] === \"-\") {\n        return prefix + name;\n    } else {\n        return prefix + \"__\" + name;\n    }\n}\nfunction classNames(prefix, state) {\n    for(var _len = arguments.length, classNameList = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        classNameList[_key - 2] = arguments[_key];\n    }\n    var arr = [].concat(classNameList);\n    if (state && prefix) {\n        for(var key in state){\n            if (state.hasOwnProperty(key) && state[key]) {\n                arr.push(\"\".concat(applyPrefixToName(prefix, key)));\n            }\n        }\n    }\n    return arr.filter(function(i) {\n        return i;\n    }).map(function(i) {\n        return String(i).trim();\n    }).join(\" \");\n}\n// ==============================\n// Clean Value\n// ==============================\nvar cleanValue = function cleanValue(value) {\n    if (isArray(value)) return value.filter(Boolean);\n    if ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(value) === \"object\" && value !== null) return [\n        value\n    ];\n    return [];\n};\n// ==============================\n// Clean Common Props\n// ==============================\nvar cleanCommonProps = function cleanCommonProps(props) {\n    //className\n    props.className;\n    props.clearValue;\n    props.cx;\n    props.getStyles;\n    props.getClassNames;\n    props.getValue;\n    props.hasValue;\n    props.isMulti;\n    props.isRtl;\n    props.options;\n    props.selectOption;\n    props.selectProps;\n    props.setValue;\n    props.theme;\n    var innerProps = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(props, _excluded$4);\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, innerProps);\n};\n// ==============================\n// Get Style Props\n// ==============================\nvar getStyleProps = function getStyleProps(props, name, classNamesState) {\n    var cx = props.cx, getStyles = props.getStyles, getClassNames = props.getClassNames, className = props.className;\n    return {\n        css: getStyles(name, props),\n        className: cx(classNamesState !== null && classNamesState !== void 0 ? classNamesState : {}, getClassNames(name, props), className)\n    };\n};\n// ==============================\n// Handle Input Change\n// ==============================\nfunction handleInputChange(inputValue, actionMeta, onInputChange) {\n    if (onInputChange) {\n        var _newValue = onInputChange(inputValue, actionMeta);\n        if (typeof _newValue === \"string\") return _newValue;\n    }\n    return inputValue;\n}\n// ==============================\n// Scroll Helpers\n// ==============================\nfunction isDocumentElement(el) {\n    return [\n        document.documentElement,\n        document.body,\n        window\n    ].indexOf(el) > -1;\n}\n// Normalized Scroll Top\n// ------------------------------\nfunction normalizedHeight(el) {\n    if (isDocumentElement(el)) {\n        return window.innerHeight;\n    }\n    return el.clientHeight;\n}\n// Normalized scrollTo & scrollTop\n// ------------------------------\nfunction getScrollTop(el) {\n    if (isDocumentElement(el)) {\n        return window.pageYOffset;\n    }\n    return el.scrollTop;\n}\nfunction scrollTo(el, top) {\n    // with a scroll distance, we perform scroll on the element\n    if (isDocumentElement(el)) {\n        window.scrollTo(0, top);\n        return;\n    }\n    el.scrollTop = top;\n}\n// Get Scroll Parent\n// ------------------------------\nfunction getScrollParent(element) {\n    var style = getComputedStyle(element);\n    var excludeStaticParent = style.position === \"absolute\";\n    var overflowRx = /(auto|scroll)/;\n    if (style.position === \"fixed\") return document.documentElement;\n    for(var parent = element; parent = parent.parentElement;){\n        style = getComputedStyle(parent);\n        if (excludeStaticParent && style.position === \"static\") {\n            continue;\n        }\n        if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {\n            return parent;\n        }\n    }\n    return document.documentElement;\n}\n// Animated Scroll To\n// ------------------------------\n/**\n  @param t: time (elapsed)\n  @param b: initial value\n  @param c: amount of change\n  @param d: duration\n*/ function easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n}\nfunction animatedScrollTo(element, to) {\n    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n    var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;\n    var start = getScrollTop(element);\n    var change = to - start;\n    var increment = 10;\n    var currentTime = 0;\n    function animateScroll() {\n        currentTime += increment;\n        var val = easeOutCubic(currentTime, start, change, duration);\n        scrollTo(element, val);\n        if (currentTime < duration) {\n            window.requestAnimationFrame(animateScroll);\n        } else {\n            callback(element);\n        }\n    }\n    animateScroll();\n}\n// Scroll Into View\n// ------------------------------\nfunction scrollIntoView(menuEl, focusedEl) {\n    var menuRect = menuEl.getBoundingClientRect();\n    var focusedRect = focusedEl.getBoundingClientRect();\n    var overScroll = focusedEl.offsetHeight / 3;\n    if (focusedRect.bottom + overScroll > menuRect.bottom) {\n        scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));\n    } else if (focusedRect.top - overScroll < menuRect.top) {\n        scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));\n    }\n}\n// ==============================\n// Get bounding client object\n// ==============================\n// cannot get keys using array notation with DOMRect\nfunction getBoundingClientObj(element) {\n    var rect = element.getBoundingClientRect();\n    return {\n        bottom: rect.bottom,\n        height: rect.height,\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        width: rect.width\n    };\n}\n// ==============================\n// Touch Capability Detector\n// ==============================\nfunction isTouchCapable() {\n    try {\n        document.createEvent(\"TouchEvent\");\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n// ==============================\n// Mobile Device Detector\n// ==============================\nfunction isMobileDevice() {\n    try {\n        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    } catch (e) {\n        return false;\n    }\n}\n// ==============================\n// Passive Event Detector\n// ==============================\n// https://github.com/rafgraph/detect-it/blob/main/src/index.ts#L19-L36\nvar passiveOptionAccessed = false;\nvar options = {\n    get passive () {\n        return passiveOptionAccessed = true;\n    }\n};\n// check for SSR\nvar w =  false ? 0 : {};\nif (w.addEventListener && w.removeEventListener) {\n    w.addEventListener(\"p\", noop, options);\n    w.removeEventListener(\"p\", noop, false);\n}\nvar supportsPassiveEvents = passiveOptionAccessed;\nfunction notNullish(item) {\n    return item != null;\n}\nfunction isArray(arg) {\n    return Array.isArray(arg);\n}\nfunction valueTernary(isMulti, multiValue, singleValue) {\n    return isMulti ? multiValue : singleValue;\n}\nfunction singleValueAsValue(singleValue) {\n    return singleValue;\n}\nfunction multiValueAsValue(multiValue) {\n    return multiValue;\n}\nvar removeProps = function removeProps(propsObj) {\n    for(var _len2 = arguments.length, properties = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n        properties[_key2 - 1] = arguments[_key2];\n    }\n    var propsMap = Object.entries(propsObj).filter(function(_ref) {\n        var _ref2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_ref, 1), key = _ref2[0];\n        return !properties.includes(key);\n    });\n    return propsMap.reduce(function(newProps, _ref3) {\n        var _ref4 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_ref3, 2), key = _ref4[0], val = _ref4[1];\n        newProps[key] = val;\n        return newProps;\n    }, {});\n};\nvar _excluded$3 = [\n    \"children\",\n    \"innerProps\"\n], _excluded2$1 = [\n    \"children\",\n    \"innerProps\"\n];\nfunction getMenuPlacement(_ref) {\n    var preferredMaxHeight = _ref.maxHeight, menuEl = _ref.menuEl, minHeight = _ref.minHeight, preferredPlacement = _ref.placement, shouldScroll = _ref.shouldScroll, isFixedPosition = _ref.isFixedPosition, controlHeight = _ref.controlHeight;\n    var scrollParent = getScrollParent(menuEl);\n    var defaultState = {\n        placement: \"bottom\",\n        maxHeight: preferredMaxHeight\n    };\n    // something went wrong, return default state\n    if (!menuEl || !menuEl.offsetParent) return defaultState;\n    // we can't trust `scrollParent.scrollHeight` --> it may increase when\n    // the menu is rendered\n    var _scrollParent$getBoun = scrollParent.getBoundingClientRect(), scrollHeight = _scrollParent$getBoun.height;\n    var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(), menuBottom = _menuEl$getBoundingCl.bottom, menuHeight = _menuEl$getBoundingCl.height, menuTop = _menuEl$getBoundingCl.top;\n    var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(), containerTop = _menuEl$offsetParent$.top;\n    var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);\n    var scrollTop = getScrollTop(scrollParent);\n    var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);\n    var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);\n    var viewSpaceAbove = containerTop - marginTop;\n    var viewSpaceBelow = viewHeight - menuTop;\n    var scrollSpaceAbove = viewSpaceAbove + scrollTop;\n    var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;\n    var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;\n    var scrollUp = scrollTop + menuTop - marginTop;\n    var scrollDuration = 160;\n    switch(preferredPlacement){\n        case \"auto\":\n        case \"bottom\":\n            // 1: the menu will fit, do nothing\n            if (viewSpaceBelow >= menuHeight) {\n                return {\n                    placement: \"bottom\",\n                    maxHeight: preferredMaxHeight\n                };\n            }\n            // 2: the menu will fit, if scrolled\n            if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {\n                if (shouldScroll) {\n                    animatedScrollTo(scrollParent, scrollDown, scrollDuration);\n                }\n                return {\n                    placement: \"bottom\",\n                    maxHeight: preferredMaxHeight\n                };\n            }\n            // 3: the menu will fit, if constrained\n            if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {\n                if (shouldScroll) {\n                    animatedScrollTo(scrollParent, scrollDown, scrollDuration);\n                }\n                // we want to provide as much of the menu as possible to the user,\n                // so give them whatever is available below rather than the minHeight.\n                var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;\n                return {\n                    placement: \"bottom\",\n                    maxHeight: constrainedHeight\n                };\n            }\n            // 4. Forked beviour when there isn't enough space below\n            // AUTO: flip the menu, render above\n            if (preferredPlacement === \"auto\" || isFixedPosition) {\n                // may need to be constrained after flipping\n                var _constrainedHeight = preferredMaxHeight;\n                var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;\n                if (spaceAbove >= minHeight) {\n                    _constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight, preferredMaxHeight);\n                }\n                return {\n                    placement: \"top\",\n                    maxHeight: _constrainedHeight\n                };\n            }\n            // BOTTOM: allow browser to increase scrollable area and immediately set scroll\n            if (preferredPlacement === \"bottom\") {\n                if (shouldScroll) {\n                    scrollTo(scrollParent, scrollDown);\n                }\n                return {\n                    placement: \"bottom\",\n                    maxHeight: preferredMaxHeight\n                };\n            }\n            break;\n        case \"top\":\n            // 1: the menu will fit, do nothing\n            if (viewSpaceAbove >= menuHeight) {\n                return {\n                    placement: \"top\",\n                    maxHeight: preferredMaxHeight\n                };\n            }\n            // 2: the menu will fit, if scrolled\n            if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {\n                if (shouldScroll) {\n                    animatedScrollTo(scrollParent, scrollUp, scrollDuration);\n                }\n                return {\n                    placement: \"top\",\n                    maxHeight: preferredMaxHeight\n                };\n            }\n            // 3: the menu will fit, if constrained\n            if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {\n                var _constrainedHeight2 = preferredMaxHeight;\n                // we want to provide as much of the menu as possible to the user,\n                // so give them whatever is available below rather than the minHeight.\n                if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {\n                    _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;\n                }\n                if (shouldScroll) {\n                    animatedScrollTo(scrollParent, scrollUp, scrollDuration);\n                }\n                return {\n                    placement: \"top\",\n                    maxHeight: _constrainedHeight2\n                };\n            }\n            // 4. not enough space, the browser WILL NOT increase scrollable area when\n            // absolutely positioned element rendered above the viewport (only below).\n            // Flip the menu, render below\n            return {\n                placement: \"bottom\",\n                maxHeight: preferredMaxHeight\n            };\n        default:\n            throw new Error('Invalid placement provided \"'.concat(preferredPlacement, '\".'));\n    }\n    return defaultState;\n}\n// Menu Component\n// ------------------------------\nfunction alignToControl(placement) {\n    var placementToCSSProp = {\n        bottom: \"top\",\n        top: \"bottom\"\n    };\n    return placement ? placementToCSSProp[placement] : \"bottom\";\n}\nvar coercePlacement = function coercePlacement(p) {\n    return p === \"auto\" ? \"bottom\" : p;\n};\nvar menuCSS = function menuCSS(_ref2, unstyled) {\n    var _objectSpread2;\n    var placement = _ref2.placement, _ref2$theme = _ref2.theme, borderRadius = _ref2$theme.borderRadius, spacing = _ref2$theme.spacing, colors = _ref2$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((_objectSpread2 = {\n        label: \"menu\"\n    }, (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_objectSpread2, alignToControl(placement), \"100%\"), (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_objectSpread2, \"position\", \"absolute\"), (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_objectSpread2, \"width\", \"100%\"), (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_objectSpread2, \"zIndex\", 1), _objectSpread2), unstyled ? {} : {\n        backgroundColor: colors.neutral0,\n        borderRadius: borderRadius,\n        boxShadow: \"0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)\",\n        marginBottom: spacing.menuGutter,\n        marginTop: spacing.menuGutter\n    });\n};\nvar PortalPlacementContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_7__.createContext)(null);\n// NOTE: internal only\nvar MenuPlacer = function MenuPlacer(props) {\n    var children = props.children, minMenuHeight = props.minMenuHeight, maxMenuHeight = props.maxMenuHeight, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition, menuShouldScrollIntoView = props.menuShouldScrollIntoView, theme = props.theme;\n    var _ref3 = (0,react__WEBPACK_IMPORTED_MODULE_7__.useContext)(PortalPlacementContext) || {}, setPortalPlacement = _ref3.setPortalPlacement;\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)(null);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(maxMenuHeight), _useState2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_useState, 2), maxHeight = _useState2[0], setMaxHeight = _useState2[1];\n    var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(null), _useState4 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_useState3, 2), placement = _useState4[0], setPlacement = _useState4[1];\n    var controlHeight = theme.spacing.controlHeight;\n    (0,use_isomorphic_layout_effect__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(function() {\n        var menuEl = ref.current;\n        if (!menuEl) return;\n        // DO NOT scroll if position is fixed\n        var isFixedPosition = menuPosition === \"fixed\";\n        var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;\n        var state = getMenuPlacement({\n            maxHeight: maxMenuHeight,\n            menuEl: menuEl,\n            minHeight: minMenuHeight,\n            placement: menuPlacement,\n            shouldScroll: shouldScroll,\n            isFixedPosition: isFixedPosition,\n            controlHeight: controlHeight\n        });\n        setMaxHeight(state.maxHeight);\n        setPlacement(state.placement);\n        setPortalPlacement === null || setPortalPlacement === void 0 ? void 0 : setPortalPlacement(state.placement);\n    }, [\n        maxMenuHeight,\n        menuPlacement,\n        menuPosition,\n        menuShouldScrollIntoView,\n        minMenuHeight,\n        setPortalPlacement,\n        controlHeight\n    ]);\n    return children({\n        ref: ref,\n        placerProps: (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props), {}, {\n            placement: placement || coercePlacement(menuPlacement),\n            maxHeight: maxHeight\n        })\n    });\n};\nvar Menu = function Menu(props) {\n    var children = props.children, innerRef = props.innerRef, innerProps = props.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"menu\", {\n        menu: true\n    }), {\n        ref: innerRef\n    }, innerProps), children);\n};\nvar Menu$1 = Menu;\n// ==============================\n// Menu List\n// ==============================\nvar menuListCSS = function menuListCSS(_ref4, unstyled) {\n    var maxHeight = _ref4.maxHeight, baseUnit = _ref4.theme.spacing.baseUnit;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        maxHeight: maxHeight,\n        overflowY: \"auto\",\n        position: \"relative\",\n        // required for offset[Height, Top] > keyboard scroll\n        WebkitOverflowScrolling: \"touch\"\n    }, unstyled ? {} : {\n        paddingBottom: baseUnit,\n        paddingTop: baseUnit\n    });\n};\nvar MenuList = function MenuList(props) {\n    var children = props.children, innerProps = props.innerProps, innerRef = props.innerRef, isMulti = props.isMulti;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"menuList\", {\n        \"menu-list\": true,\n        \"menu-list--is-multi\": isMulti\n    }), {\n        ref: innerRef\n    }, innerProps), children);\n};\n// ==============================\n// Menu Notices\n// ==============================\nvar noticeCSS = function noticeCSS(_ref5, unstyled) {\n    var _ref5$theme = _ref5.theme, baseUnit = _ref5$theme.spacing.baseUnit, colors = _ref5$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        textAlign: \"center\"\n    }, unstyled ? {} : {\n        color: colors.neutral40,\n        padding: \"\".concat(baseUnit * 2, \"px \").concat(baseUnit * 3, \"px\")\n    });\n};\nvar noOptionsMessageCSS = noticeCSS;\nvar loadingMessageCSS = noticeCSS;\nvar NoOptionsMessage = function NoOptionsMessage(_ref6) {\n    var _ref6$children = _ref6.children, children = _ref6$children === void 0 ? \"No options\" : _ref6$children, innerProps = _ref6.innerProps, restProps = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_ref6, _excluded$3);\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, restProps), {}, {\n        children: children,\n        innerProps: innerProps\n    }), \"noOptionsMessage\", {\n        \"menu-notice\": true,\n        \"menu-notice--no-options\": true\n    }), innerProps), children);\n};\nvar LoadingMessage = function LoadingMessage(_ref7) {\n    var _ref7$children = _ref7.children, children = _ref7$children === void 0 ? \"Loading...\" : _ref7$children, innerProps = _ref7.innerProps, restProps = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_ref7, _excluded2$1);\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, restProps), {}, {\n        children: children,\n        innerProps: innerProps\n    }), \"loadingMessage\", {\n        \"menu-notice\": true,\n        \"menu-notice--loading\": true\n    }), innerProps), children);\n};\n// ==============================\n// Menu Portal\n// ==============================\nvar menuPortalCSS = function menuPortalCSS(_ref8) {\n    var rect = _ref8.rect, offset = _ref8.offset, position = _ref8.position;\n    return {\n        left: rect.left,\n        position: position,\n        top: offset,\n        width: rect.width,\n        zIndex: 1\n    };\n};\nvar MenuPortal = function MenuPortal(props) {\n    var appendTo = props.appendTo, children = props.children, controlElement = props.controlElement, innerProps = props.innerProps, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition;\n    var menuPortalRef = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)(null);\n    var cleanupRef = (0,react__WEBPACK_IMPORTED_MODULE_7__.useRef)(null);\n    var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(coercePlacement(menuPlacement)), _useState6 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_useState5, 2), placement = _useState6[0], setPortalPlacement = _useState6[1];\n    var portalPlacementContext = (0,react__WEBPACK_IMPORTED_MODULE_7__.useMemo)(function() {\n        return {\n            setPortalPlacement: setPortalPlacement\n        };\n    }, []);\n    var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(null), _useState8 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_useState7, 2), computedPosition = _useState8[0], setComputedPosition = _useState8[1];\n    var updateComputedPosition = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function() {\n        if (!controlElement) return;\n        var rect = getBoundingClientObj(controlElement);\n        var scrollDistance = menuPosition === \"fixed\" ? 0 : window.pageYOffset;\n        var offset = rect[placement] + scrollDistance;\n        if (offset !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {\n            setComputedPosition({\n                offset: offset,\n                rect: rect\n            });\n        }\n    }, [\n        controlElement,\n        menuPosition,\n        placement,\n        computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset,\n        computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left,\n        computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width\n    ]);\n    (0,use_isomorphic_layout_effect__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(function() {\n        updateComputedPosition();\n    }, [\n        updateComputedPosition\n    ]);\n    var runAutoUpdate = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function() {\n        if (typeof cleanupRef.current === \"function\") {\n            cleanupRef.current();\n            cleanupRef.current = null;\n        }\n        if (controlElement && menuPortalRef.current) {\n            cleanupRef.current = (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_11__.autoUpdate)(controlElement, menuPortalRef.current, updateComputedPosition, {\n                elementResize: \"ResizeObserver\" in window\n            });\n        }\n    }, [\n        controlElement,\n        updateComputedPosition\n    ]);\n    (0,use_isomorphic_layout_effect__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(function() {\n        runAutoUpdate();\n    }, [\n        runAutoUpdate\n    ]);\n    var setMenuPortalElement = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(function(menuPortalElement) {\n        menuPortalRef.current = menuPortalElement;\n        runAutoUpdate();\n    }, [\n        runAutoUpdate\n    ]);\n    // bail early if required elements aren't present\n    if (!appendTo && menuPosition !== \"fixed\" || !computedPosition) return null;\n    // same wrapper element whether fixed or portalled\n    var menuWrapper = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        ref: setMenuPortalElement\n    }, getStyleProps((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props), {}, {\n        offset: computedPosition.offset,\n        position: menuPosition,\n        rect: computedPosition.rect\n    }), \"menuPortal\", {\n        \"menu-portal\": true\n    }), innerProps), children);\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(PortalPlacementContext.Provider, {\n        value: portalPlacementContext\n    }, appendTo ? /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_8__.createPortal)(menuWrapper, appendTo) : menuWrapper);\n};\n// ==============================\n// Root Container\n// ==============================\nvar containerCSS = function containerCSS(_ref) {\n    var isDisabled = _ref.isDisabled, isRtl = _ref.isRtl;\n    return {\n        label: \"container\",\n        direction: isRtl ? \"rtl\" : undefined,\n        pointerEvents: isDisabled ? \"none\" : undefined,\n        // cancel mouse events when disabled\n        position: \"relative\"\n    };\n};\nvar SelectContainer = function SelectContainer(props) {\n    var children = props.children, innerProps = props.innerProps, isDisabled = props.isDisabled, isRtl = props.isRtl;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"container\", {\n        \"--is-disabled\": isDisabled,\n        \"--is-rtl\": isRtl\n    }), innerProps), children);\n};\n// ==============================\n// Value Container\n// ==============================\nvar valueContainerCSS = function valueContainerCSS(_ref2, unstyled) {\n    var spacing = _ref2.theme.spacing, isMulti = _ref2.isMulti, hasValue = _ref2.hasValue, controlShouldRenderValue = _ref2.selectProps.controlShouldRenderValue;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        alignItems: \"center\",\n        display: isMulti && hasValue && controlShouldRenderValue ? \"flex\" : \"grid\",\n        flex: 1,\n        flexWrap: \"wrap\",\n        WebkitOverflowScrolling: \"touch\",\n        position: \"relative\",\n        overflow: \"hidden\"\n    }, unstyled ? {} : {\n        padding: \"\".concat(spacing.baseUnit / 2, \"px \").concat(spacing.baseUnit * 2, \"px\")\n    });\n};\nvar ValueContainer = function ValueContainer(props) {\n    var children = props.children, innerProps = props.innerProps, isMulti = props.isMulti, hasValue = props.hasValue;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"valueContainer\", {\n        \"value-container\": true,\n        \"value-container--is-multi\": isMulti,\n        \"value-container--has-value\": hasValue\n    }), innerProps), children);\n};\n// ==============================\n// Indicator Container\n// ==============================\nvar indicatorsContainerCSS = function indicatorsContainerCSS() {\n    return {\n        alignItems: \"center\",\n        alignSelf: \"stretch\",\n        display: \"flex\",\n        flexShrink: 0\n    };\n};\nvar IndicatorsContainer = function IndicatorsContainer(props) {\n    var children = props.children, innerProps = props.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"indicatorsContainer\", {\n        indicators: true\n    }), innerProps), children);\n};\nvar _templateObject;\nvar _excluded$2 = [\n    \"size\"\n], _excluded2 = [\n    \"innerProps\",\n    \"isRtl\",\n    \"size\"\n];\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n    return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\n// ==============================\n// Dropdown & Clear Icons\n// ==============================\nvar _ref2 =  false ? 0 : {\n    name: \"tj5bde-Svg\",\n    styles: \"display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;label:Svg;\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar Svg = function Svg(_ref) {\n    var size = _ref.size, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_ref, _excluded$2);\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"svg\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        height: size,\n        width: size,\n        viewBox: \"0 0 20 20\",\n        \"aria-hidden\": \"true\",\n        focusable: \"false\",\n        css: _ref2\n    }, props));\n};\nvar CrossIcon = function CrossIcon(props) {\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(Svg, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        size: 20\n    }, props), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"path\", {\n        d: \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\"\n    }));\n};\nvar DownChevron = function DownChevron(props) {\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(Svg, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        size: 20\n    }, props), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"path\", {\n        d: \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"\n    }));\n};\n// ==============================\n// Dropdown & Clear Buttons\n// ==============================\nvar baseCSS = function baseCSS(_ref3, unstyled) {\n    var isFocused = _ref3.isFocused, _ref3$theme = _ref3.theme, baseUnit = _ref3$theme.spacing.baseUnit, colors = _ref3$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"indicatorContainer\",\n        display: \"flex\",\n        transition: \"color 150ms\"\n    }, unstyled ? {} : {\n        color: isFocused ? colors.neutral60 : colors.neutral20,\n        padding: baseUnit * 2,\n        \":hover\": {\n            color: isFocused ? colors.neutral80 : colors.neutral40\n        }\n    });\n};\nvar dropdownIndicatorCSS = baseCSS;\nvar DropdownIndicator = function DropdownIndicator(props) {\n    var children = props.children, innerProps = props.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"dropdownIndicator\", {\n        indicator: true,\n        \"dropdown-indicator\": true\n    }), innerProps), children || (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(DownChevron, null));\n};\nvar clearIndicatorCSS = baseCSS;\nvar ClearIndicator = function ClearIndicator(props) {\n    var children = props.children, innerProps = props.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"clearIndicator\", {\n        indicator: true,\n        \"clear-indicator\": true\n    }), innerProps), children || (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(CrossIcon, null));\n};\n// ==============================\n// Separator\n// ==============================\nvar indicatorSeparatorCSS = function indicatorSeparatorCSS(_ref4, unstyled) {\n    var isDisabled = _ref4.isDisabled, _ref4$theme = _ref4.theme, baseUnit = _ref4$theme.spacing.baseUnit, colors = _ref4$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"indicatorSeparator\",\n        alignSelf: \"stretch\",\n        width: 1\n    }, unstyled ? {} : {\n        backgroundColor: isDisabled ? colors.neutral10 : colors.neutral20,\n        marginBottom: baseUnit * 2,\n        marginTop: baseUnit * 2\n    });\n};\nvar IndicatorSeparator = function IndicatorSeparator(props) {\n    var innerProps = props.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, innerProps, getStyleProps(props, \"indicatorSeparator\", {\n        \"indicator-separator\": true\n    })));\n};\n// ==============================\n// Loading\n// ==============================\nvar loadingDotAnimations = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.keyframes)(_templateObject || (_templateObject = (0,_babel_runtime_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_5__[\"default\"])([\n    \"\\n  0%, 80%, 100% { opacity: 0; }\\n  40% { opacity: 1; }\\n\"\n])));\nvar loadingIndicatorCSS = function loadingIndicatorCSS(_ref5, unstyled) {\n    var isFocused = _ref5.isFocused, size = _ref5.size, _ref5$theme = _ref5.theme, colors = _ref5$theme.colors, baseUnit = _ref5$theme.spacing.baseUnit;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"loadingIndicator\",\n        display: \"flex\",\n        transition: \"color 150ms\",\n        alignSelf: \"center\",\n        fontSize: size,\n        lineHeight: 1,\n        marginRight: size,\n        textAlign: \"center\",\n        verticalAlign: \"middle\"\n    }, unstyled ? {} : {\n        color: isFocused ? colors.neutral60 : colors.neutral20,\n        padding: baseUnit * 2\n    });\n};\nvar LoadingDot = function LoadingDot(_ref6) {\n    var delay = _ref6.delay, offset = _ref6.offset;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n        css: /*#__PURE__*/ (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.css)({\n            animation: \"\".concat(loadingDotAnimations, \" 1s ease-in-out \").concat(delay, \"ms infinite;\"),\n            backgroundColor: \"currentColor\",\n            borderRadius: \"1em\",\n            display: \"inline-block\",\n            marginLeft: offset ? \"1em\" : undefined,\n            height: \"1em\",\n            verticalAlign: \"top\",\n            width: \"1em\"\n        },  false ? 0 : \";label:LoadingDot;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGljYXRvcnMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1RSSIsImZpbGUiOiJpbmRpY2F0b3JzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgSlNYLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3gsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuaW1wb3J0IHtcbiAgQ29tbW9uUHJvcHNBbmRDbGFzc05hbWUsXG4gIENTU09iamVjdFdpdGhMYWJlbCxcbiAgR3JvdXBCYXNlLFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBnZXRTdHlsZVByb3BzIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERyb3Bkb3duICYgQ2xlYXIgSWNvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5jb25zdCBTdmcgPSAoe1xuICBzaXplLFxuICAuLi5wcm9wc1xufTogSlNYLkludHJpbnNpY0VsZW1lbnRzWydzdmcnXSAmIHsgc2l6ZTogbnVtYmVyIH0pID0+IChcbiAgPHN2Z1xuICAgIGhlaWdodD17c2l6ZX1cbiAgICB3aWR0aD17c2l6ZX1cbiAgICB2aWV3Qm94PVwiMCAwIDIwIDIwXCJcbiAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgIGZvY3VzYWJsZT1cImZhbHNlXCJcbiAgICBjc3M9e3tcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgc3Ryb2tlOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHN0cm9rZVdpZHRoOiAwLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IHR5cGUgQ3Jvc3NJY29uUHJvcHMgPSBKU1guSW50cmluc2ljRWxlbWVudHNbJ3N2ZyddICYgeyBzaXplPzogbnVtYmVyIH07XG5leHBvcnQgY29uc3QgQ3Jvc3NJY29uID0gKHByb3BzOiBDcm9zc0ljb25Qcm9wcykgPT4gKFxuICA8U3ZnIHNpemU9ezIwfSB7Li4ucHJvcHN9PlxuICAgIDxwYXRoIGQ9XCJNMTQuMzQ4IDE0Ljg0OWMtMC40NjkgMC40NjktMS4yMjkgMC40NjktMS42OTcgMGwtMi42NTEtMy4wMzAtMi42NTEgMy4wMjljLTAuNDY5IDAuNDY5LTEuMjI5IDAuNDY5LTEuNjk3IDAtMC40NjktMC40NjktMC40NjktMS4yMjkgMC0xLjY5N2wyLjc1OC0zLjE1LTIuNzU5LTMuMTUyYy0wLjQ2OS0wLjQ2OS0wLjQ2OS0xLjIyOCAwLTEuNjk3czEuMjI4LTAuNDY5IDEuNjk3IDBsMi42NTIgMy4wMzEgMi42NTEtMy4wMzFjMC40NjktMC40NjkgMS4yMjgtMC40NjkgMS42OTcgMHMwLjQ2OSAxLjIyOSAwIDEuNjk3bC0yLjc1OCAzLjE1MiAyLjc1OCAzLjE1YzAuNDY5IDAuNDY5IDAuNDY5IDEuMjI5IDAgMS42OTh6XCIgLz5cbiAgPC9Tdmc+XG4pO1xuZXhwb3J0IHR5cGUgRG93bkNoZXZyb25Qcm9wcyA9IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snc3ZnJ10gJiB7IHNpemU/OiBudW1iZXIgfTtcbmV4cG9ydCBjb25zdCBEb3duQ2hldnJvbiA9IChwcm9wczogRG93bkNoZXZyb25Qcm9wcykgPT4gKFxuICA8U3ZnIHNpemU9ezIwfSB7Li4ucHJvcHN9PlxuICAgIDxwYXRoIGQ9XCJNNC41MTYgNy41NDhjMC40MzYtMC40NDYgMS4wNDMtMC40ODEgMS41NzYgMGwzLjkwOCAzLjc0NyAzLjkwOC0zLjc0N2MwLjUzMy0wLjQ4MSAxLjE0MS0wLjQ0NiAxLjU3NCAwIDAuNDM2IDAuNDQ1IDAuNDA4IDEuMTk3IDAgMS42MTUtMC40MDYgMC40MTgtNC42OTUgNC41MDItNC42OTUgNC41MDItMC4yMTcgMC4yMjMtMC41MDIgMC4zMzUtMC43ODcgMC4zMzVzLTAuNTctMC4xMTItMC43ODktMC4zMzVjMCAwLTQuMjg3LTQuMDg0LTQuNjk1LTQuNTAycy0wLjQzNi0xLjE3IDAtMS42MTV6XCIgLz5cbiAgPC9Tdmc+XG4pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERyb3Bkb3duICYgQ2xlYXIgQnV0dG9uc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJvcGRvd25JbmRpY2F0b3JQcm9wczxcbiAgT3B0aW9uID0gdW5rbm93bixcbiAgSXNNdWx0aSBleHRlbmRzIGJvb2xlYW4gPSBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+ID0gR3JvdXBCYXNlPE9wdGlvbj5cbj4gZXh0ZW5kcyBDb21tb25Qcm9wc0FuZENsYXNzTmFtZTxPcHRpb24sIElzTXVsdGksIEdyb3VwPiB7XG4gIC8qKiBUaGUgY2hpbGRyZW4gdG8gYmUgcmVuZGVyZWQgaW5zaWRlIHRoZSBpbmRpY2F0b3IuICovXG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICAvKiogUHJvcHMgdGhhdCB3aWxsIGJlIHBhc3NlZCBvbiB0byB0aGUgY2hpbGRyZW4uICovXG4gIGlubmVyUHJvcHM6IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snZGl2J107XG4gIC8qKiBUaGUgZm9jdXNlZCBzdGF0ZSBvZiB0aGUgc2VsZWN0LiAqL1xuICBpc0ZvY3VzZWQ6IGJvb2xlYW47XG4gIGlzRGlzYWJsZWQ6IGJvb2xlYW47XG59XG5cbmNvbnN0IGJhc2VDU1MgPSA8XG4gIE9wdGlvbixcbiAgSXNNdWx0aSBleHRlbmRzIGJvb2xlYW4sXG4gIEdyb3VwIGV4dGVuZHMgR3JvdXBCYXNlPE9wdGlvbj5cbj4oXG4gIHtcbiAgICBpc0ZvY3VzZWQsXG4gICAgdGhlbWU6IHtcbiAgICAgIHNwYWNpbmc6IHsgYmFzZVVuaXQgfSxcbiAgICAgIGNvbG9ycyxcbiAgICB9LFxuICB9OlxuICAgIHwgRHJvcGRvd25JbmRpY2F0b3JQcm9wczxPcHRpb24sIElzTXVsdGksIEdyb3VwPlxuICAgIHwgQ2xlYXJJbmRpY2F0b3JQcm9wczxPcHRpb24sIElzTXVsdGksIEdyb3VwPixcbiAgdW5zdHlsZWQ6IGJvb2xlYW5cbik6IENTU09iamVjdFdpdGhMYWJlbCA9PiAoe1xuICBsYWJlbDogJ2luZGljYXRvckNvbnRhaW5lcicsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgdHJhbnNpdGlvbjogJ2NvbG9yIDE1MG1zJyxcbiAgLi4uKHVuc3R5bGVkXG4gICAgPyB7fVxuICAgIDoge1xuICAgICAgICBjb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLm5ldXRyYWw2MCA6IGNvbG9ycy5uZXV0cmFsMjAsXG4gICAgICAgIHBhZGRpbmc6IGJhc2VVbml0ICogMixcbiAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICBjb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLm5ldXRyYWw4MCA6IGNvbG9ycy5uZXV0cmFsNDAsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbn0pO1xuXG5leHBvcnQgY29uc3QgZHJvcGRvd25JbmRpY2F0b3JDU1MgPSBiYXNlQ1NTO1xuZXhwb3J0IGNvbnN0IERyb3Bkb3duSW5kaWNhdG9yID0gPFxuICBPcHRpb24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+XG4+KFxuICBwcm9wczogRHJvcGRvd25JbmRpY2F0b3JQcm9wczxPcHRpb24sIElzTXVsdGksIEdyb3VwPlxuKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIGlubmVyUHJvcHMgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHsuLi5nZXRTdHlsZVByb3BzKHByb3BzLCAnZHJvcGRvd25JbmRpY2F0b3InLCB7XG4gICAgICAgIGluZGljYXRvcjogdHJ1ZSxcbiAgICAgICAgJ2Ryb3Bkb3duLWluZGljYXRvcic6IHRydWUsXG4gICAgICB9KX1cbiAgICAgIHsuLi5pbm5lclByb3BzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbiB8fCA8RG93bkNoZXZyb24gLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENsZWFySW5kaWNhdG9yUHJvcHM8XG4gIE9wdGlvbiA9IHVua25vd24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuID0gYm9vbGVhbixcbiAgR3JvdXAgZXh0ZW5kcyBHcm91cEJhc2U8T3B0aW9uPiA9IEdyb3VwQmFzZTxPcHRpb24+XG4+IGV4dGVuZHMgQ29tbW9uUHJvcHNBbmRDbGFzc05hbWU8T3B0aW9uLCBJc011bHRpLCBHcm91cD4ge1xuICAvKiogVGhlIGNoaWxkcmVuIHRvIGJlIHJlbmRlcmVkIGluc2lkZSB0aGUgaW5kaWNhdG9yLiAqL1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgLyoqIFByb3BzIHRoYXQgd2lsbCBiZSBwYXNzZWQgb24gdG8gdGhlIGNoaWxkcmVuLiAqL1xuICBpbm5lclByb3BzOiBKU1guSW50cmluc2ljRWxlbWVudHNbJ2RpdiddO1xuICAvKiogVGhlIGZvY3VzZWQgc3RhdGUgb2YgdGhlIHNlbGVjdC4gKi9cbiAgaXNGb2N1c2VkOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgY2xlYXJJbmRpY2F0b3JDU1MgPSBiYXNlQ1NTO1xuZXhwb3J0IGNvbnN0IENsZWFySW5kaWNhdG9yID0gPFxuICBPcHRpb24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+XG4+KFxuICBwcm9wczogQ2xlYXJJbmRpY2F0b3JQcm9wczxPcHRpb24sIElzTXVsdGksIEdyb3VwPlxuKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIGlubmVyUHJvcHMgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHsuLi5nZXRTdHlsZVByb3BzKHByb3BzLCAnY2xlYXJJbmRpY2F0b3InLCB7XG4gICAgICAgIGluZGljYXRvcjogdHJ1ZSxcbiAgICAgICAgJ2NsZWFyLWluZGljYXRvcic6IHRydWUsXG4gICAgICB9KX1cbiAgICAgIHsuLi5pbm5lclByb3BzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbiB8fCA8Q3Jvc3NJY29uIC8+fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBTZXBhcmF0b3Jcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGljYXRvclNlcGFyYXRvclByb3BzPFxuICBPcHRpb24gPSB1bmtub3duLFxuICBJc011bHRpIGV4dGVuZHMgYm9vbGVhbiA9IGJvb2xlYW4sXG4gIEdyb3VwIGV4dGVuZHMgR3JvdXBCYXNlPE9wdGlvbj4gPSBHcm91cEJhc2U8T3B0aW9uPlxuPiBleHRlbmRzIENvbW1vblByb3BzQW5kQ2xhc3NOYW1lPE9wdGlvbiwgSXNNdWx0aSwgR3JvdXA+IHtcbiAgaXNEaXNhYmxlZDogYm9vbGVhbjtcbiAgaXNGb2N1c2VkOiBib29sZWFuO1xuICBpbm5lclByb3BzPzogSlNYLkludHJpbnNpY0VsZW1lbnRzWydzcGFuJ107XG59XG5cbmV4cG9ydCBjb25zdCBpbmRpY2F0b3JTZXBhcmF0b3JDU1MgPSA8XG4gIE9wdGlvbixcbiAgSXNNdWx0aSBleHRlbmRzIGJvb2xlYW4sXG4gIEdyb3VwIGV4dGVuZHMgR3JvdXBCYXNlPE9wdGlvbj5cbj4oXG4gIHtcbiAgICBpc0Rpc2FibGVkLFxuICAgIHRoZW1lOiB7XG4gICAgICBzcGFjaW5nOiB7IGJhc2VVbml0IH0sXG4gICAgICBjb2xvcnMsXG4gICAgfSxcbiAgfTogSW5kaWNhdG9yU2VwYXJhdG9yUHJvcHM8T3B0aW9uLCBJc011bHRpLCBHcm91cD4sXG4gIHVuc3R5bGVkOiBib29sZWFuXG4pOiBDU1NPYmplY3RXaXRoTGFiZWwgPT4gKHtcbiAgbGFiZWw6ICdpbmRpY2F0b3JTZXBhcmF0b3InLFxuICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgd2lkdGg6IDEsXG4gIC4uLih1bnN0eWxlZFxuICAgID8ge31cbiAgICA6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwxMCA6IGNvbG9ycy5uZXV0cmFsMjAsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogYmFzZVVuaXQgKiAyLFxuICAgICAgICBtYXJnaW5Ub3A6IGJhc2VVbml0ICogMixcbiAgICAgIH0pLFxufSk7XG5cbmV4cG9ydCBjb25zdCBJbmRpY2F0b3JTZXBhcmF0b3IgPSA8XG4gIE9wdGlvbixcbiAgSXNNdWx0aSBleHRlbmRzIGJvb2xlYW4sXG4gIEdyb3VwIGV4dGVuZHMgR3JvdXBCYXNlPE9wdGlvbj5cbj4oXG4gIHByb3BzOiBJbmRpY2F0b3JTZXBhcmF0b3JQcm9wczxPcHRpb24sIElzTXVsdGksIEdyb3VwPlxuKSA9PiB7XG4gIGNvbnN0IHsgaW5uZXJQcm9wcyB9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPHNwYW5cbiAgICAgIHsuLi5pbm5lclByb3BzfVxuICAgICAgey4uLmdldFN0eWxlUHJvcHMocHJvcHMsICdpbmRpY2F0b3JTZXBhcmF0b3InLCB7XG4gICAgICAgICdpbmRpY2F0b3Itc2VwYXJhdG9yJzogdHJ1ZSxcbiAgICAgIH0pfVxuICAgIC8+XG4gICk7XG59O1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExvYWRpbmdcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5jb25zdCBsb2FkaW5nRG90QW5pbWF0aW9ucyA9IGtleWZyYW1lc2BcbiAgMCUsIDgwJSwgMTAwJSB7IG9wYWNpdHk6IDA7IH1cbiAgNDAlIHsgb3BhY2l0eTogMTsgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGxvYWRpbmdJbmRpY2F0b3JDU1MgPSA8XG4gIE9wdGlvbixcbiAgSXNNdWx0aSBleHRlbmRzIGJvb2xlYW4sXG4gIEdyb3VwIGV4dGVuZHMgR3JvdXBCYXNlPE9wdGlvbj5cbj4oXG4gIHtcbiAgICBpc0ZvY3VzZWQsXG4gICAgc2l6ZSxcbiAgICB0aGVtZToge1xuICAgICAgY29sb3JzLFxuICAgICAgc3BhY2luZzogeyBiYXNlVW5pdCB9LFxuICAgIH0sXG4gIH06IExvYWRpbmdJbmRpY2F0b3JQcm9wczxPcHRpb24sIElzTXVsdGksIEdyb3VwPixcbiAgdW5zdHlsZWQ6IGJvb2xlYW5cbik6IENTU09iamVjdFdpdGhMYWJlbCA9PiAoe1xuICBsYWJlbDogJ2xvYWRpbmdJbmRpY2F0b3InLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIHRyYW5zaXRpb246ICdjb2xvciAxNTBtcycsXG4gIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gIGZvbnRTaXplOiBzaXplLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBtYXJnaW5SaWdodDogc2l6ZSxcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIC4uLih1bnN0eWxlZFxuICAgID8ge31cbiAgICA6IHtcbiAgICAgICAgY29sb3I6IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsNjAgOiBjb2xvcnMubmV1dHJhbDIwLFxuICAgICAgICBwYWRkaW5nOiBiYXNlVW5pdCAqIDIsXG4gICAgICB9KSxcbn0pO1xuXG5pbnRlcmZhY2UgTG9hZGluZ0RvdFByb3BzIHtcbiAgZGVsYXk6IG51bWJlcjtcbiAgb2Zmc2V0OiBib29sZWFuO1xufVxuY29uc3QgTG9hZGluZ0RvdCA9ICh7IGRlbGF5LCBvZmZzZXQgfTogTG9hZGluZ0RvdFByb3BzKSA9PiAoXG4gIDxzcGFuXG4gICAgY3NzPXt7XG4gICAgICBhbmltYXRpb246IGAke2xvYWRpbmdEb3RBbmltYXRpb25zfSAxcyBlYXNlLWluLW91dCAke2RlbGF5fW1zIGluZmluaXRlO2AsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMWVtJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgbWFyZ2luTGVmdDogb2Zmc2V0ID8gJzFlbScgOiB1bmRlZmluZWQsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgfX1cbiAgLz5cbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZGluZ0luZGljYXRvclByb3BzPFxuICBPcHRpb24gPSB1bmtub3duLFxuICBJc011bHRpIGV4dGVuZHMgYm9vbGVhbiA9IGJvb2xlYW4sXG4gIEdyb3VwIGV4dGVuZHMgR3JvdXBCYXNlPE9wdGlvbj4gPSBHcm91cEJhc2U8T3B0aW9uPlxuPiBleHRlbmRzIENvbW1vblByb3BzQW5kQ2xhc3NOYW1lPE9wdGlvbiwgSXNNdWx0aSwgR3JvdXA+IHtcbiAgLyoqIFByb3BzIHRoYXQgd2lsbCBiZSBwYXNzZWQgb24gdG8gdGhlIGNoaWxkcmVuLiAqL1xuICBpbm5lclByb3BzOiBKU1guSW50cmluc2ljRWxlbWVudHNbJ2RpdiddO1xuICAvKiogVGhlIGZvY3VzZWQgc3RhdGUgb2YgdGhlIHNlbGVjdC4gKi9cbiAgaXNGb2N1c2VkOiBib29sZWFuO1xuICBpc0Rpc2FibGVkOiBib29sZWFuO1xuICAvKiogU2V0IHNpemUgb2YgdGhlIGNvbnRhaW5lci4gKi9cbiAgc2l6ZTogbnVtYmVyO1xufVxuZXhwb3J0IGNvbnN0IExvYWRpbmdJbmRpY2F0b3IgPSA8XG4gIE9wdGlvbixcbiAgSXNNdWx0aSBleHRlbmRzIGJvb2xlYW4sXG4gIEdyb3VwIGV4dGVuZHMgR3JvdXBCYXNlPE9wdGlvbj5cbj4oe1xuICBpbm5lclByb3BzLFxuICBpc1J0bCxcbiAgc2l6ZSA9IDQsXG4gIC4uLnJlc3RQcm9wc1xufTogTG9hZGluZ0luZGljYXRvclByb3BzPE9wdGlvbiwgSXNNdWx0aSwgR3JvdXA+KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgey4uLmdldFN0eWxlUHJvcHMoXG4gICAgICAgIHsgLi4ucmVzdFByb3BzLCBpbm5lclByb3BzLCBpc1J0bCwgc2l6ZSB9LFxuICAgICAgICAnbG9hZGluZ0luZGljYXRvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBpbmRpY2F0b3I6IHRydWUsXG4gICAgICAgICAgJ2xvYWRpbmctaW5kaWNhdG9yJzogdHJ1ZSxcbiAgICAgICAgfVxuICAgICAgKX1cbiAgICAgIHsuLi5pbm5lclByb3BzfVxuICAgID5cbiAgICAgIDxMb2FkaW5nRG90IGRlbGF5PXswfSBvZmZzZXQ9e2lzUnRsfSAvPlxuICAgICAgPExvYWRpbmdEb3QgZGVsYXk9ezE2MH0gb2Zmc2V0IC8+XG4gICAgICA8TG9hZGluZ0RvdCBkZWxheT17MzIwfSBvZmZzZXQ9eyFpc1J0bH0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0= */\")\n    });\n};\nvar LoadingIndicator = function LoadingIndicator(_ref7) {\n    var innerProps = _ref7.innerProps, isRtl = _ref7.isRtl, _ref7$size = _ref7.size, size = _ref7$size === void 0 ? 4 : _ref7$size, restProps = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_ref7, _excluded2);\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, restProps), {}, {\n        innerProps: innerProps,\n        isRtl: isRtl,\n        size: size\n    }), \"loadingIndicator\", {\n        indicator: true,\n        \"loading-indicator\": true\n    }), innerProps), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(LoadingDot, {\n        delay: 0,\n        offset: isRtl\n    }), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(LoadingDot, {\n        delay: 160,\n        offset: true\n    }), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(LoadingDot, {\n        delay: 320,\n        offset: !isRtl\n    }));\n};\nvar css$1 = function css(_ref, unstyled) {\n    var isDisabled = _ref.isDisabled, isFocused = _ref.isFocused, _ref$theme = _ref.theme, colors = _ref$theme.colors, borderRadius = _ref$theme.borderRadius, spacing = _ref$theme.spacing;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"control\",\n        alignItems: \"center\",\n        cursor: \"default\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        minHeight: spacing.controlHeight,\n        outline: \"0 !important\",\n        position: \"relative\",\n        transition: \"all 100ms\"\n    }, unstyled ? {} : {\n        backgroundColor: isDisabled ? colors.neutral5 : colors.neutral0,\n        borderColor: isDisabled ? colors.neutral10 : isFocused ? colors.primary : colors.neutral20,\n        borderRadius: borderRadius,\n        borderStyle: \"solid\",\n        borderWidth: 1,\n        boxShadow: isFocused ? \"0 0 0 1px \".concat(colors.primary) : undefined,\n        \"&:hover\": {\n            borderColor: isFocused ? colors.primary : colors.neutral30\n        }\n    });\n};\nvar Control = function Control(props) {\n    var children = props.children, isDisabled = props.isDisabled, isFocused = props.isFocused, innerRef = props.innerRef, innerProps = props.innerProps, menuIsOpen = props.menuIsOpen;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        ref: innerRef\n    }, getStyleProps(props, \"control\", {\n        control: true,\n        \"control--is-disabled\": isDisabled,\n        \"control--is-focused\": isFocused,\n        \"control--menu-is-open\": menuIsOpen\n    }), innerProps, {\n        \"aria-disabled\": isDisabled || undefined\n    }), children);\n};\nvar Control$1 = Control;\nvar _excluded$1 = [\n    \"data\"\n];\nvar groupCSS = function groupCSS(_ref, unstyled) {\n    var spacing = _ref.theme.spacing;\n    return unstyled ? {} : {\n        paddingBottom: spacing.baseUnit * 2,\n        paddingTop: spacing.baseUnit * 2\n    };\n};\nvar Group = function Group(props) {\n    var children = props.children, cx = props.cx, getStyles = props.getStyles, getClassNames = props.getClassNames, Heading = props.Heading, headingProps = props.headingProps, innerProps = props.innerProps, label = props.label, theme = props.theme, selectProps = props.selectProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"group\", {\n        group: true\n    }), innerProps), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(Heading, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, headingProps, {\n        selectProps: selectProps,\n        theme: theme,\n        getStyles: getStyles,\n        getClassNames: getClassNames,\n        cx: cx\n    }), label), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", null, children));\n};\nvar groupHeadingCSS = function groupHeadingCSS(_ref2, unstyled) {\n    var _ref2$theme = _ref2.theme, colors = _ref2$theme.colors, spacing = _ref2$theme.spacing;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"group\",\n        cursor: \"default\",\n        display: \"block\"\n    }, unstyled ? {} : {\n        color: colors.neutral40,\n        fontSize: \"75%\",\n        fontWeight: 500,\n        marginBottom: \"0.25em\",\n        paddingLeft: spacing.baseUnit * 3,\n        paddingRight: spacing.baseUnit * 3,\n        textTransform: \"uppercase\"\n    });\n};\nvar GroupHeading = function GroupHeading(props) {\n    var _cleanCommonProps = cleanCommonProps(props);\n    _cleanCommonProps.data;\n    var innerProps = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_cleanCommonProps, _excluded$1);\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"groupHeading\", {\n        \"group-heading\": true\n    }), innerProps));\n};\nvar Group$1 = Group;\nvar _excluded = [\n    \"innerRef\",\n    \"isDisabled\",\n    \"isHidden\",\n    \"inputClassName\"\n];\nvar inputCSS = function inputCSS(_ref, unstyled) {\n    var isDisabled = _ref.isDisabled, value = _ref.value, _ref$theme = _ref.theme, spacing = _ref$theme.spacing, colors = _ref$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        visibility: isDisabled ? \"hidden\" : \"visible\",\n        // force css to recompute when value change due to @emotion bug.\n        // We can remove it whenever the bug is fixed.\n        transform: value ? \"translateZ(0)\" : \"\"\n    }, containerStyle), unstyled ? {} : {\n        margin: spacing.baseUnit / 2,\n        paddingBottom: spacing.baseUnit / 2,\n        paddingTop: spacing.baseUnit / 2,\n        color: colors.neutral80\n    });\n};\nvar spacingStyle = {\n    gridArea: \"1 / 2\",\n    font: \"inherit\",\n    minWidth: \"2px\",\n    border: 0,\n    margin: 0,\n    outline: 0,\n    padding: 0\n};\nvar containerStyle = {\n    flex: \"1 1 auto\",\n    display: \"inline-grid\",\n    gridArea: \"1 / 1 / 2 / 3\",\n    gridTemplateColumns: \"0 min-content\",\n    \"&:after\": (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        content: 'attr(data-value) \" \"',\n        visibility: \"hidden\",\n        whiteSpace: \"pre\"\n    }, spacingStyle)\n};\nvar inputStyle = function inputStyle(isHidden) {\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"input\",\n        color: \"inherit\",\n        background: 0,\n        opacity: isHidden ? 0 : 1,\n        width: \"100%\"\n    }, spacingStyle);\n};\nvar Input = function Input(props) {\n    var cx = props.cx, value = props.value;\n    var _cleanCommonProps = cleanCommonProps(props), innerRef = _cleanCommonProps.innerRef, isDisabled = _cleanCommonProps.isDisabled, isHidden = _cleanCommonProps.isHidden, inputClassName = _cleanCommonProps.inputClassName, innerProps = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_cleanCommonProps, _excluded);\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"input\", {\n        \"input-container\": true\n    }), {\n        \"data-value\": value || \"\"\n    }), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"input\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        className: cx({\n            input: true\n        }, inputClassName),\n        ref: innerRef,\n        style: inputStyle(isHidden),\n        disabled: isDisabled\n    }, innerProps)));\n};\nvar Input$1 = Input;\nvar multiValueCSS = function multiValueCSS(_ref, unstyled) {\n    var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, borderRadius = _ref$theme.borderRadius, colors = _ref$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"multiValue\",\n        display: \"flex\",\n        minWidth: 0\n    }, unstyled ? {} : {\n        backgroundColor: colors.neutral10,\n        borderRadius: borderRadius / 2,\n        margin: spacing.baseUnit / 2\n    });\n};\nvar multiValueLabelCSS = function multiValueLabelCSS(_ref2, unstyled) {\n    var _ref2$theme = _ref2.theme, borderRadius = _ref2$theme.borderRadius, colors = _ref2$theme.colors, cropWithEllipsis = _ref2.cropWithEllipsis;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        overflow: \"hidden\",\n        textOverflow: cropWithEllipsis || cropWithEllipsis === undefined ? \"ellipsis\" : undefined,\n        whiteSpace: \"nowrap\"\n    }, unstyled ? {} : {\n        borderRadius: borderRadius / 2,\n        color: colors.neutral80,\n        fontSize: \"85%\",\n        padding: 3,\n        paddingLeft: 6\n    });\n};\nvar multiValueRemoveCSS = function multiValueRemoveCSS(_ref3, unstyled) {\n    var _ref3$theme = _ref3.theme, spacing = _ref3$theme.spacing, borderRadius = _ref3$theme.borderRadius, colors = _ref3$theme.colors, isFocused = _ref3.isFocused;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        alignItems: \"center\",\n        display: \"flex\"\n    }, unstyled ? {} : {\n        borderRadius: borderRadius / 2,\n        backgroundColor: isFocused ? colors.dangerLight : undefined,\n        paddingLeft: spacing.baseUnit,\n        paddingRight: spacing.baseUnit,\n        \":hover\": {\n            backgroundColor: colors.dangerLight,\n            color: colors.danger\n        }\n    });\n};\nvar MultiValueGeneric = function MultiValueGeneric(_ref4) {\n    var children = _ref4.children, innerProps = _ref4.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", innerProps, children);\n};\nvar MultiValueContainer = MultiValueGeneric;\nvar MultiValueLabel = MultiValueGeneric;\nfunction MultiValueRemove(_ref5) {\n    var children = _ref5.children, innerProps = _ref5.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        role: \"button\"\n    }, innerProps), children || (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(CrossIcon, {\n        size: 14\n    }));\n}\nvar MultiValue = function MultiValue(props) {\n    var children = props.children, components = props.components, data = props.data, innerProps = props.innerProps, isDisabled = props.isDisabled, removeProps = props.removeProps, selectProps = props.selectProps;\n    var Container = components.Container, Label = components.Label, Remove = components.Remove;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(Container, {\n        data: data,\n        innerProps: (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, getStyleProps(props, \"multiValue\", {\n            \"multi-value\": true,\n            \"multi-value--is-disabled\": isDisabled\n        })), innerProps),\n        selectProps: selectProps\n    }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(Label, {\n        data: data,\n        innerProps: (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, getStyleProps(props, \"multiValueLabel\", {\n            \"multi-value__label\": true\n        })),\n        selectProps: selectProps\n    }, children), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(Remove, {\n        data: data,\n        innerProps: (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, getStyleProps(props, \"multiValueRemove\", {\n            \"multi-value__remove\": true\n        })), {}, {\n            \"aria-label\": \"Remove \".concat(children || \"option\")\n        }, removeProps),\n        selectProps: selectProps\n    }));\n};\nvar MultiValue$1 = MultiValue;\nvar optionCSS = function optionCSS(_ref, unstyled) {\n    var isDisabled = _ref.isDisabled, isFocused = _ref.isFocused, isSelected = _ref.isSelected, _ref$theme = _ref.theme, spacing = _ref$theme.spacing, colors = _ref$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"option\",\n        cursor: \"default\",\n        display: \"block\",\n        fontSize: \"inherit\",\n        width: \"100%\",\n        userSelect: \"none\",\n        WebkitTapHighlightColor: \"rgba(0, 0, 0, 0)\"\n    }, unstyled ? {} : {\n        backgroundColor: isSelected ? colors.primary : isFocused ? colors.primary25 : \"transparent\",\n        color: isDisabled ? colors.neutral20 : isSelected ? colors.neutral0 : \"inherit\",\n        padding: \"\".concat(spacing.baseUnit * 2, \"px \").concat(spacing.baseUnit * 3, \"px\"),\n        // provide some affordance on touch devices\n        \":active\": {\n            backgroundColor: !isDisabled ? isSelected ? colors.primary : colors.primary50 : undefined\n        }\n    });\n};\nvar Option = function Option(props) {\n    var children = props.children, isDisabled = props.isDisabled, isFocused = props.isFocused, isSelected = props.isSelected, innerRef = props.innerRef, innerProps = props.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"option\", {\n        option: true,\n        \"option--is-disabled\": isDisabled,\n        \"option--is-focused\": isFocused,\n        \"option--is-selected\": isSelected\n    }), {\n        ref: innerRef,\n        \"aria-disabled\": isDisabled\n    }, innerProps), children);\n};\nvar Option$1 = Option;\nvar placeholderCSS = function placeholderCSS(_ref, unstyled) {\n    var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, colors = _ref$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"placeholder\",\n        gridArea: \"1 / 1 / 2 / 3\"\n    }, unstyled ? {} : {\n        color: colors.neutral50,\n        marginLeft: spacing.baseUnit / 2,\n        marginRight: spacing.baseUnit / 2\n    });\n};\nvar Placeholder = function Placeholder(props) {\n    var children = props.children, innerProps = props.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"placeholder\", {\n        placeholder: true\n    }), innerProps), children);\n};\nvar Placeholder$1 = Placeholder;\nvar css = function css(_ref, unstyled) {\n    var isDisabled = _ref.isDisabled, _ref$theme = _ref.theme, spacing = _ref$theme.spacing, colors = _ref$theme.colors;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        label: \"singleValue\",\n        gridArea: \"1 / 1 / 2 / 3\",\n        maxWidth: \"100%\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\"\n    }, unstyled ? {} : {\n        color: isDisabled ? colors.neutral40 : colors.neutral80,\n        marginLeft: spacing.baseUnit / 2,\n        marginRight: spacing.baseUnit / 2\n    });\n};\nvar SingleValue = function SingleValue(props) {\n    var children = props.children, isDisabled = props.isDisabled, innerProps = props.innerProps;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, getStyleProps(props, \"singleValue\", {\n        \"single-value\": true,\n        \"single-value--is-disabled\": isDisabled\n    }), innerProps), children);\n};\nvar SingleValue$1 = SingleValue;\nvar components = {\n    ClearIndicator: ClearIndicator,\n    Control: Control$1,\n    DropdownIndicator: DropdownIndicator,\n    DownChevron: DownChevron,\n    CrossIcon: CrossIcon,\n    Group: Group$1,\n    GroupHeading: GroupHeading,\n    IndicatorsContainer: IndicatorsContainer,\n    IndicatorSeparator: IndicatorSeparator,\n    Input: Input$1,\n    LoadingIndicator: LoadingIndicator,\n    Menu: Menu$1,\n    MenuList: MenuList,\n    MenuPortal: MenuPortal,\n    LoadingMessage: LoadingMessage,\n    NoOptionsMessage: NoOptionsMessage,\n    MultiValue: MultiValue$1,\n    MultiValueContainer: MultiValueContainer,\n    MultiValueLabel: MultiValueLabel,\n    MultiValueRemove: MultiValueRemove,\n    Option: Option$1,\n    Placeholder: Placeholder$1,\n    SelectContainer: SelectContainer,\n    SingleValue: SingleValue$1,\n    ValueContainer: ValueContainer\n};\nvar defaultComponents = function defaultComponents(props) {\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, components), props.components);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-select/dist/index-641ee5b8.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-select/dist/react-select.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/react-select/dist/react-select.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NonceProvider: () => (/* binding */ NonceProvider),\n/* harmony export */   components: () => (/* reexport safe */ _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_5__.c),\n/* harmony export */   createFilter: () => (/* reexport safe */ _Select_aab027f3_esm_js__WEBPACK_IMPORTED_MODULE_3__.c),\n/* harmony export */   \"default\": () => (/* binding */ StateManagedSelect$1),\n/* harmony export */   defaultTheme: () => (/* reexport safe */ _Select_aab027f3_esm_js__WEBPACK_IMPORTED_MODULE_3__.d),\n/* harmony export */   mergeStyles: () => (/* reexport safe */ _Select_aab027f3_esm_js__WEBPACK_IMPORTED_MODULE_3__.m),\n/* harmony export */   useStateManager: () => (/* reexport safe */ _useStateManager_7e1e8489_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)\n/* harmony export */ });\n/* harmony import */ var _useStateManager_7e1e8489_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useStateManager-7e1e8489.esm.js */ \"(ssr)/./node_modules/react-select/dist/useStateManager-7e1e8489.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Select_aab027f3_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Select-aab027f3.esm.js */ \"(ssr)/./node_modules/react-select/dist/Select-aab027f3.esm.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @emotion/react */ \"(ssr)/./node_modules/@emotion/react/dist/emotion-element-782f682d.development.esm.js\");\n/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/cache */ \"(ssr)/./node_modules/@emotion/cache/dist/emotion-cache.development.esm.js\");\n/* harmony import */ var _index_641ee5b8_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-641ee5b8.esm.js */ \"(ssr)/./node_modules/react-select/dist/index-641ee5b8.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _babel_runtime_helpers_createSuper__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @babel/runtime/helpers/createSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/createSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_createSuper__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createSuper__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteral */ \"(ssr)/./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\");\n/* harmony import */ var _babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var use_isomorphic_layout_effect__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! use-isomorphic-layout-effect */ \"(ssr)/./node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar StateManagedSelect = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(function(props, ref) {\n    var baseSelectProps = (0,_useStateManager_7e1e8489_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)(props);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_Select_aab027f3_esm_js__WEBPACK_IMPORTED_MODULE_3__.S, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        ref: ref\n    }, baseSelectProps));\n});\nvar StateManagedSelect$1 = StateManagedSelect;\nvar NonceProvider = function(_ref) {\n    var nonce = _ref.nonce, children = _ref.children, cacheKey = _ref.cacheKey;\n    var emotionCache = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(function() {\n        return (0,_emotion_cache__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n            key: cacheKey,\n            nonce: nonce\n        });\n    }, [\n        cacheKey,\n        nonce\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_emotion_react__WEBPACK_IMPORTED_MODULE_19__.C, {\n        value: emotionCache\n    }, children);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2Rpc3QvcmVhY3Qtc2VsZWN0LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlFO0FBQ0E7QUFDZjtBQUMzQjtBQUNhO0FBQ1c7QUFDMkM7QUFDbkQ7QUFDTjtBQUNpQjtBQUNaO0FBQ0E7QUFDVTtBQUNUO0FBQ0g7QUFDSDtBQUNHO0FBQ007QUFDN0I7QUFDa0I7QUFDZTtBQUNQO0FBQzVCO0FBQ087QUFDWTtBQUV0QyxJQUFJaUIscUJBQXFCLFdBQVcsR0FBRWIsaURBQVVBLENBQUMsU0FBVWMsS0FBSyxFQUFFQyxHQUFHO0lBQ25FLElBQUlDLGtCQUFrQm5CLG1FQUFlQSxDQUFDaUI7SUFDdEMsT0FBTyxXQUFXLEdBQUVmLGdEQUFtQixDQUFDSSxzREFBTUEsRUFBRUwsOEVBQVFBLENBQUM7UUFDdkRpQixLQUFLQTtJQUNQLEdBQUdDO0FBQ0w7QUFDQSxJQUFJRSx1QkFBdUJMO0FBRTNCLElBQUlNLGdCQUFpQixTQUFVQyxJQUFJO0lBQ2pDLElBQUlDLFFBQVFELEtBQUtDLEtBQUssRUFDcEJDLFdBQVdGLEtBQUtFLFFBQVEsRUFDeEJDLFdBQVdILEtBQUtHLFFBQVE7SUFDMUIsSUFBSUMsZUFBZXZCLDhDQUFPQSxDQUFDO1FBQ3pCLE9BQU9VLDBEQUFXQSxDQUFDO1lBQ2pCYyxLQUFLRjtZQUNMRixPQUFPQTtRQUNUO0lBQ0YsR0FBRztRQUFDRTtRQUFVRjtLQUFNO0lBQ3BCLE9BQU8sV0FBVyxHQUFFdEIsZ0RBQW1CLENBQUNXLDhDQUFhQSxFQUFFO1FBQ3JEZ0IsT0FBT0Y7SUFDVCxHQUFHRjtBQUNMO0FBRTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9kaXN0L3JlYWN0LXNlbGVjdC5lc20uanM/Mjg2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1IGFzIHVzZVN0YXRlTWFuYWdlciB9IGZyb20gJy4vdXNlU3RhdGVNYW5hZ2VyLTdlMWU4NDg5LmVzbS5qcyc7XG5leHBvcnQgeyB1IGFzIHVzZVN0YXRlTWFuYWdlciB9IGZyb20gJy4vdXNlU3RhdGVNYW5hZ2VyLTdlMWU4NDg5LmVzbS5qcyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmb3J3YXJkUmVmLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUyBhcyBTZWxlY3QgfSBmcm9tICcuL1NlbGVjdC1hYWIwMjdmMy5lc20uanMnO1xuZXhwb3J0IHsgYyBhcyBjcmVhdGVGaWx0ZXIsIGQgYXMgZGVmYXVsdFRoZW1lLCBtIGFzIG1lcmdlU3R5bGVzIH0gZnJvbSAnLi9TZWxlY3QtYWFiMDI3ZjMuZXNtLmpzJztcbmltcG9ydCB7IENhY2hlUHJvdmlkZXIgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuZXhwb3J0IHsgYyBhcyBjb21wb25lbnRzIH0gZnJvbSAnLi9pbmRleC02NDFlZTViOC5lc20uanMnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDInO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXknO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVTdXBlcic7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXknO1xuaW1wb3J0ICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWwnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCAncmVhY3QtZG9tJztcbmltcG9ydCAnQGZsb2F0aW5nLXVpL2RvbSc7XG5pbXBvcnQgJ3VzZS1pc29tb3JwaGljLWxheW91dC1lZmZlY3QnO1xuXG52YXIgU3RhdGVNYW5hZ2VkU2VsZWN0ID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIGJhc2VTZWxlY3RQcm9wcyA9IHVzZVN0YXRlTWFuYWdlcihwcm9wcyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZlxuICB9LCBiYXNlU2VsZWN0UHJvcHMpKTtcbn0pO1xudmFyIFN0YXRlTWFuYWdlZFNlbGVjdCQxID0gU3RhdGVNYW5hZ2VkU2VsZWN0O1xuXG52YXIgTm9uY2VQcm92aWRlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgbm9uY2UgPSBfcmVmLm5vbmNlLFxuICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICBjYWNoZUtleSA9IF9yZWYuY2FjaGVLZXk7XG4gIHZhciBlbW90aW9uQ2FjaGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2FjaGUoe1xuICAgICAga2V5OiBjYWNoZUtleSxcbiAgICAgIG5vbmNlOiBub25jZVxuICAgIH0pO1xuICB9LCBbY2FjaGVLZXksIG5vbmNlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDYWNoZVByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGVtb3Rpb25DYWNoZVxuICB9LCBjaGlsZHJlbik7XG59KTtcblxuZXhwb3J0IHsgTm9uY2VQcm92aWRlciwgU3RhdGVNYW5hZ2VkU2VsZWN0JDEgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbInUiLCJ1c2VTdGF0ZU1hbmFnZXIiLCJfZXh0ZW5kcyIsIlJlYWN0IiwiZm9yd2FyZFJlZiIsInVzZU1lbW8iLCJTIiwiU2VsZWN0IiwiYyIsImNyZWF0ZUZpbHRlciIsImQiLCJkZWZhdWx0VGhlbWUiLCJtIiwibWVyZ2VTdHlsZXMiLCJDYWNoZVByb3ZpZGVyIiwiY3JlYXRlQ2FjaGUiLCJjb21wb25lbnRzIiwiU3RhdGVNYW5hZ2VkU2VsZWN0IiwicHJvcHMiLCJyZWYiLCJiYXNlU2VsZWN0UHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiU3RhdGVNYW5hZ2VkU2VsZWN0JDEiLCJOb25jZVByb3ZpZGVyIiwiX3JlZiIsIm5vbmNlIiwiY2hpbGRyZW4iLCJjYWNoZUtleSIsImVtb3Rpb25DYWNoZSIsImtleSIsInZhbHVlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-select/dist/react-select.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-select/dist/useStateManager-7e1e8489.esm.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-select/dist/useStateManager-7e1e8489.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ useStateManager)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nvar _excluded = [\n    \"defaultInputValue\",\n    \"defaultMenuIsOpen\",\n    \"defaultValue\",\n    \"inputValue\",\n    \"menuIsOpen\",\n    \"onChange\",\n    \"onInputChange\",\n    \"onMenuClose\",\n    \"onMenuOpen\",\n    \"value\"\n];\nfunction useStateManager(_ref) {\n    var _ref$defaultInputValu = _ref.defaultInputValue, defaultInputValue = _ref$defaultInputValu === void 0 ? \"\" : _ref$defaultInputValu, _ref$defaultMenuIsOpe = _ref.defaultMenuIsOpen, defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe, _ref$defaultValue = _ref.defaultValue, defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue, propsInputValue = _ref.inputValue, propsMenuIsOpen = _ref.menuIsOpen, propsOnChange = _ref.onChange, propsOnInputChange = _ref.onInputChange, propsOnMenuClose = _ref.onMenuClose, propsOnMenuOpen = _ref.onMenuOpen, propsValue = _ref.value, restSelectProps = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_ref, _excluded);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(propsInputValue !== undefined ? propsInputValue : defaultInputValue), _useState2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_useState, 2), stateInputValue = _useState2[0], setStateInputValue = _useState2[1];\n    var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(propsMenuIsOpen !== undefined ? propsMenuIsOpen : defaultMenuIsOpen), _useState4 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_useState3, 2), stateMenuIsOpen = _useState4[0], setStateMenuIsOpen = _useState4[1];\n    var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(propsValue !== undefined ? propsValue : defaultValue), _useState6 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_useState5, 2), stateValue = _useState6[0], setStateValue = _useState6[1];\n    var onChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(function(value, actionMeta) {\n        if (typeof propsOnChange === \"function\") {\n            propsOnChange(value, actionMeta);\n        }\n        setStateValue(value);\n    }, [\n        propsOnChange\n    ]);\n    var onInputChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(function(value, actionMeta) {\n        var newValue;\n        if (typeof propsOnInputChange === \"function\") {\n            newValue = propsOnInputChange(value, actionMeta);\n        }\n        setStateInputValue(newValue !== undefined ? newValue : value);\n    }, [\n        propsOnInputChange\n    ]);\n    var onMenuOpen = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(function() {\n        if (typeof propsOnMenuOpen === \"function\") {\n            propsOnMenuOpen();\n        }\n        setStateMenuIsOpen(true);\n    }, [\n        propsOnMenuOpen\n    ]);\n    var onMenuClose = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(function() {\n        if (typeof propsOnMenuClose === \"function\") {\n            propsOnMenuClose();\n        }\n        setStateMenuIsOpen(false);\n    }, [\n        propsOnMenuClose\n    ]);\n    var inputValue = propsInputValue !== undefined ? propsInputValue : stateInputValue;\n    var menuIsOpen = propsMenuIsOpen !== undefined ? propsMenuIsOpen : stateMenuIsOpen;\n    var value = propsValue !== undefined ? propsValue : stateValue;\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, restSelectProps), {}, {\n        inputValue: inputValue,\n        menuIsOpen: menuIsOpen,\n        onChange: onChange,\n        onInputChange: onInputChange,\n        onMenuClose: onMenuClose,\n        onMenuOpen: onMenuOpen,\n        value: value\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-select/dist/useStateManager-7e1e8489.esm.js\n");

/***/ })

};
;