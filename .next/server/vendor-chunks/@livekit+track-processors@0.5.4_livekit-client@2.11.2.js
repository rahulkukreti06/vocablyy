"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@livekit+track-processors@0.5.4_livekit-client@2.11.2";
exports.ids = ["vendor-chunks/@livekit+track-processors@0.5.4_livekit-client@2.11.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@livekit+track-processors@0.5.4_livekit-client@2.11.2/node_modules/@livekit/track-processors/dist/index.mjs":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+track-processors@0.5.4_livekit-client@2.11.2/node_modules/@livekit/track-processors/dist/index.mjs ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackgroundBlur: () => (/* binding */ BackgroundBlur),\n/* harmony export */   BackgroundProcessor: () => (/* binding */ BackgroundProcessor2),\n/* harmony export */   BackgroundTransformer: () => (/* binding */ BackgroundProcessor),\n/* harmony export */   ProcessorWrapper: () => (/* binding */ ProcessorWrapper),\n/* harmony export */   VideoTransformer: () => (/* binding */ VideoTransformer),\n/* harmony export */   VirtualBackground: () => (/* binding */ VirtualBackground),\n/* harmony export */   supportsBackgroundProcessors: () => (/* binding */ supportsBackgroundProcessors),\n/* harmony export */   supportsModernBackgroundProcessors: () => (/* binding */ supportsModernBackgroundProcessors)\n/* harmony export */ });\n/* harmony import */ var _mediapipe_tasks_vision__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mediapipe/tasks-vision */ \"(ssr)/./node_modules/.pnpm/@mediapipe+tasks-vision@0.10.14/node_modules/@mediapipe/tasks-vision/vision_bundle.mjs\");\n// src/utils.ts\nasync function sleep(time) {\n    return new Promise((resolve)=>setTimeout(resolve, time));\n}\nasync function waitForTrackResolution(track) {\n    const timeout = 500;\n    await sleep(10);\n    const started = Date.now();\n    while(Date.now() - started < timeout){\n        const { width, height } = track.getSettings();\n        if (width && height) {\n            return {\n                width,\n                height\n            };\n        }\n        await sleep(50);\n    }\n    return {\n        width: void 0,\n        height: void 0\n    };\n}\n// src/ProcessorWrapper.ts\nvar ProcessorWrapper = class _ProcessorWrapper {\n    constructor(transformer, name, options = {}){\n        // For tracking whether we're using the stream API fallback\n        this.useStreamFallback = false;\n        this.processingEnabled = false;\n        var _a;\n        this.name = name;\n        this.transformer = transformer;\n        this.maxFps = (_a = options.maxFps) != null ? _a : 30;\n    }\n    /**\n   * Determines if the Processor is supported on the current browser\n   */ static get isSupported() {\n        const hasStreamProcessor = typeof MediaStreamTrackGenerator !== \"undefined\" && typeof MediaStreamTrackProcessor !== \"undefined\";\n        const hasFallbackSupport = typeof HTMLCanvasElement !== \"undefined\" && typeof VideoFrame !== \"undefined\" && \"captureStream\" in HTMLCanvasElement.prototype;\n        return hasStreamProcessor || hasFallbackSupport;\n    }\n    /**\n   * Determines if modern browser APIs are supported, which yield better performance\n   */ static get hasModernApiSupport() {\n        return typeof MediaStreamTrackGenerator !== \"undefined\" && typeof MediaStreamTrackProcessor !== \"undefined\";\n    }\n    async setup(opts) {\n        this.source = opts.track;\n        const { width, height } = await waitForTrackResolution(this.source);\n        this.sourceDummy = opts.element;\n        if (!(this.sourceDummy instanceof HTMLVideoElement)) {\n            throw TypeError(\"Currently only video transformers are supported\");\n        }\n        if (this.sourceDummy instanceof HTMLVideoElement) {\n            this.sourceDummy.height = height != null ? height : 300;\n            this.sourceDummy.width = width != null ? width : 300;\n        }\n        this.useStreamFallback = !_ProcessorWrapper.hasModernApiSupport;\n        if (this.useStreamFallback) {\n            const existingCanvas = document.querySelector('canvas[data-livekit-processor=\"' + this.name + '\"]');\n            if (existingCanvas) {\n                this.displayCanvas = existingCanvas;\n                this.displayCanvas.width = width != null ? width : 300;\n                this.displayCanvas.height = height != null ? height : 300;\n            } else {\n                this.displayCanvas = document.createElement(\"canvas\");\n                this.displayCanvas.width = width != null ? width : 300;\n                this.displayCanvas.height = height != null ? height : 300;\n                this.displayCanvas.style.display = \"none\";\n                this.displayCanvas.dataset.livekitProcessor = this.name;\n                document.body.appendChild(this.displayCanvas);\n            }\n            this.renderContext = this.displayCanvas.getContext(\"2d\");\n            this.capturedStream = this.displayCanvas.captureStream();\n            this.canvas = new OffscreenCanvas(width != null ? width : 300, height != null ? height : 300);\n        } else {\n            this.processor = new MediaStreamTrackProcessor({\n                track: this.source\n            });\n            this.trackGenerator = new MediaStreamTrackGenerator({\n                kind: \"video\",\n                signalTarget: this.source\n            });\n            this.canvas = new OffscreenCanvas(width != null ? width : 300, height != null ? height : 300);\n        }\n    }\n    async init(opts) {\n        await this.setup(opts);\n        if (!this.canvas) {\n            throw new TypeError(\"Expected canvas to be defined after setup\");\n        }\n        await this.transformer.init({\n            outputCanvas: this.canvas,\n            inputElement: this.sourceDummy\n        });\n        if (this.useStreamFallback) {\n            this.initFallbackPath();\n        } else {\n            this.initStreamProcessorPath();\n        }\n    }\n    initStreamProcessorPath() {\n        if (!this.processor || !this.trackGenerator) {\n            throw new TypeError(\"Expected processor and trackGenerator to be defined for stream processor path\");\n        }\n        const readableStream = this.processor.readable;\n        const pipedStream = readableStream.pipeThrough(this.transformer.transformer);\n        pipedStream.pipeTo(this.trackGenerator.writable).catch((e)=>console.error(\"error when trying to pipe\", e)).finally(()=>this.destroy());\n        this.processedTrack = this.trackGenerator;\n    }\n    initFallbackPath() {\n        if (!this.capturedStream || !this.source || !this.canvas || !this.renderContext) {\n            throw new TypeError(\"Missing required components for fallback implementation\");\n        }\n        this.processedTrack = this.capturedStream.getVideoTracks()[0];\n        this.processingEnabled = true;\n        this.frameCallback = (frame)=>{\n            if (!this.processingEnabled || !frame) {\n                frame.close();\n                return;\n            }\n            const controller = {\n                enqueue: (processedFrame)=>{\n                    if (this.renderContext && this.displayCanvas) {\n                        this.renderContext.drawImage(processedFrame, 0, 0, this.displayCanvas.width, this.displayCanvas.height);\n                        processedFrame.close();\n                    }\n                }\n            };\n            try {\n                this.transformer.transform(frame, controller);\n            } catch (e) {\n                console.error(\"Error in transform:\", e);\n                frame.close();\n            }\n        };\n        this.startRenderLoop();\n    }\n    startRenderLoop() {\n        if (!this.sourceDummy || !(this.sourceDummy instanceof HTMLVideoElement)) {\n            return;\n        }\n        let lastVideoTimestamp = -1;\n        let lastFrameTime = 0;\n        const videoElement = this.sourceDummy;\n        const minFrameInterval = 1e3 / this.maxFps;\n        let estimatedVideoFps = this.maxFps;\n        let frameTimeHistory = [];\n        let lastVideoTimeChange = 0;\n        let frameCount = 0;\n        let lastFpsLog = 0;\n        const renderLoop = ()=>{\n            if (!this.processingEnabled || !this.sourceDummy || !(this.sourceDummy instanceof HTMLVideoElement)) {\n                return;\n            }\n            if (this.sourceDummy.paused) {\n                console.warn(\"Video is paused, trying to play\");\n                this.sourceDummy.play();\n                return;\n            }\n            const videoTime = videoElement.currentTime;\n            const now = performance.now();\n            const timeSinceLastFrame = now - lastFrameTime;\n            const hasNewFrame = videoTime !== lastVideoTimestamp;\n            if (hasNewFrame) {\n                if (lastVideoTimeChange > 0) {\n                    const timeBetweenFrames = now - lastVideoTimeChange;\n                    frameTimeHistory.push(timeBetweenFrames);\n                    if (frameTimeHistory.length > 10) {\n                        frameTimeHistory.shift();\n                    }\n                    if (frameTimeHistory.length > 2) {\n                        const avgFrameTime = frameTimeHistory.reduce((sum, time)=>sum + time, 0) / frameTimeHistory.length;\n                        estimatedVideoFps = 1e3 / avgFrameTime;\n                        const isDevelopment =  false || window.location.hostname === \"127.0.0.1\";\n                        if (isDevelopment && now - lastFpsLog > 5e3) {\n                            console.debug(`[${this.name}] Estimated video FPS: ${estimatedVideoFps.toFixed(1)}, Processing at: ${(frameCount / 5).toFixed(1)} FPS`);\n                            frameCount = 0;\n                            lastFpsLog = now;\n                        }\n                    }\n                }\n                lastVideoTimeChange = now;\n            }\n            const timeThresholdMet = timeSinceLastFrame >= minFrameInterval;\n            if (hasNewFrame && timeThresholdMet) {\n                lastVideoTimestamp = videoTime;\n                lastFrameTime = now;\n                frameCount++;\n                try {\n                    if (videoElement.readyState >= HTMLMediaElement.HAVE_CURRENT_DATA) {\n                        const frame = new VideoFrame(videoElement);\n                        if (this.frameCallback) {\n                            this.frameCallback(frame);\n                        } else {\n                            frame.close();\n                        }\n                    }\n                } catch (e) {\n                    console.error(\"Error in render loop:\", e);\n                }\n            }\n            this.animationFrameId = requestAnimationFrame(renderLoop);\n        };\n        this.animationFrameId = requestAnimationFrame(renderLoop);\n    }\n    async restart(opts) {\n        await this.destroy();\n        await this.init(opts);\n    }\n    async restartTransformer(...options) {\n        await this.transformer.restart(options[0]);\n    }\n    async updateTransformerOptions(...options) {\n        await this.transformer.update(options[0]);\n    }\n    async destroy() {\n        var _a, _b, _c, _d;\n        if (this.useStreamFallback) {\n            this.processingEnabled = false;\n            if (this.animationFrameId) {\n                cancelAnimationFrame(this.animationFrameId);\n                this.animationFrameId = void 0;\n            }\n            if (this.displayCanvas && this.displayCanvas.parentNode) {\n                this.displayCanvas.parentNode.removeChild(this.displayCanvas);\n            }\n            (_a = this.capturedStream) == null ? void 0 : _a.getTracks().forEach((track)=>track.stop());\n        } else {\n            await ((_c = (_b = this.processor) == null ? void 0 : _b.writableControl) == null ? void 0 : _c.close());\n            (_d = this.trackGenerator) == null ? void 0 : _d.stop();\n        }\n        await this.transformer.destroy();\n    }\n};\n// src/transformers/BackgroundTransformer.ts\n\n// package.json\nvar dependencies = {\n    \"@mediapipe/tasks-vision\": \"0.10.14\"\n};\n// src/webgl/utils.ts\nfunction initTexture(gl, texIndex) {\n    const texRef = gl.TEXTURE0 + texIndex;\n    gl.activeTexture(texRef);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    return texture;\n}\nfunction createFramebuffer(gl, texture, width, height) {\n    const framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error(\"Framebuffer not complete\");\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return framebuffer;\n}\nfunction createVertexBuffer(gl) {\n    const vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n        -1,\n        -1,\n        -1,\n        1,\n        1,\n        1,\n        -1,\n        -1,\n        1,\n        1,\n        1,\n        -1\n    ]), gl.STATIC_DRAW);\n    return vertexBuffer;\n}\nasync function resizeImageToCover(image, targetWidth, targetHeight) {\n    const imgAspect = image.width / image.height;\n    const targetAspect = targetWidth / targetHeight;\n    let sx = 0;\n    let sy = 0;\n    let sWidth = image.width;\n    let sHeight = image.height;\n    if (imgAspect > targetAspect) {\n        sWidth = Math.round(image.height * targetAspect);\n        sx = Math.round((image.width - sWidth) / 2);\n    } else if (imgAspect < targetAspect) {\n        sHeight = Math.round(image.width / targetAspect);\n        sy = Math.round((image.height - sHeight) / 2);\n    }\n    return createImageBitmap(image, sx, sy, sWidth, sHeight, {\n        resizeWidth: targetWidth,\n        resizeHeight: targetHeight,\n        resizeQuality: \"medium\"\n    });\n}\nvar emptyImageData = new ImageData(2, 2);\nemptyImageData.data[0] = 0;\nemptyImageData.data[1] = 0;\nemptyImageData.data[2] = 0;\nemptyImageData.data[3] = 0;\nvar glsl = (source)=>source;\n// src/webgl/shader-programs/vertexShader.ts\nvar vertexShaderSource = (flipY = true)=>`#version 300 es\n  in vec2 position;\n  out vec2 texCoords;\n\n  void main() {\n    texCoords = (position + 1.0) / 2.0;\n    texCoords.y = ${flipY ? \"1.0 - texCoords.y\" : \"texCoords.y\"};\n    gl_Position = vec4(position, 0, 1.0);\n  }\n`;\n// src/webgl/shader-programs/blurShader.ts\nvar blurFragmentShader = glsl`#version 300 es\n  precision highp float;\n  in vec2 texCoords;\n  uniform sampler2D u_texture;\n  uniform vec2 u_texelSize;\n  uniform vec2 u_direction;\n  uniform float u_radius;\n  out vec4 fragColor;\n\n  void main() {\n    float sigma = u_radius;\n    float twoSigmaSq = 2.0 * sigma * sigma;\n    float totalWeight = 0.0;\n    vec3 result = vec3(0.0);\n    const int MAX_SAMPLES = 16;\n    int radius = int(min(float(MAX_SAMPLES), ceil(u_radius)));\n\n    for (int i = -MAX_SAMPLES; i <= MAX_SAMPLES; ++i) {\n      float offset = float(i);\n      if (abs(offset) > float(radius)) continue;\n      float weight = exp(-(offset * offset) / twoSigmaSq);\n      vec2 sampleCoord = texCoords + u_direction * u_texelSize * offset;\n      result += texture(u_texture, sampleCoord).rgb * weight;\n      totalWeight += weight;\n    }\n\n    fragColor = vec4(result / totalWeight, 1.0);\n  }\n`;\nfunction createBlurProgram(gl) {\n    const blurFrag = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!blurFrag) {\n        throw Error(\"cannot create blur shader\");\n    }\n    gl.shaderSource(blurFrag, blurFragmentShader);\n    gl.compileShader(blurFrag);\n    if (!gl.getShaderParameter(blurFrag, gl.COMPILE_STATUS)) {\n        const info = gl.getShaderInfoLog(blurFrag);\n        throw Error(`Failed to compile blur shader: ${info}`);\n    }\n    const blurVertexShader = gl.createShader(gl.VERTEX_SHADER);\n    if (!blurVertexShader) {\n        throw Error(\"cannot create blur vertex shader\");\n    }\n    gl.shaderSource(blurVertexShader, vertexShaderSource());\n    gl.compileShader(blurVertexShader);\n    const blurProgram = gl.createProgram();\n    if (!blurProgram) {\n        throw Error(\"cannot create blur program\");\n    }\n    gl.attachShader(blurProgram, blurVertexShader);\n    gl.attachShader(blurProgram, blurFrag);\n    gl.linkProgram(blurProgram);\n    if (!gl.getProgramParameter(blurProgram, gl.LINK_STATUS)) {\n        const info = gl.getProgramInfoLog(blurProgram);\n        throw Error(`Failed to link blur program: ${info}`);\n    }\n    const blurUniforms = {\n        position: gl.getAttribLocation(blurProgram, \"position\"),\n        texture: gl.getUniformLocation(blurProgram, \"u_texture\"),\n        texelSize: gl.getUniformLocation(blurProgram, \"u_texelSize\"),\n        direction: gl.getUniformLocation(blurProgram, \"u_direction\"),\n        radius: gl.getUniformLocation(blurProgram, \"u_radius\")\n    };\n    return {\n        program: blurProgram,\n        shader: blurFrag,\n        vertexShader: blurVertexShader,\n        uniforms: blurUniforms\n    };\n}\nfunction applyBlur(gl, sourceTexture, width, height, blurRadius, blurProgram, blurUniforms, vertexBuffer, processFramebuffers, processTextures) {\n    gl.useProgram(blurProgram);\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.vertexAttribPointer(blurUniforms.position, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(blurUniforms.position);\n    const texelWidth = 1 / width;\n    const texelHeight = 1 / height;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, processFramebuffers[0]);\n    gl.viewport(0, 0, width, height);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, sourceTexture);\n    gl.uniform1i(blurUniforms.texture, 0);\n    gl.uniform2f(blurUniforms.texelSize, texelWidth, texelHeight);\n    gl.uniform2f(blurUniforms.direction, 1, 0);\n    gl.uniform1f(blurUniforms.radius, blurRadius);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, processFramebuffers[1]);\n    gl.viewport(0, 0, width, height);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, processTextures[0]);\n    gl.uniform1i(blurUniforms.texture, 0);\n    gl.uniform2f(blurUniforms.direction, 0, 1);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return processTextures[1];\n}\n// src/webgl/shader-programs/boxBlurShader.ts\nvar boxBlurFragmentShader = glsl`#version 300 es\nprecision mediump float;\n\nin vec2 texCoords;\n\nuniform sampler2D u_texture;\nuniform vec2 u_texelSize;    // 1.0 / texture size\nuniform vec2 u_direction;    // (1.0, 0.0) for horizontal, (0.0, 1.0) for vertical\nuniform float u_radius;      // blur radius in texels\n\nout vec4 fragColor;\n\nvoid main() {\n    vec3 sum = vec3(0.0);\n    float count = 0.0;\n\n    // Limit radius to avoid excessive loop cost\n    const int MAX_RADIUS = 16;\n    int radius = int(min(float(MAX_RADIUS), u_radius));\n\n    for (int i = -MAX_RADIUS; i <= MAX_RADIUS; ++i) {\n        if (abs(i) > radius) continue;\n\n        vec2 offset = u_direction * u_texelSize * float(i);\n        sum += texture(u_texture, texCoords + offset).rgb;\n        count += 1.0;\n  }\n\n  fragColor = vec4(sum / count, 1.0);\n}\n`;\nfunction createBoxBlurProgram(gl) {\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    if (!vertexShader) {\n        throw Error(\"cannot create vertex shader\");\n    }\n    gl.shaderSource(vertexShader, vertexShaderSource());\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n        const info = gl.getShaderInfoLog(vertexShader);\n        throw Error(`Failed to compile vertex shader: ${info}`);\n    }\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n        throw Error(\"cannot create fragment shader\");\n    }\n    gl.shaderSource(fragmentShader, boxBlurFragmentShader);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n        const info = gl.getShaderInfoLog(fragmentShader);\n        throw Error(`Failed to compile box blur shader: ${info}`);\n    }\n    const program = gl.createProgram();\n    if (!program) {\n        throw Error(\"cannot create box blur program\");\n    }\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        const info = gl.getProgramInfoLog(program);\n        throw Error(`Failed to link box blur program: ${info}`);\n    }\n    const uniforms = {\n        position: gl.getAttribLocation(program, \"position\"),\n        texture: gl.getUniformLocation(program, \"u_texture\"),\n        texelSize: gl.getUniformLocation(program, \"u_texelSize\"),\n        direction: gl.getUniformLocation(program, \"u_direction\"),\n        radius: gl.getUniformLocation(program, \"u_radius\")\n    };\n    return {\n        program,\n        vertexShader,\n        fragmentShader,\n        uniforms\n    };\n}\n// src/webgl/shader-programs/compositeShader.ts\nvar compositeFragmentShader = glsl`#version 300 es\n  precision highp float;\n  in vec2 texCoords;\n  uniform sampler2D background;\n  uniform sampler2D frame;\n  uniform sampler2D mask;\n  out vec4 fragColor;\n  \n  void main() {\n      \n    vec4 frameTex = texture(frame, texCoords);\n    vec4 bgTex = texture(background, texCoords);\n\n    float maskVal = texture(mask, texCoords).r;\n\n    // Compute screen-space gradient to detect edge sharpness\n    float grad = length(vec2(dFdx(maskVal), dFdy(maskVal)));\n\n    float edgeSoftness = 2.0; // higher = softer\n    \n    // Create a smooth edge around binary transition\n    float smoothAlpha = smoothstep(0.5 - grad * edgeSoftness, 0.5 + grad * edgeSoftness, maskVal);\n\n    // Optional: preserve frame alpha, or override as fully opaque\n    vec4 blended = mix(bgTex, vec4(frameTex.rgb, 1.0), 1.0 - smoothAlpha);\n    \n    fragColor = blended;\n  \n  }\n`;\nfunction createCompositeProgram(gl) {\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    if (!vertexShader) {\n        throw Error(\"cannot create vertex shader\");\n    }\n    gl.shaderSource(vertexShader, vertexShaderSource());\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n        const info = gl.getShaderInfoLog(vertexShader);\n        throw Error(`Failed to compile vertex shader: ${info}`);\n    }\n    const compositeShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!compositeShader) {\n        throw Error(\"cannot create fragment shader\");\n    }\n    gl.shaderSource(compositeShader, compositeFragmentShader);\n    gl.compileShader(compositeShader);\n    if (!gl.getShaderParameter(compositeShader, gl.COMPILE_STATUS)) {\n        const info = gl.getShaderInfoLog(compositeShader);\n        throw Error(`Failed to compile composite shader: ${info}`);\n    }\n    const compositeProgram = gl.createProgram();\n    if (!compositeProgram) {\n        throw Error(\"cannot create composite program\");\n    }\n    gl.attachShader(compositeProgram, vertexShader);\n    gl.attachShader(compositeProgram, compositeShader);\n    gl.linkProgram(compositeProgram);\n    if (!gl.getProgramParameter(compositeProgram, gl.LINK_STATUS)) {\n        const info = gl.getProgramInfoLog(compositeProgram);\n        throw Error(`Failed to link composite program: ${info}`);\n    }\n    const attribLocations = {\n        position: gl.getAttribLocation(compositeProgram, \"position\")\n    };\n    const uniformLocations = {\n        mask: gl.getUniformLocation(compositeProgram, \"mask\"),\n        frame: gl.getUniformLocation(compositeProgram, \"frame\"),\n        background: gl.getUniformLocation(compositeProgram, \"background\"),\n        stepWidth: gl.getUniformLocation(compositeProgram, \"u_stepWidth\")\n    };\n    return {\n        program: compositeProgram,\n        vertexShader,\n        fragmentShader: compositeShader,\n        attribLocations,\n        uniformLocations\n    };\n}\n// src/webgl/index.ts\nvar setupWebGL = (canvas)=>{\n    const gl = canvas.getContext(\"webgl2\", {\n        antialias: true,\n        premultipliedAlpha: true\n    });\n    let blurRadius = null;\n    if (!gl) {\n        console.error(\"Failed to create WebGL context\");\n        return void 0;\n    }\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    const composite = createCompositeProgram(gl);\n    const compositeProgram = composite.program;\n    const positionLocation = composite.attribLocations.position;\n    const { mask: maskTextureLocation, frame: frameTextureLocation, background: bgTextureLocation } = composite.uniformLocations;\n    const blur = createBlurProgram(gl);\n    const blurProgram = blur.program;\n    const blurUniforms = blur.uniforms;\n    const boxBlur = createBoxBlurProgram(gl);\n    const boxBlurProgram = boxBlur.program;\n    const boxBlurUniforms = boxBlur.uniforms;\n    const bgTexture = initTexture(gl, 0);\n    const frameTexture = initTexture(gl, 1);\n    const vertexBuffer = createVertexBuffer(gl);\n    if (!vertexBuffer) {\n        throw new Error(\"Failed to create vertex buffer\");\n    }\n    let bgBlurTextures = [];\n    let bgBlurFrameBuffers = [];\n    let maskBlurTextures = [];\n    let maskBlurFrameBuffers = [];\n    bgBlurTextures.push(initTexture(gl, 3));\n    bgBlurTextures.push(initTexture(gl, 4));\n    bgBlurFrameBuffers.push(createFramebuffer(gl, bgBlurTextures[0], canvas.width, canvas.height));\n    bgBlurFrameBuffers.push(createFramebuffer(gl, bgBlurTextures[1], canvas.width, canvas.height));\n    maskBlurTextures.push(initTexture(gl, 5));\n    maskBlurTextures.push(initTexture(gl, 6));\n    maskBlurFrameBuffers.push(createFramebuffer(gl, maskBlurTextures[0], canvas.width, canvas.height));\n    maskBlurFrameBuffers.push(createFramebuffer(gl, maskBlurTextures[1], canvas.width, canvas.height));\n    gl.useProgram(compositeProgram);\n    gl.uniform1i(bgTextureLocation, 0);\n    gl.uniform1i(frameTextureLocation, 1);\n    gl.uniform1i(maskTextureLocation, 2);\n    let customBackgroundImage = emptyImageData;\n    function render(frame, mask) {\n        if (frame.codedWidth === 0 || mask.width === 0) {\n            return;\n        }\n        const width = frame.displayWidth;\n        const height = frame.displayHeight;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, frameTexture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, frame);\n        let backgroundTexture = bgTexture;\n        if (blurRadius) {\n            backgroundTexture = applyBlur(gl, frameTexture, width, height, blurRadius, blurProgram, blurUniforms, vertexBuffer, bgBlurFrameBuffers, bgBlurTextures);\n        } else {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, bgTexture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, customBackgroundImage);\n            backgroundTexture = bgTexture;\n        }\n        const blurredMaskTexture = applyBlur(gl, mask.getAsWebGLTexture(), width, height, blurRadius || 1, // Use a default blur radius if not set\n        boxBlurProgram, boxBlurUniforms, vertexBuffer, maskBlurFrameBuffers, maskBlurTextures);\n        gl.viewport(0, 0, width, height);\n        gl.clearColor(1, 1, 1, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.useProgram(compositeProgram);\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(positionLocation);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, backgroundTexture);\n        gl.uniform1i(bgTextureLocation, 0);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, frameTexture);\n        gl.uniform1i(frameTextureLocation, 1);\n        gl.activeTexture(gl.TEXTURE2);\n        gl.bindTexture(gl.TEXTURE_2D, blurredMaskTexture);\n        gl.uniform1i(maskTextureLocation, 2);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n        mask.close();\n    }\n    async function setBackgroundImage(image) {\n        customBackgroundImage = emptyImageData;\n        if (image) {\n            try {\n                const croppedImage = await resizeImageToCover(image, canvas.width, canvas.height);\n                customBackgroundImage = croppedImage;\n            } catch (error) {\n                console.error(\"Error processing background image, falling back to black background:\", error);\n            }\n        }\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, bgTexture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, customBackgroundImage);\n    }\n    function setBlurRadius(radius) {\n        blurRadius = radius;\n        setBackgroundImage(null);\n    }\n    function cleanup() {\n        gl.deleteProgram(compositeProgram);\n        gl.deleteProgram(blurProgram);\n        gl.deleteProgram(boxBlurProgram);\n        gl.deleteTexture(bgTexture);\n        gl.deleteTexture(frameTexture);\n        for (const texture of bgBlurTextures){\n            gl.deleteTexture(texture);\n        }\n        for (const framebuffer of bgBlurFrameBuffers){\n            gl.deleteFramebuffer(framebuffer);\n        }\n        for (const texture of maskBlurTextures){\n            gl.deleteTexture(texture);\n        }\n        for (const framebuffer of maskBlurFrameBuffers){\n            gl.deleteFramebuffer(framebuffer);\n        }\n        gl.deleteBuffer(vertexBuffer);\n        if (customBackgroundImage) {\n            if (customBackgroundImage instanceof ImageBitmap) {\n                customBackgroundImage.close();\n            }\n            customBackgroundImage = emptyImageData;\n        }\n        bgBlurTextures = [];\n        bgBlurFrameBuffers = [];\n        maskBlurTextures = [];\n        maskBlurFrameBuffers = [];\n    }\n    return {\n        render,\n        setBackgroundImage,\n        setBlurRadius,\n        cleanup\n    };\n};\n// src/transformers/VideoTransformer.ts\nvar VideoTransformer = class {\n    constructor(){\n        this.isDisabled = false;\n    }\n    async init({ outputCanvas, inputElement: inputVideo }) {\n        if (!(inputVideo instanceof HTMLVideoElement)) {\n            throw TypeError(\"Video transformer needs a HTMLVideoElement as input\");\n        }\n        this.transformer = new TransformStream({\n            transform: (frame, controller)=>this.transform(frame, controller)\n        });\n        this.canvas = outputCanvas || null;\n        if (outputCanvas) {\n            this.gl = setupWebGL(this.canvas || new OffscreenCanvas(inputVideo.videoWidth, inputVideo.videoHeight));\n        }\n        this.inputVideo = inputVideo;\n        this.isDisabled = false;\n    }\n    async restart({ outputCanvas, inputElement: inputVideo }) {\n        var _a;\n        this.canvas = outputCanvas || null;\n        (_a = this.gl) == null ? void 0 : _a.cleanup();\n        this.gl = setupWebGL(this.canvas || new OffscreenCanvas(inputVideo.videoWidth, inputVideo.videoHeight));\n        this.inputVideo = inputVideo;\n        this.isDisabled = false;\n    }\n    async destroy() {\n        var _a;\n        this.isDisabled = true;\n        this.canvas = void 0;\n        (_a = this.gl) == null ? void 0 : _a.cleanup();\n        this.gl = void 0;\n    }\n};\n// src/transformers/BackgroundTransformer.ts\nvar BackgroundProcessor = class extends VideoTransformer {\n    constructor(opts){\n        super();\n        this.backgroundImage = null;\n        this.options = opts;\n        this.update(opts);\n    }\n    static get isSupported() {\n        return typeof OffscreenCanvas !== \"undefined\" && typeof VideoFrame !== \"undefined\" && typeof createImageBitmap !== \"undefined\" && !!document.createElement(\"canvas\").getContext(\"webgl2\");\n    }\n    async init({ outputCanvas, inputElement: inputVideo }) {\n        var _a, _b, _c, _d, _e, _f;\n        await super.init({\n            outputCanvas,\n            inputElement: inputVideo\n        });\n        const fileSet = await _mediapipe_tasks_vision__WEBPACK_IMPORTED_MODULE_0__.FilesetResolver.forVisionTasks((_b = (_a = this.options.assetPaths) == null ? void 0 : _a.tasksVisionFileSet) != null ? _b : `https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@${dependencies[\"@mediapipe/tasks-vision\"]}/wasm`);\n        this.imageSegmenter = await _mediapipe_tasks_vision__WEBPACK_IMPORTED_MODULE_0__.ImageSegmenter.createFromOptions(fileSet, {\n            baseOptions: {\n                modelAssetPath: (_d = (_c = this.options.assetPaths) == null ? void 0 : _c.modelAssetPath) != null ? _d : \"https://storage.googleapis.com/mediapipe-models/image_segmenter/selfie_segmenter/float16/latest/selfie_segmenter.tflite\",\n                delegate: \"GPU\",\n                ...this.options.segmenterOptions\n            },\n            canvas: this.canvas,\n            runningMode: \"VIDEO\",\n            outputCategoryMask: true,\n            outputConfidenceMasks: false\n        });\n        if (((_e = this.options) == null ? void 0 : _e.imagePath) && !this.backgroundImage) {\n            await this.loadBackground(this.options.imagePath).catch((err)=>console.error(\"Error while loading processor background image: \", err));\n        }\n        if (this.options.blurRadius) {\n            (_f = this.gl) == null ? void 0 : _f.setBlurRadius(this.options.blurRadius);\n        }\n    }\n    async destroy() {\n        var _a;\n        await super.destroy();\n        await ((_a = this.imageSegmenter) == null ? void 0 : _a.close());\n        this.backgroundImage = null;\n    }\n    async loadBackground(path) {\n        var _a;\n        const img = new Image();\n        await new Promise((resolve, reject)=>{\n            img.crossOrigin = \"Anonymous\";\n            img.onload = ()=>resolve(img);\n            img.onerror = (err)=>reject(err);\n            img.src = path;\n        });\n        const imageData = await createImageBitmap(img);\n        (_a = this.gl) == null ? void 0 : _a.setBackgroundImage(imageData);\n    }\n    async transform(frame, controller) {\n        var _a;\n        try {\n            if (!(frame instanceof VideoFrame) || frame.codedWidth === 0 || frame.codedHeight === 0) {\n                console.debug(\"empty frame detected, ignoring\");\n                return;\n            }\n            if (this.isDisabled) {\n                controller.enqueue(frame);\n                return;\n            }\n            if (!this.canvas) {\n                throw TypeError(\"Canvas needs to be initialized first\");\n            }\n            this.canvas.width = frame.displayWidth;\n            this.canvas.height = frame.displayHeight;\n            let startTimeMs = performance.now();\n            (_a = this.imageSegmenter) == null ? void 0 : _a.segmentForVideo(frame, startTimeMs, (result)=>{\n                var _a2, _b;\n                const segmentationTimeMs = performance.now() - startTimeMs;\n                this.segmentationResults = result;\n                this.drawFrame(frame);\n                if (this.canvas && this.canvas.width > 0 && this.canvas.height > 0) {\n                    const newFrame = new VideoFrame(this.canvas, {\n                        timestamp: frame.timestamp || Date.now()\n                    });\n                    const filterTimeMs = performance.now() - startTimeMs - segmentationTimeMs;\n                    const stats = {\n                        processingTimeMs: performance.now() - startTimeMs,\n                        segmentationTimeMs,\n                        filterTimeMs\n                    };\n                    (_b = (_a2 = this.options).onFrameProcessed) == null ? void 0 : _b.call(_a2, stats);\n                    controller.enqueue(newFrame);\n                } else {\n                    controller.enqueue(frame);\n                }\n                frame.close();\n            });\n        } catch (e) {\n            console.error(\"Error while processing frame: \", e);\n            frame == null ? void 0 : frame.close();\n        }\n    }\n    async update(opts) {\n        var _a;\n        this.options = {\n            ...this.options,\n            ...opts\n        };\n        if (opts.blurRadius) {\n            (_a = this.gl) == null ? void 0 : _a.setBlurRadius(opts.blurRadius);\n        } else if (opts.imagePath) {\n            await this.loadBackground(opts.imagePath);\n        }\n    }\n    async drawFrame(frame) {\n        if (!this.canvas || !this.gl || !this.segmentationResults || !this.inputVideo) return;\n        const mask = this.segmentationResults.categoryMask;\n        if (mask) {\n            this.gl.render(frame, mask);\n        }\n    }\n};\n// src/index.ts\nvar supportsBackgroundProcessors = ()=>BackgroundProcessor.isSupported && ProcessorWrapper.isSupported;\nvar supportsModernBackgroundProcessors = ()=>BackgroundProcessor.isSupported && ProcessorWrapper.hasModernApiSupport;\nvar BackgroundBlur = (blurRadius = 10, segmenterOptions, onFrameProcessed, processorOptions)=>{\n    return BackgroundProcessor2({\n        blurRadius,\n        segmenterOptions,\n        onFrameProcessed,\n        ...processorOptions\n    }, \"background-blur\");\n};\nvar VirtualBackground = (imagePath, segmenterOptions, onFrameProcessed, processorOptions)=>{\n    return BackgroundProcessor2({\n        imagePath,\n        segmenterOptions,\n        onFrameProcessed,\n        ...processorOptions\n    }, \"virtual-background\");\n};\nvar BackgroundProcessor2 = (options, name = \"background-processor\")=>{\n    const isTransformerSupported = BackgroundProcessor.isSupported;\n    const isProcessorSupported = ProcessorWrapper.isSupported;\n    if (!isTransformerSupported) {\n        throw new Error(\"Background transformer is not supported in this browser\");\n    }\n    if (!isProcessorSupported) {\n        throw new Error(\"Neither MediaStreamTrackProcessor nor canvas.captureStream() fallback is supported in this browser\");\n    }\n    const { blurRadius, imagePath, segmenterOptions, assetPaths, onFrameProcessed, ...processorOpts } = options;\n    const transformer = new BackgroundProcessor({\n        blurRadius,\n        imagePath,\n        segmenterOptions,\n        assetPaths,\n        onFrameProcessed\n    });\n    const processor = new ProcessorWrapper(transformer, name, processorOpts);\n    return processor;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+track-processors@0.5.4_livekit-client@2.11.2/node_modules/@livekit/track-processors/dist/index.mjs\n");

/***/ })

};
;