"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si";
exports.ids = ["vendor-chunks/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/components-01Mw9Q_q.mjs":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/components-01Mw9Q_q.mjs ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ wa),\n/* harmony export */   B: () => (/* binding */ Xt),\n/* harmony export */   C: () => (/* binding */ ra),\n/* harmony export */   D: () => (/* binding */ ca),\n/* harmony export */   E: () => (/* binding */ vt),\n/* harmony export */   F: () => (/* binding */ ha),\n/* harmony export */   G: () => (/* binding */ va),\n/* harmony export */   H: () => (/* binding */ ie),\n/* harmony export */   I: () => (/* binding */ Et),\n/* harmony export */   J: () => (/* binding */ pt),\n/* harmony export */   K: () => (/* binding */ wt),\n/* harmony export */   L: () => (/* binding */ pa),\n/* harmony export */   M: () => (/* binding */ ua),\n/* harmony export */   N: () => (/* binding */ kt),\n/* harmony export */   O: () => (/* binding */ Rt),\n/* harmony export */   P: () => (/* binding */ Bt),\n/* harmony export */   Q: () => (/* binding */ Mt),\n/* harmony export */   R: () => (/* binding */ Ra),\n/* harmony export */   S: () => (/* binding */ la),\n/* harmony export */   T: () => (/* binding */ fa),\n/* harmony export */   U: () => (/* binding */ yt),\n/* harmony export */   V: () => (/* binding */ Ft),\n/* harmony export */   W: () => (/* binding */ bt),\n/* harmony export */   X: () => (/* binding */ Me),\n/* harmony export */   Y: () => (/* binding */ St),\n/* harmony export */   Z: () => (/* binding */ oe),\n/* harmony export */   _: () => (/* binding */ Ct),\n/* harmony export */   a: () => (/* binding */ Sa),\n/* harmony export */   b: () => (/* binding */ Pt),\n/* harmony export */   c: () => (/* binding */ sa),\n/* harmony export */   d: () => (/* binding */ ia),\n/* harmony export */   e: () => (/* binding */ oa),\n/* harmony export */   f: () => (/* binding */ ma),\n/* harmony export */   g: () => (/* binding */ Ea),\n/* harmony export */   h: () => (/* binding */ ga),\n/* harmony export */   i: () => (/* binding */ ba),\n/* harmony export */   j: () => (/* binding */ Ie),\n/* harmony export */   k: () => (/* binding */ ya),\n/* harmony export */   l: () => (/* binding */ $t),\n/* harmony export */   m: () => (/* binding */ Ca),\n/* harmony export */   n: () => (/* binding */ aa),\n/* harmony export */   o: () => (/* binding */ na),\n/* harmony export */   p: () => (/* binding */ It),\n/* harmony export */   q: () => (/* binding */ da),\n/* harmony export */   r: () => (/* binding */ be),\n/* harmony export */   s: () => (/* binding */ ne),\n/* harmony export */   t: () => (/* binding */ K),\n/* harmony export */   u: () => (/* binding */ Se),\n/* harmony export */   v: () => (/* binding */ ka),\n/* harmony export */   w: () => (/* binding */ Ma),\n/* harmony export */   x: () => (/* binding */ Zt),\n/* harmony export */   y: () => (/* binding */ Ht),\n/* harmony export */   z: () => (/* binding */ gt)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks-DEsFub3E.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/hooks-DEsFub3E.mjs\");\n/* harmony import */ var _room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./room-BgiuQa2X.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/room-BgiuQa2X.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.11.2/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contexts-CPsnPrz2.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/contexts-CPsnPrz2.mjs\");\n\n\n\n\n\n\nconst aa = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function(n, a) {\n    const { buttonProps: r } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(n);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        ref: a,\n        ...r\n    }, n.children);\n}), na = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ room: n, ...a }, r) {\n    const c = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(n);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: r,\n        ...a\n    }, c);\n}), ra = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function(n, a) {\n    const { mergedProps: r } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.b)({\n        props: n\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        ref: a,\n        ...r\n    }, n.children);\n}), ca = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function(n, a) {\n    const { buttonProps: r } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(n);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        ref: a,\n        ...r\n    }, n.children);\n}), gt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708L11 10.293V4.5A1.5 1.5 0 0 0 9.5 3H3.707zM0 4.5a1.5 1.5 0 0 1 .943-1.393l9.532 9.533c-.262.224-.603.36-.975.36h-8A1.5 1.5 0 0 1 0 11.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"m15.2 3.6-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\"\n    })), vt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 4.5A1.5 1.5 0 0 1 1.5 3h8A1.5 1.5 0 0 1 11 4.5v7A1.5 1.5 0 0 1 9.5 13h-8A1.5 1.5 0 0 1 0 11.5zM15.2 3.6l-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\"\n    })), la = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 24 24\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#FFF\",\n        d: \"M4.99 3.99a1 1 0 0 0-.697 1.717L10.586 12l-6.293 6.293a1 1 0 1 0 1.414 1.414L12 13.414l6.293 6.293a1 1 0 1 0 1.414-1.414L13.414 12l6.293-6.293a1 1 0 0 0-.727-1.717 1 1 0 0 0-.687.303L12 10.586 5.707 4.293a1 1 0 0 0-.717-.303z\"\n    })), sa = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 18,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h10.5A2.75 2.75 0 0 1 16 2.75v13.594a.75.75 0 0 1-1.234.572l-3.691-3.12a1.25 1.25 0 0 0-.807-.296H2.75A2.75 2.75 0 0 1 0 10.75v-8ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v8c0 .69.56 1.25 1.25 1.25h7.518c.65 0 1.279.23 1.775.65l2.457 2.077V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Z\",\n        clipRule: \"evenodd\"\n    })), ie = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentcolor\",\n        fillRule: \"evenodd\",\n        d: \"M5.293 2.293a1 1 0 0 1 1.414 0l4.823 4.823a1.25 1.25 0 0 1 0 1.768l-4.823 4.823a1 1 0 0 1-1.414-1.414L9.586 8 5.293 3.707a1 1 0 0 1 0-1.414z\",\n        clipRule: \"evenodd\"\n    })), Et = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        stroke: \"currentColor\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: 1.5\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M10 1.75h4.25m0 0V6m0-4.25L9 7M6 14.25H1.75m0 0V10m0 4.25L7 9\"\n    }))), ia = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentcolor\",\n        fillRule: \"evenodd\",\n        d: \"M8.961.894C8.875-.298 7.125-.298 7.04.894c-.066.912-1.246 1.228-1.76.472-.67-.99-2.186-.115-1.664.96.399.824-.465 1.688-1.288 1.289-1.076-.522-1.95.994-.961 1.665.756.513.44 1.693-.472 1.759-1.192.086-1.192 1.836 0 1.922.912.066 1.228 1.246.472 1.76-.99.67-.115 2.186.96 1.664.824-.399 1.688.465 1.289 1.288-.522 1.076.994 1.95 1.665.961.513-.756 1.693-.44 1.759.472.086 1.192 1.836 1.192 1.922 0 .066-.912 1.246-1.228 1.76-.472.67.99 2.186.115 1.664-.96-.399-.824.465-1.688 1.288-1.289 1.076.522 1.95-.994.961-1.665-.756-.513-.44-1.693.472-1.759 1.192-.086 1.192-1.836 0-1.922-.912-.066-1.228-1.246-.472-1.76.99-.67.115-2.186-.96-1.664-.824.399-1.688-.465-1.289-1.288.522-1.076-.994-1.95-1.665-.961-.513.756-1.693.44-1.759-.472ZM8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10Z\",\n        clipRule: \"evenodd\"\n    })), oa = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z\",\n        clipRule: \"evenodd\"\n    })), pt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentcolor\",\n        fillRule: \"evenodd\",\n        d: \"M4 6.104V4a4 4 0 1 1 8 0v2.104c1.154.326 2 1.387 2 2.646v4.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-4.5c0-1.259.846-2.32 2-2.646ZM5.5 4a2.5 2.5 0 0 1 5 0v2h-5V4Z\",\n        clipRule: \"evenodd\"\n    })), wt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12.227 11.52a5.477 5.477 0 0 0 1.246-2.97.5.5 0 0 0-.995-.1 4.478 4.478 0 0 1-.962 2.359l-1.07-1.07C10.794 9.247 11 8.647 11 8V3a3 3 0 0 0-6 0v1.293L1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708zM8 12.5c.683 0 1.33-.152 1.911-.425l.743.743c-.649.359-1.378.59-2.154.66V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .995-.098A4.5 4.5 0 0 0 8 12.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M8.743 10.907 5 7.164V8a3 3 0 0 0 3.743 2.907z\"\n    })), kt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M2.975 8.002a.5.5 0 0 1 .547.449 4.5 4.5 0 0 0 8.956 0 .5.5 0 1 1 .995.098A5.502 5.502 0 0 1 8.5 13.478V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .448-.547z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M5 3a3 3 0 1 1 6 0v5a3 3 0 0 1-6 0z\"\n    })), Rt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentcolor\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    })), Mt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentcolor\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }))), yt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentcolor\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }))), bt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\"\n    }))), Me = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 20,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h14.5A2.75 2.75 0 0 1 20 2.75v10.5A2.75 2.75 0 0 1 17.25 16H2.75A2.75 2.75 0 0 1 0 13.25V2.75ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v10.5c0 .69.56 1.25 1.25 1.25h14.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M9.47 4.22a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1-1.06 1.06l-.97-.97v4.69a.75.75 0 0 1-1.5 0V6.56l-.97.97a.75.75 0 0 1-1.06-1.06l2.25-2.25Z\",\n        clipRule: \"evenodd\"\n    })), St = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 20,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        fill: \"currentColor\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7.28 4.22a.75.75 0 0 0-1.06 1.06L8.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L11.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 6.94z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M2.75 0A2.75 2.75 0 0 0 0 2.75v10.5A2.75 2.75 0 0 0 2.75 16h14.5A2.75 2.75 0 0 0 20 13.25V2.75A2.75 2.75 0 0 0 17.25 0zM1.5 2.75c0-.69.56-1.25 1.25-1.25h14.5c.69 0 1.25.56 1.25 1.25v10.5c0 .69-.56 1.25-1.25 1.25H2.75c-.69 0-1.25-.56-1.25-1.25z\",\n        clipRule: \"evenodd\"\n    }))), oe = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M8 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0V.75A.75.75 0 0 1 8 0Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M8 12a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5A.75.75 0 0 1 8 12Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.7\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M12 1.072a.75.75 0 0 1 .274 1.024l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 12 1.072Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M6 11.464a.75.75 0 0 1 .274 1.025l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 6 11.464Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.6\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M14.928 4a.75.75 0 0 1-.274 1.025l-2.165 1.25a.75.75 0 1 1-.75-1.3l2.165-1.25A.75.75 0 0 1 14.928 4Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M4.536 10a.75.75 0 0 1-.275 1.024l-2.165 1.25a.75.75 0 0 1-.75-1.298l2.165-1.25A.75.75 0 0 1 4.536 10Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.5\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M16 8a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 16 8Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M4 8a.75.75 0 0 1-.75.75H.75a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 4 8Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.4\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M14.928 12a.75.75 0 0 1-1.024.274l-2.165-1.25a.75.75 0 0 1 .75-1.299l2.165 1.25A.75.75 0 0 1 14.928 12Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.9\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M4.536 6a.75.75 0 0 1-1.025.275l-2.165-1.25a.75.75 0 1 1 .75-1.3l2.165 1.25A.75.75 0 0 1 4.536 6Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.3\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M12 14.928a.75.75 0 0 1-1.024-.274l-1.25-2.165a.75.75 0 0 1 1.298-.75l1.25 2.165A.75.75 0 0 1 12 14.928Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.8\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M6 4.536a.75.75 0 0 1-1.024-.275l-1.25-2.165a.75.75 0 1 1 1.299-.75l1.25 2.165A.75.75 0 0 1 6 4.536Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.2\n    })), Ct = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        stroke: \"currentColor\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: 1.5\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M13.25 7H9m0 0V2.75M9 7l5.25-5.25M2.75 9H7m0 0v4.25M7 9l-5.25 5.25\"\n    }))), It = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ trackRef: n, ...a }, r) {\n    const c = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.aa)(), { mergedProps: s, inFocus: o } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.d)({\n        trackRef: n ?? c,\n        props: a\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ab.Consumer, null, (l)=>l !== void 0 && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ref: r,\n            ...s\n        }, a.children ? a.children : o ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ct, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Et, null)));\n}), ua = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ kind: n, initialSelection: a, onActiveDeviceChange: r, onDeviceListChange: c, onDeviceSelectError: s, exactMatch: o, track: l, requestPermissions: i, onError: u, ...d }, g) {\n    const f = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.w)(), w = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((E)=>{\n        f && f.emit(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.MediaDevicesError, E), u == null || u(E);\n    }, [\n        f,\n        u\n    ]), { devices: p, activeDeviceId: m, setActiveMediaDevice: v, className: b } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.e)({\n        kind: n,\n        room: f,\n        track: l,\n        requestPermissions: i,\n        onError: w\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        a !== void 0 && v(a);\n    }, [\n        v\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        typeof c == \"function\" && c(p);\n    }, [\n        c,\n        p\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        m && m !== \"\" && (r == null || r(m));\n    }, [\n        m\n    ]);\n    const C = async (E)=>{\n        try {\n            await v(E, {\n                exact: o ?? !0\n            });\n        } catch (k) {\n            if (k instanceof Error) s == null || s(k);\n            else throw k;\n        }\n    }, T = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(d, {\n            className: b\n        }, {\n            className: \"lk-list\"\n        }), [\n        b,\n        d\n    ]), A = !!p.find((E)=>E.label.toLowerCase().startsWith(\"default\"));\n    function h(E, k, I) {\n        return E === k || !A && I === 0 && k === \"default\";\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", {\n        ref: g,\n        ...T\n    }, p.map((E, k)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", {\n            key: E.deviceId,\n            id: E.deviceId,\n            \"data-lk-active\": h(E.deviceId, m, k),\n            \"aria-selected\": h(E.deviceId, m, k),\n            role: \"option\"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            className: \"lk-button\",\n            onClick: ()=>C(E.deviceId)\n        }, E.label))));\n}), da = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ label: n = \"Allow Audio\", ...a }, r) {\n    const c = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.f)(), { mergedProps: s } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.f)({\n        room: c,\n        props: a\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        ref: r,\n        ...s\n    }, n);\n}), ma = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ label: n, ...a }, r) {\n    const c = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.f)(), { mergedProps: s, canPlayAudio: o } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.f)({\n        room: c,\n        props: a\n    }), { mergedProps: l, canPlayVideo: i } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.g)({\n        room: c,\n        props: s\n    }), { style: u, ...d } = l;\n    return u.display = o && i ? \"none\" : \"block\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        ref: r,\n        style: u,\n        ...d\n    }, n ?? `Start ${o ? \"Video\" : \"Audio\"}`);\n});\nfunction ye(t, n) {\n    switch(t){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone:\n            return n ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kt, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(wt, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera:\n            return n ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(vt, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(gt, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare:\n            return n ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(St, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Me, null);\n        default:\n            return;\n    }\n}\nfunction xt(t) {\n    switch(t){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionQuality.Excellent:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Rt, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionQuality.Good:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mt, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionQuality.Poor:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(yt, null);\n        default:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(bt, null);\n    }\n}\nconst fa = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ showIcon: n, ...a }, r) {\n    const { buttonProps: c, enabled: s } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(a), [o, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        l(!0);\n    }, []), o && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        ref: r,\n        ...c\n    }, (n ?? !0) && ye(a.source, s), a.children);\n}), be = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function(n, a) {\n    const { className: r, quality: c } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(n), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(n, {\n                className: r\n            }),\n            \"data-lk-quality\": c\n        }), [\n        c,\n        n,\n        r\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: a,\n        ...s\n    }, n.children ?? xt(c));\n}), K = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ participant: n, ...a }, r) {\n    const c = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(n), { className: s, infoObserver: o } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ac)(c), [\n        c\n    ]), { identity: l, name: i } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.j)(o, {\n        name: c.name,\n        identity: c.identity,\n        metadata: c.metadata\n    }), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(a, {\n            className: s,\n            \"data-lk-participant-name\": i\n        }), [\n        a,\n        s,\n        i\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ref: r,\n        ...u\n    }, i !== \"\" ? i : l, a.children);\n}), Se = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ trackRef: n, show: a = \"always\", ...r }, c) {\n    const { className: s, isMuted: o } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.k)(n), l = a === \"always\" || a === \"muted\" && o || a === \"unmuted\" && !o, i = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(r, {\n            className: s\n        }), [\n        s,\n        r\n    ]);\n    return l ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: c,\n        ...i,\n        \"data-lk-muted\": o\n    }, r.children ?? ye(n.source, !o)) : null;\n}), Pt = (t)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: 320,\n        height: 320,\n        viewBox: \"0 0 320 320\",\n        preserveAspectRatio: \"xMidYMid meet\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        ...t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M160 180C204.182 180 240 144.183 240 100C240 55.8172 204.182 20 160 20C115.817 20 79.9997 55.8172 79.9997 100C79.9997 144.183 115.817 180 160 180Z\",\n        fill: \"white\",\n        fillOpacity: 0.25\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M97.6542 194.614C103.267 191.818 109.841 192.481 115.519 195.141C129.025 201.466 144.1 205 159.999 205C175.899 205 190.973 201.466 204.48 195.141C210.158 192.481 216.732 191.818 222.345 194.614C262.703 214.719 291.985 253.736 298.591 300.062C300.15 310.997 291.045 320 280 320H39.9997C28.954 320 19.8495 310.997 21.4087 300.062C28.014 253.736 57.2966 214.72 97.6542 194.614Z\",\n        fill: \"white\",\n        fillOpacity: 0.25\n    }));\nfunction Ce(t, n = {}) {\n    const [a, r] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.X)(t)), [c, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(a == null ? void 0 : a.isMuted), [o, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState(a == null ? void 0 : a.isSubscribed), [i, u] = react__WEBPACK_IMPORTED_MODULE_0__.useState(a == null ? void 0 : a.track), [d, g] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"landscape\"), f = react__WEBPACK_IMPORTED_MODULE_0__.useRef(), { className: w, trackObserver: p } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.Y)(t), [\n        t.participant.sid ?? t.participant.identity,\n        t.source,\n        (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(t) && t.publication.trackSid\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const m = p.subscribe((v)=>{\n            _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"update track\", v), r(v), s(v == null ? void 0 : v.isMuted), l(v == null ? void 0 : v.isSubscribed), u(v == null ? void 0 : v.track);\n        });\n        return ()=>m == null ? void 0 : m.unsubscribe();\n    }, [\n        p\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var m, v;\n        return i && (f.current && i.detach(f.current), (m = n.element) != null && m.current && !(t.participant.isLocal && (i == null ? void 0 : i.kind) === \"audio\") && i.attach(n.element.current)), f.current = (v = n.element) == null ? void 0 : v.current, ()=>{\n            f.current && (i == null || i.detach(f.current));\n        };\n    }, [\n        i,\n        n.element\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var m, v;\n        if (typeof ((m = a == null ? void 0 : a.dimensions) == null ? void 0 : m.width) == \"number\" && typeof ((v = a == null ? void 0 : a.dimensions) == null ? void 0 : v.height) == \"number\") {\n            const b = a.dimensions.width > a.dimensions.height ? \"landscape\" : \"portrait\";\n            g(b);\n        }\n    }, [\n        a\n    ]), {\n        publication: a,\n        isMuted: c,\n        isSubscribed: o,\n        track: i,\n        elementProps: (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(n.props, {\n            className: w,\n            \"data-lk-local-participant\": t.participant.isLocal,\n            \"data-lk-source\": a == null ? void 0 : a.source,\n            ...(a == null ? void 0 : a.kind) === \"video\" && {\n                \"data-lk-orientation\": d\n            }\n        })\n    };\n}\nvar Y, ue;\nfunction Tt() {\n    if (ue) return Y;\n    ue = 1;\n    var t = \"Expected a function\", n = NaN, a = \"[object Symbol]\", r = /^\\s+|\\s+$/g, c = /^[-+]0x[0-9a-f]+$/i, s = /^0b[01]+$/i, o = /^0o[0-7]+$/i, l = parseInt, i = typeof _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ad == \"object\" && _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ad && _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ad.Object === Object && _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ad, u = typeof self == \"object\" && self && self.Object === Object && self, d = i || u || Function(\"return this\")(), g = Object.prototype, f = g.toString, w = Math.max, p = Math.min, m = function() {\n        return d.Date.now();\n    };\n    function v(h, E, k) {\n        var I, V, O, N, M, P, F = 0, re = !1, Z = !1, D = !0;\n        if (typeof h != \"function\") throw new TypeError(t);\n        E = A(E) || 0, b(k) && (re = !!k.leading, Z = \"maxWait\" in k, O = Z ? w(A(k.maxWait) || 0, E) : O, D = \"trailing\" in k ? !!k.trailing : D);\n        function U(R) {\n            var x = I, H = V;\n            return I = V = void 0, F = R, N = h.apply(H, x), N;\n        }\n        function Pe(R) {\n            return F = R, M = setTimeout(W, E), re ? U(R) : N;\n        }\n        function Te(R) {\n            var x = R - P, H = R - F, se = E - x;\n            return Z ? p(se, O - H) : se;\n        }\n        function ce(R) {\n            var x = R - P, H = R - F;\n            return P === void 0 || x >= E || x < 0 || Z && H >= O;\n        }\n        function W() {\n            var R = m();\n            if (ce(R)) return le(R);\n            M = setTimeout(W, Te(R));\n        }\n        function le(R) {\n            return M = void 0, D && I ? U(R) : (I = V = void 0, N);\n        }\n        function Ae() {\n            M !== void 0 && clearTimeout(M), F = 0, I = P = V = M = void 0;\n        }\n        function Ne() {\n            return M === void 0 ? N : le(m());\n        }\n        function G() {\n            var R = m(), x = ce(R);\n            if (I = arguments, V = this, P = R, x) {\n                if (M === void 0) return Pe(P);\n                if (Z) return M = setTimeout(W, E), U(P);\n            }\n            return M === void 0 && (M = setTimeout(W, E)), N;\n        }\n        return G.cancel = Ae, G.flush = Ne, G;\n    }\n    function b(h) {\n        var E = typeof h;\n        return !!h && (E == \"object\" || E == \"function\");\n    }\n    function C(h) {\n        return !!h && typeof h == \"object\";\n    }\n    function T(h) {\n        return typeof h == \"symbol\" || C(h) && f.call(h) == a;\n    }\n    function A(h) {\n        if (typeof h == \"number\") return h;\n        if (T(h)) return n;\n        if (b(h)) {\n            var E = typeof h.valueOf == \"function\" ? h.valueOf() : h;\n            h = b(E) ? E + \"\" : E;\n        }\n        if (typeof h != \"string\") return h === 0 ? h : +h;\n        h = h.replace(r, \"\");\n        var k = s.test(h);\n        return k || o.test(h) ? l(h.slice(2), k ? 2 : 8) : c.test(h) ? n : +h;\n    }\n    return Y = v, Y;\n}\nvar At = Tt();\nconst de = /* @__PURE__ */ (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ae)(At);\nfunction Nt(t) {\n    const n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(t);\n    n.current = t, (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            n.current();\n        }, []);\n}\nfunction Lt(t, n = 500, a) {\n    const r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    Nt(()=>{\n        r.current && r.current.cancel();\n    });\n    const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const s = de(t, n, a), o = (...l)=>s(...l);\n        return o.cancel = ()=>{\n            s.cancel();\n        }, o.isPending = ()=>!!r.current, o.flush = ()=>s.flush(), o;\n    }, [\n        t,\n        n,\n        a\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        r.current = de(t, n, a);\n    }, [\n        t,\n        n,\n        a\n    ]), c;\n}\nfunction zt(t, n, a) {\n    const r = (u, d)=>u === d, c = t instanceof Function ? t() : t, [s, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(c), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(c), i = Lt(o, n, a);\n    return r(l.current, c) || (i(c), l.current = c), [\n        s,\n        i\n    ];\n}\nfunction Vt({ threshold: t = 0, root: n = null, rootMargin: a = \"0%\", freezeOnceVisible: r = !1, initialIsIntersecting: c = !1, onChange: s } = {}) {\n    var o;\n    const [l, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [u, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            isIntersecting: c,\n            entry: void 0\n        })), g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    g.current = s;\n    const f = ((o = u.entry) == null ? void 0 : o.isIntersecting) && r;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!l || !(\"IntersectionObserver\" in window) || f) return;\n        const m = new IntersectionObserver((v)=>{\n            const b = Array.isArray(m.thresholds) ? m.thresholds : [\n                m.thresholds\n            ];\n            v.forEach((C)=>{\n                const T = C.isIntersecting && b.some((A)=>C.intersectionRatio >= A);\n                d({\n                    isIntersecting: T,\n                    entry: C\n                }), g.current && g.current(T, C);\n            });\n        }, {\n            threshold: t,\n            root: n,\n            rootMargin: a\n        });\n        return m.observe(l), ()=>{\n            m.disconnect();\n        };\n    }, [\n        l,\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        JSON.stringify(t),\n        n,\n        a,\n        f,\n        r\n    ]);\n    const w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var m;\n        !l && (m = u.entry) != null && m.target && !r && !f && w.current !== u.entry.target && (w.current = u.entry.target, d({\n            isIntersecting: c,\n            entry: void 0\n        }));\n    }, [\n        l,\n        u.entry,\n        r,\n        f,\n        c\n    ]);\n    const p = [\n        i,\n        !!u.isIntersecting,\n        u.entry\n    ];\n    return p.ref = p[0], p.isIntersecting = p[1], p.entry = p[2], p;\n}\nconst Ft = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ onTrackClick: n, onClick: a, onSubscriptionStatusChanged: r, trackRef: c, manageSubscription: s, ...o }, l) {\n    const i = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(c), u = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(l, ()=>u.current);\n    const d = Vt({\n        root: u.current\n    }), [g] = zt(d, 3e3);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        s && i.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.RemoteTrackPublication && (g == null ? void 0 : g.isIntersecting) === !1 && (d == null ? void 0 : d.isIntersecting) === !1 && i.publication.setSubscribed(!1);\n    }, [\n        g,\n        i,\n        s\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        s && i.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.RemoteTrackPublication && (d == null ? void 0 : d.isIntersecting) === !0 && i.publication.setSubscribed(!0);\n    }, [\n        d,\n        i,\n        s\n    ]);\n    const { elementProps: f, publication: w, isSubscribed: p } = Ce(i, {\n        element: u,\n        props: o\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        r == null || r(!!p);\n    }, [\n        p,\n        r\n    ]);\n    const m = (v)=>{\n        a == null || a(v), n == null || n({\n            participant: i == null ? void 0 : i.participant,\n            track: w\n        });\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: u,\n        ...f,\n        muted: !0,\n        onClick: m\n    });\n}), ne = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ trackRef: n, onSubscriptionStatusChanged: a, volume: r, ...c }, s) {\n    const o = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(n), l = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(s, ()=>l.current);\n    const { elementProps: i, isSubscribed: u, track: d, publication: g } = Ce(o, {\n        element: l,\n        props: c\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        a == null || a(!!u);\n    }, [\n        u,\n        a\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        d === void 0 || r === void 0 || (d instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.RemoteAudioTrack ? d.setVolume(r) : _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.warn(\"Volume can only be set on remote audio tracks.\"));\n    }, [\n        r,\n        d\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        g === void 0 || c.muted === void 0 || (g instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.RemoteTrackPublication ? g.setEnabled(!c.muted) : _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.warn(\"Can only call setEnabled on remote track publications.\"));\n    }, [\n        c.muted,\n        g,\n        d\n    ]), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"audio\", {\n        ref: l,\n        ...i\n    });\n});\nfunction Zt(t) {\n    const n = !!(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.B)();\n    return t.participant && !n ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.af.Provider, {\n        value: t.participant\n    }, t.children) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t.children);\n}\nfunction Ht(t) {\n    const n = !!(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.aa)();\n    return t.trackRef && !n ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ag.Provider, {\n        value: t.trackRef\n    }, t.children) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t.children);\n}\nconst Bt = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ trackRef: n, children: a, onParticipantClick: r, disableSpeakingIndicator: c, ...s }, o) {\n    var w, p;\n    const l = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(n), { elementProps: i } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.l)({\n        htmlProps: s,\n        disableSpeakingIndicator: c,\n        onParticipantClick: r,\n        trackRef: l\n    }), u = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(l.participant), d = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.j)(), g = (w = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ah)()) == null ? void 0 : w.autoSubscription, f = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((m)=>{\n        l.source && !m && d && d.pin.dispatch && (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(l, d.pin.state) && d.pin.dispatch({\n            msg: \"clear_pin\"\n        });\n    }, [\n        l,\n        d\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: o,\n        style: {\n            position: \"relative\"\n        },\n        ...i\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ht, {\n        trackRef: l\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zt, {\n        participant: l.participant\n    }, a ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(l) && (((p = l.publication) == null ? void 0 : p.kind) === \"video\" || l.source === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera || l.source === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ft, {\n        trackRef: l,\n        onSubscriptionStatusChanged: f,\n        manageSubscription: g\n    }) : (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(l) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ne, {\n        trackRef: l,\n        onSubscriptionStatusChanged: f\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-placeholder\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Pt, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-metadata\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-metadata-item\"\n    }, l.source === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, u && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(pt, {\n        style: {\n            marginRight: \"0.25rem\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Se, {\n        trackRef: {\n            participant: l.participant,\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone\n        },\n        show: \"muted\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(K, null)) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Me, {\n        style: {\n            marginRight: \"0.25rem\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(K, null, \"'s screen\"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(be, {\n        className: \"lk-participant-metadata-item\"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(It, {\n        trackRef: l\n    }))));\n});\nfunction ha(t) {\n    const n = (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(t, {\n        className: \"lk-focus-layout\"\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...n\n    }, t.children);\n}\nfunction ga({ trackRef: t, ...n }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Bt, {\n        trackRef: t,\n        ...n\n    });\n}\nfunction Ie({ tracks: t, ...n }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t.map((a)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ag.Provider, {\n            value: a,\n            key: (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(a)\n        }, (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(n.children))));\n}\nfunction jt({ totalPageCount: t, nextPage: n, prevPage: a, currentPage: r, pagesContainer: c }) {\n    const [s, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l;\n        return c && (l = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ai)(c.current, 2e3).subscribe(o)), ()=>{\n            l && l.unsubscribe();\n        };\n    }, [\n        c\n    ]), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-pagination-control\",\n        \"data-lk-user-interaction\": s\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"lk-button\",\n        onClick: a\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ie, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-pagination-count\"\n    }, `${r} of ${t}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"lk-button\",\n        onClick: n\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ie, null)));\n}\nconst _t = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ totalPageCount: n, currentPage: a }, r) {\n    const c = new Array(n).fill(\"\").map((s, o)=>o + 1 === a ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            \"data-lk-active\": !0,\n            key: o\n        }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            key: o\n        }));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: r,\n        className: \"lk-pagination-indicator\"\n    }, c);\n});\nfunction va({ tracks: t, ...n }) {\n    const a = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef(), r = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(n, {\n            className: \"lk-grid-layout\"\n        }), [\n        n\n    ]), { layout: c } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.n)(a, t.length), s = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.o)(c.maxTiles, t);\n    return (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(a, {\n        onLeftSwipe: s.nextPage,\n        onRightSwipe: s.prevPage\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: a,\n        \"data-lk-pagination\": s.totalPageCount > 1,\n        ...r\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ie, {\n        tracks: s.tracks\n    }, n.children), t.length > c.maxTiles && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_t, {\n        totalPageCount: s.totalPageCount,\n        currentPage: s.currentPage\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(jt, {\n        pagesContainer: a,\n        ...s\n    })));\n}\nconst Ot = 130, Wt = 140, me = 1, xe = 16 / 10, qt = (1 - xe) * -1;\nfunction Ea({ tracks: t, orientation: n, ...a }) {\n    const r = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), [c, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), { width: o, height: l } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.q)(r), i = n || (l >= o ? \"vertical\" : \"horizontal\"), u = i === \"vertical\" ? Math.max(o * qt, Ot) : Math.max(l * xe, Wt), d = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.aj)(), g = Math.max(i === \"vertical\" ? (l - d) / u : (o - d) / u, me);\n    let f = Math.round(g);\n    Math.abs(g - c) < 0.5 ? f = Math.round(c) : c !== g && s(g);\n    const w = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.r)(t, f);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        r.current && (r.current.dataset.lkOrientation = i, r.current.style.setProperty(\"--lk-max-visible-tiles\", f.toString()));\n    }, [\n        f,\n        i\n    ]), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"aside\", {\n        key: i,\n        className: \"lk-carousel\",\n        ref: r,\n        ...a\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ie, {\n        tracks: w\n    }, a.children));\n}\nfunction pa({ value: t, onPinChange: n, onWidgetChange: a, children: r }) {\n    const c = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ak)(t);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"PinState Updated\", {\n            state: c.pin.state\n        }), n && c.pin.state && n(c.pin.state);\n    }, [\n        c.pin.state,\n        n\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"Widget Updated\", {\n            widgetState: c.widget.state\n        }), a && c.widget.state && a(c.widget.state);\n    }, [\n        a,\n        c.widget.state\n    ]), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ab.Provider, {\n        value: c\n    }, r);\n}\nconst wa = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ trackRef: n, ...a }, r) {\n    const d = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(n), g = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(d, {\n        bands: 7,\n        loPass: 300\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        ref: r,\n        width: \"100%\",\n        height: \"100%\",\n        viewBox: \"0 0 200 90\",\n        ...a,\n        className: \"lk-audio-visualizer\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n        x: \"0\",\n        y: \"0\",\n        width: \"100%\",\n        height: \"100%\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        style: {\n            transform: `translate(${(200 - 7 * 10) / 2}px, 0)`\n        }\n    }, g.map((f, w)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n            key: w,\n            x: w * 10,\n            y: 90 / 2 - f * 50 / 2,\n            width: 6,\n            height: f * 50\n        }))));\n});\nfunction ka({ participants: t, ...n }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t.map((a)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.af.Provider, {\n            value: a,\n            key: a.identity\n        }, (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(n.children))));\n}\nfunction Ra({ volume: t, muted: n }) {\n    const a = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.t)([\n        livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n        livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShareAudio,\n        livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Unknown\n    ], {\n        updateOnlyOn: [],\n        onlySubscribed: !0\n    }).filter((r)=>!r.participant.isLocal && r.publication.kind === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Kind.Audio);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"none\"\n        }\n    }, a.map((r)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ne, {\n            key: (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(r),\n            trackRef: r,\n            volume: t,\n            muted: n\n        })));\n}\nconst Ma = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ childrenPosition: n = \"before\", children: a, ...r }, c) {\n    const { name: s } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.v)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ref: c,\n        ...r\n    }, n === \"before\" && a, s, n === \"after\" && a);\n});\nfunction $t(t) {\n    const n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(t, {\n            className: \"lk-toast\"\n        }), [\n        t\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...n\n    }, t.children);\n}\nconst Dt = (t)=>{\n    const n = [];\n    for(let a = 0; a < t; a++)n.push([\n        a,\n        t - 1 - a\n    ]);\n    return n;\n}, fe = (t)=>[\n        [\n            Math.floor(t / 2)\n        ],\n        [\n            -1\n        ]\n    ], Ut = (t, n, a)=>{\n    const [r, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [s, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        []\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (t === \"thinking\") o(fe(n));\n        else if (t === \"connecting\" || t === \"initializing\") {\n            const i = [\n                ...Dt(n)\n            ];\n            o(i);\n        } else o(t === \"listening\" ? fe(n) : t === void 0 ? [\n            new Array(n).fill(0).map((i, u)=>u)\n        ] : [\n            []\n        ]);\n        c(0);\n    }, [\n        t,\n        n\n    ]);\n    const l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let i = performance.now();\n        const u = (d)=>{\n            d - i >= a && (c((f)=>f + 1), i = d), l.current = requestAnimationFrame(u);\n        };\n        return l.current = requestAnimationFrame(u), ()=>{\n            l.current !== null && cancelAnimationFrame(l.current);\n        };\n    }, [\n        a,\n        n,\n        t,\n        s.length\n    ]), s[r % s.length];\n}, Gt = /* @__PURE__ */ new Map([\n    [\n        \"connecting\",\n        2e3\n    ],\n    [\n        \"initializing\",\n        2e3\n    ],\n    [\n        \"listening\",\n        500\n    ],\n    [\n        \"thinking\",\n        150\n    ]\n]), Qt = (t, n)=>{\n    if (t === void 0) return 1e3;\n    let a = Gt.get(t);\n    if (a) switch(t){\n        case \"connecting\":\n            a /= n;\n            break;\n    }\n    return a;\n}, Xt = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ state: n, options: a, barCount: r = 15, trackRef: c, children: s, ...o }, l) {\n    const i = (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(o, {\n        className: \"lk-audio-bar-visualizer\"\n    });\n    let u = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.aa)();\n    c && (u = c);\n    const d = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(u, {\n        bands: r,\n        loPass: 100,\n        hiPass: 200\n    }), g = (a == null ? void 0 : a.minHeight) ?? 20, f = (a == null ? void 0 : a.maxHeight) ?? 100, w = Ut(n, r, Qt(n, r) ?? 100);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: l,\n        ...i,\n        \"data-lk-va-state\": n\n    }, d.map((p, m)=>s ? (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(s, {\n            \"data-lk-highlighted\": w.includes(m),\n            \"data-lk-bar-index\": m,\n            className: \"lk-audio-bar\",\n            style: {\n                height: `${Math.min(f, Math.max(g, p * 100 + 5))}%`\n            }\n        }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            key: m,\n            \"data-lk-highlighted\": w.includes(m),\n            \"data-lk-bar-index\": m,\n            className: `lk-audio-bar ${w.includes(m) && \"lk-highlighted\"}`,\n            style: {\n                // TODO transform animations would be more performant, however the border-radius gets distorted when using scale transforms. a 9-slice approach (or 3 in this case) could work\n                // transform: `scale(1, ${Math.min(maxHeight, Math.max(minHeight, volume))}`,\n                height: `${Math.min(f, Math.max(g, p * 100 + 5))}%`\n            }\n        })));\n}), ya = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ children: n, disableSpeakingIndicator: a, onParticipantClick: r, trackRef: c, ...s }, o) {\n    const l = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(c), { elementProps: i } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.l)({\n        trackRef: l,\n        htmlProps: s,\n        disableSpeakingIndicator: a,\n        onParticipantClick: r\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: o,\n        style: {\n            position: \"relative\",\n            minHeight: \"160px\"\n        },\n        ...i\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ag.Provider, {\n        value: l\n    }, n ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(l) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ne, {\n        trackRef: l\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xt, {\n        barCount: 7,\n        options: {\n            minHeight: 8\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-metadata\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-metadata-item\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Se, {\n        trackRef: l\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(K, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(be, {\n        className: \"lk-participant-metadata-item\"\n    })))));\n});\nfunction ba(t) {\n    const [n, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0), r = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(t.room);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        switch(r){\n            case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Reconnecting:\n                a(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(oe, {\n                    className: \"lk-spinner\"\n                }), \" Reconnecting\"));\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Connecting:\n                a(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(oe, {\n                    className: \"lk-spinner\"\n                }), \" Connecting\"));\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected:\n                a(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"Disconnected\"));\n                break;\n            default:\n                a(void 0);\n                break;\n        }\n    }, [\n        r\n    ]), n ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($t, {\n        className: \"lk-toast-connection-state\"\n    }, n) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n}\nconst Sa = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ entry: n, hideName: a = !1, hideTimestamp: r = !1, messageFormatter: c, ...s }, o) {\n    var f, w, p, m;\n    const l = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>c ? c(n.message) : n.message, [\n        n.message,\n        c\n    ]), i = !!n.editTimestamp, u = new Date(n.timestamp), d = typeof navigator < \"u\" ? navigator.language : \"en-US\", g = ((f = n.from) == null ? void 0 : f.name) ?? ((w = n.from) == null ? void 0 : w.identity);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", {\n        ref: o,\n        className: \"lk-chat-entry\",\n        title: u.toLocaleTimeString(d, {\n            timeStyle: \"full\"\n        }),\n        \"data-lk-message-origin\": (p = n.from) != null && p.isLocal ? \"local\" : \"remote\",\n        ...s\n    }, (!r || !a || i) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-meta-data\"\n    }, !a && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", {\n        className: \"lk-participant-name\"\n    }, g), (!r || i) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-timestamp\"\n    }, i && \"edited \", u.toLocaleTimeString(d, {\n        timeStyle: \"short\"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-message-body\"\n    }, l), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-message-attachements\"\n    }, (m = n.attachedFiles) == null ? void 0 : m.map((v)=>v.type.startsWith(\"image/\") && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n            style: {\n                maxWidth: \"300px\",\n                maxHeight: \"300px\"\n            },\n            key: v.name,\n            src: URL.createObjectURL(v),\n            alt: v.name\n        }))));\n});\nfunction Ca(t) {\n    return (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.al)(t, (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.am)()).map((n, a)=>{\n        if (typeof n == \"string\") return n;\n        {\n            const r = n.content.toString(), c = n.type === \"url\" ? /^http(s?):\\/\\//.test(r) ? r : `https://${r}` : `mailto:${r}`;\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n                className: \"lk-chat-link\",\n                key: a,\n                href: c,\n                target: \"_blank\",\n                rel: \"noreferrer\"\n            }, r);\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/components-01Mw9Q_q.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/contexts-CPsnPrz2.mjs":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/contexts-CPsnPrz2.mjs ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ Ms),\n/* harmony export */   A: () => (/* binding */ Zo),\n/* harmony export */   B: () => (/* binding */ _o),\n/* harmony export */   C: () => (/* binding */ fo),\n/* harmony export */   D: () => (/* binding */ ws),\n/* harmony export */   E: () => (/* binding */ cs),\n/* harmony export */   F: () => (/* binding */ Ns),\n/* harmony export */   G: () => (/* binding */ Yo),\n/* harmony export */   H: () => (/* binding */ us),\n/* harmony export */   I: () => (/* binding */ fs),\n/* harmony export */   J: () => (/* binding */ ns),\n/* harmony export */   K: () => (/* binding */ rs),\n/* harmony export */   L: () => (/* binding */ Mo),\n/* harmony export */   M: () => (/* binding */ Xo),\n/* harmony export */   N: () => (/* binding */ Ss),\n/* harmony export */   O: () => (/* binding */ Es),\n/* harmony export */   P: () => (/* binding */ Ts),\n/* harmony export */   Q: () => (/* binding */ gs),\n/* harmony export */   R: () => (/* binding */ Wn),\n/* harmony export */   S: () => (/* binding */ ps),\n/* harmony export */   T: () => (/* binding */ hs),\n/* harmony export */   U: () => (/* binding */ Gi),\n/* harmony export */   V: () => (/* binding */ As),\n/* harmony export */   W: () => (/* binding */ Qo),\n/* harmony export */   X: () => (/* binding */ Bt),\n/* harmony export */   Y: () => (/* binding */ es),\n/* harmony export */   Z: () => (/* binding */ xs),\n/* harmony export */   _: () => (/* binding */ Rs),\n/* harmony export */   a: () => (/* binding */ $s),\n/* harmony export */   a0: () => (/* binding */ os),\n/* harmony export */   a1: () => (/* binding */ W),\n/* harmony export */   a2: () => (/* binding */ ks),\n/* harmony export */   a3: () => (/* binding */ _s),\n/* harmony export */   a4: () => (/* binding */ Ls),\n/* harmony export */   a5: () => (/* binding */ Go),\n/* harmony export */   a6: () => (/* binding */ Ko),\n/* harmony export */   a7: () => (/* binding */ ds),\n/* harmony export */   a8: () => (/* binding */ ss),\n/* harmony export */   a9: () => (/* binding */ Ds),\n/* harmony export */   aa: () => (/* binding */ Un),\n/* harmony export */   ab: () => (/* binding */ Nn),\n/* harmony export */   ac: () => (/* binding */ ys),\n/* harmony export */   ad: () => (/* binding */ Do),\n/* harmony export */   ae: () => (/* binding */ Or),\n/* harmony export */   af: () => (/* binding */ jn),\n/* harmony export */   ag: () => (/* binding */ Fn),\n/* harmony export */   ah: () => (/* binding */ Ys),\n/* harmony export */   ai: () => (/* binding */ Is),\n/* harmony export */   aj: () => (/* binding */ Fo),\n/* harmony export */   ak: () => (/* binding */ Us),\n/* harmony export */   al: () => (/* binding */ Vo),\n/* harmony export */   am: () => (/* binding */ Bo),\n/* harmony export */   an: () => (/* binding */ jo),\n/* harmony export */   ao: () => (/* binding */ Wo),\n/* harmony export */   ap: () => (/* binding */ qo),\n/* harmony export */   aq: () => (/* binding */ Fs),\n/* harmony export */   ar: () => (/* binding */ $o),\n/* harmony export */   as: () => (/* binding */ Uo),\n/* harmony export */   at: () => (/* binding */ Ho),\n/* harmony export */   au: () => (/* binding */ zo),\n/* harmony export */   av: () => (/* binding */ Bs),\n/* harmony export */   aw: () => (/* binding */ js),\n/* harmony export */   b: () => (/* binding */ Ps),\n/* harmony export */   c: () => (/* binding */ Vs),\n/* harmony export */   d: () => (/* binding */ bs),\n/* harmony export */   e: () => (/* binding */ ts),\n/* harmony export */   f: () => (/* binding */ Hs),\n/* harmony export */   g: () => (/* binding */ bo),\n/* harmony export */   h: () => (/* binding */ ms),\n/* harmony export */   i: () => (/* binding */ Ws),\n/* harmony export */   j: () => (/* binding */ Lo),\n/* harmony export */   k: () => (/* binding */ Cs),\n/* harmony export */   l: () => (/* binding */ _),\n/* harmony export */   m: () => (/* binding */ No),\n/* harmony export */   n: () => (/* binding */ qi),\n/* harmony export */   o: () => (/* binding */ ho),\n/* harmony export */   p: () => (/* binding */ N),\n/* harmony export */   q: () => (/* binding */ as),\n/* harmony export */   r: () => (/* binding */ co),\n/* harmony export */   s: () => (/* binding */ Os),\n/* harmony export */   t: () => (/* binding */ In),\n/* harmony export */   u: () => (/* binding */ zs),\n/* harmony export */   v: () => (/* binding */ ls),\n/* harmony export */   w: () => (/* binding */ Io),\n/* harmony export */   x: () => (/* binding */ is),\n/* harmony export */   y: () => (/* binding */ vs),\n/* harmony export */   z: () => (/* binding */ Jo)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.11.2/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nconst De = Math.min, se = Math.max, $e = Math.round, Le = Math.floor, G = (e)=>({\n        x: e,\n        y: e\n    }), Yn = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n}, qn = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction Tt(e, t, n) {\n    return se(e, De(t, n));\n}\nfunction He(e, t) {\n    return typeof e == \"function\" ? e(t) : e;\n}\nfunction ae(e) {\n    return e.split(\"-\")[0];\n}\nfunction ze(e) {\n    return e.split(\"-\")[1];\n}\nfunction qt(e) {\n    return e === \"x\" ? \"y\" : \"x\";\n}\nfunction Kt(e) {\n    return e === \"y\" ? \"height\" : \"width\";\n}\nfunction he(e) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].includes(ae(e)) ? \"y\" : \"x\";\n}\nfunction Gt(e) {\n    return qt(he(e));\n}\nfunction Kn(e, t, n) {\n    n === void 0 && (n = !1);\n    const r = ze(e), i = Gt(e), o = Kt(i);\n    let s = i === \"x\" ? r === (n ? \"end\" : \"start\") ? \"right\" : \"left\" : r === \"start\" ? \"bottom\" : \"top\";\n    return t.reference[o] > t.floating[o] && (s = Ne(s)), [\n        s,\n        Ne(s)\n    ];\n}\nfunction Gn(e) {\n    const t = Ne(e);\n    return [\n        it(e),\n        t,\n        it(t)\n    ];\n}\nfunction it(e) {\n    return e.replace(/start|end/g, (t)=>qn[t]);\n}\nfunction Qn(e, t, n) {\n    const r = [\n        \"left\",\n        \"right\"\n    ], i = [\n        \"right\",\n        \"left\"\n    ], o = [\n        \"top\",\n        \"bottom\"\n    ], s = [\n        \"bottom\",\n        \"top\"\n    ];\n    switch(e){\n        case \"top\":\n        case \"bottom\":\n            return n ? t ? i : r : t ? r : i;\n        case \"left\":\n        case \"right\":\n            return t ? o : s;\n        default:\n            return [];\n    }\n}\nfunction Jn(e, t, n, r) {\n    const i = ze(e);\n    let o = Qn(ae(e), n === \"start\", r);\n    return i && (o = o.map((s)=>s + \"-\" + i), t && (o = o.concat(o.map(it)))), o;\n}\nfunction Ne(e) {\n    return e.replace(/left|right|bottom|top/g, (t)=>Yn[t]);\n}\nfunction Xn(e) {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        ...e\n    };\n}\nfunction Zn(e) {\n    return typeof e != \"number\" ? Xn(e) : {\n        top: e,\n        right: e,\n        bottom: e,\n        left: e\n    };\n}\nfunction Fe(e) {\n    const { x: t, y: n, width: r, height: i } = e;\n    return {\n        width: r,\n        height: i,\n        top: n,\n        left: t,\n        right: t + r,\n        bottom: n + i,\n        x: t,\n        y: n\n    };\n}\nfunction Ct(e, t, n) {\n    let { reference: r, floating: i } = e;\n    const o = he(t), s = Gt(t), a = Kt(s), c = ae(t), u = o === \"y\", l = r.x + r.width / 2 - i.width / 2, f = r.y + r.height / 2 - i.height / 2, h = r[a] / 2 - i[a] / 2;\n    let d;\n    switch(c){\n        case \"top\":\n            d = {\n                x: l,\n                y: r.y - i.height\n            };\n            break;\n        case \"bottom\":\n            d = {\n                x: l,\n                y: r.y + r.height\n            };\n            break;\n        case \"right\":\n            d = {\n                x: r.x + r.width,\n                y: f\n            };\n            break;\n        case \"left\":\n            d = {\n                x: r.x - i.width,\n                y: f\n            };\n            break;\n        default:\n            d = {\n                x: r.x,\n                y: r.y\n            };\n    }\n    switch(ze(t)){\n        case \"start\":\n            d[s] -= h * (n && u ? -1 : 1);\n            break;\n        case \"end\":\n            d[s] += h * (n && u ? -1 : 1);\n            break;\n    }\n    return d;\n}\nconst er = async (e, t, n)=>{\n    const { placement: r = \"bottom\", strategy: i = \"absolute\", middleware: o = [], platform: s } = n, a = o.filter(Boolean), c = await (s.isRTL == null ? void 0 : s.isRTL(t));\n    let u = await s.getElementRects({\n        reference: e,\n        floating: t,\n        strategy: i\n    }), { x: l, y: f } = Ct(u, r, c), h = r, d = {}, m = 0;\n    for(let p = 0; p < a.length; p++){\n        const { name: b, fn: v } = a[p], { x, y: E, data: P, reset: g } = await v({\n            x: l,\n            y: f,\n            initialPlacement: r,\n            placement: h,\n            strategy: i,\n            middlewareData: d,\n            rects: u,\n            platform: s,\n            elements: {\n                reference: e,\n                floating: t\n            }\n        });\n        l = x ?? l, f = E ?? f, d = {\n            ...d,\n            [b]: {\n                ...d[b],\n                ...P\n            }\n        }, g && m <= 50 && (m++, typeof g == \"object\" && (g.placement && (h = g.placement), g.rects && (u = g.rects === !0 ? await s.getElementRects({\n            reference: e,\n            floating: t,\n            strategy: i\n        }) : g.rects), { x: l, y: f } = Ct(u, h, c)), p = -1);\n    }\n    return {\n        x: l,\n        y: f,\n        placement: h,\n        strategy: i,\n        middlewareData: d\n    };\n};\nasync function Qt(e, t) {\n    var n;\n    t === void 0 && (t = {});\n    const { x: r, y: i, platform: o, rects: s, elements: a, strategy: c } = e, { boundary: u = \"clippingAncestors\", rootBoundary: l = \"viewport\", elementContext: f = \"floating\", altBoundary: h = !1, padding: d = 0 } = He(t, e), m = Zn(d), b = a[h ? f === \"floating\" ? \"reference\" : \"floating\" : f], v = Fe(await o.getClippingRect({\n        element: (n = await (o.isElement == null ? void 0 : o.isElement(b))) == null || n ? b : b.contextElement || await (o.getDocumentElement == null ? void 0 : o.getDocumentElement(a.floating)),\n        boundary: u,\n        rootBoundary: l,\n        strategy: c\n    })), x = f === \"floating\" ? {\n        x: r,\n        y: i,\n        width: s.floating.width,\n        height: s.floating.height\n    } : s.reference, E = await (o.getOffsetParent == null ? void 0 : o.getOffsetParent(a.floating)), P = await (o.isElement == null ? void 0 : o.isElement(E)) ? await (o.getScale == null ? void 0 : o.getScale(E)) || {\n        x: 1,\n        y: 1\n    } : {\n        x: 1,\n        y: 1\n    }, g = Fe(o.convertOffsetParentRelativeRectToViewportRelativeRect ? await o.convertOffsetParentRelativeRectToViewportRelativeRect({\n        elements: a,\n        rect: x,\n        offsetParent: E,\n        strategy: c\n    }) : x);\n    return {\n        top: (v.top - g.top + m.top) / P.y,\n        bottom: (g.bottom - v.bottom + m.bottom) / P.y,\n        left: (v.left - g.left + m.left) / P.x,\n        right: (g.right - v.right + m.right) / P.x\n    };\n}\nconst tr = function(e) {\n    return e === void 0 && (e = {}), {\n        name: \"flip\",\n        options: e,\n        async fn (t) {\n            var n, r;\n            const { placement: i, middlewareData: o, rects: s, initialPlacement: a, platform: c, elements: u } = t, { mainAxis: l = !0, crossAxis: f = !0, fallbackPlacements: h, fallbackStrategy: d = \"bestFit\", fallbackAxisSideDirection: m = \"none\", flipAlignment: p = !0, ...b } = He(e, t);\n            if ((n = o.arrow) != null && n.alignmentOffset) return {};\n            const v = ae(i), x = he(a), E = ae(a) === a, P = await (c.isRTL == null ? void 0 : c.isRTL(u.floating)), g = h || (E || !p ? [\n                Ne(a)\n            ] : Gn(a)), S = m !== \"none\";\n            !h && S && g.push(...Jn(a, p, m, P));\n            const C = [\n                a,\n                ...g\n            ], $ = await Qt(t, b), I = [];\n            let z = ((r = o.flip) == null ? void 0 : r.overflows) || [];\n            if (l && I.push($[v]), f) {\n                const K = Kn(i, s, P);\n                I.push($[K[0]], $[K[1]]);\n            }\n            if (z = [\n                ...z,\n                {\n                    placement: i,\n                    overflows: I\n                }\n            ], !I.every((K)=>K <= 0)) {\n                var T, L;\n                const K = (((T = o.flip) == null ? void 0 : T.index) || 0) + 1, ke = C[K];\n                if (ke) return {\n                    data: {\n                        index: K,\n                        overflows: z\n                    },\n                    reset: {\n                        placement: ke\n                    }\n                };\n                let xe = (L = z.filter((fe)=>fe.overflows[0] <= 0).sort((fe, te)=>fe.overflows[1] - te.overflows[1])[0]) == null ? void 0 : L.placement;\n                if (!xe) switch(d){\n                    case \"bestFit\":\n                        {\n                            var oe;\n                            const fe = (oe = z.filter((te)=>{\n                                if (S) {\n                                    const ne = he(te.placement);\n                                    return ne === x || // Create a bias to the `y` side axis due to horizontal\n                                    // reading directions favoring greater width.\n                                    ne === \"y\";\n                                }\n                                return !0;\n                            }).map((te)=>[\n                                    te.placement,\n                                    te.overflows.filter((ne)=>ne > 0).reduce((ne, Bn)=>ne + Bn, 0)\n                                ]).sort((te, ne)=>te[1] - ne[1])[0]) == null ? void 0 : oe[0];\n                            fe && (xe = fe);\n                            break;\n                        }\n                    case \"initialPlacement\":\n                        xe = a;\n                        break;\n                }\n                if (i !== xe) return {\n                    reset: {\n                        placement: xe\n                    }\n                };\n            }\n            return {};\n        }\n    };\n};\nasync function nr(e, t) {\n    const { placement: n, platform: r, elements: i } = e, o = await (r.isRTL == null ? void 0 : r.isRTL(i.floating)), s = ae(n), a = ze(n), c = he(n) === \"y\", u = [\n        \"left\",\n        \"top\"\n    ].includes(s) ? -1 : 1, l = o && c ? -1 : 1, f = He(t, e);\n    let { mainAxis: h, crossAxis: d, alignmentAxis: m } = typeof f == \"number\" ? {\n        mainAxis: f,\n        crossAxis: 0,\n        alignmentAxis: null\n    } : {\n        mainAxis: f.mainAxis || 0,\n        crossAxis: f.crossAxis || 0,\n        alignmentAxis: f.alignmentAxis\n    };\n    return a && typeof m == \"number\" && (d = a === \"end\" ? m * -1 : m), c ? {\n        x: d * l,\n        y: h * u\n    } : {\n        x: h * u,\n        y: d * l\n    };\n}\nconst rr = function(e) {\n    return e === void 0 && (e = 0), {\n        name: \"offset\",\n        options: e,\n        async fn (t) {\n            var n, r;\n            const { x: i, y: o, placement: s, middlewareData: a } = t, c = await nr(t, e);\n            return s === ((n = a.offset) == null ? void 0 : n.placement) && (r = a.arrow) != null && r.alignmentOffset ? {} : {\n                x: i + c.x,\n                y: o + c.y,\n                data: {\n                    ...c,\n                    placement: s\n                }\n            };\n        }\n    };\n}, ir = function(e) {\n    return e === void 0 && (e = {}), {\n        name: \"shift\",\n        options: e,\n        async fn (t) {\n            const { x: n, y: r, placement: i } = t, { mainAxis: o = !0, crossAxis: s = !1, limiter: a = {\n                fn: (b)=>{\n                    let { x: v, y: x } = b;\n                    return {\n                        x: v,\n                        y: x\n                    };\n                }\n            }, ...c } = He(e, t), u = {\n                x: n,\n                y: r\n            }, l = await Qt(t, c), f = he(ae(i)), h = qt(f);\n            let d = u[h], m = u[f];\n            if (o) {\n                const b = h === \"y\" ? \"top\" : \"left\", v = h === \"y\" ? \"bottom\" : \"right\", x = d + l[b], E = d - l[v];\n                d = Tt(x, d, E);\n            }\n            if (s) {\n                const b = f === \"y\" ? \"top\" : \"left\", v = f === \"y\" ? \"bottom\" : \"right\", x = m + l[b], E = m - l[v];\n                m = Tt(x, m, E);\n            }\n            const p = a.fn({\n                ...t,\n                [h]: d,\n                [f]: m\n            });\n            return {\n                ...p,\n                data: {\n                    x: p.x - n,\n                    y: p.y - r,\n                    enabled: {\n                        [h]: o,\n                        [f]: s\n                    }\n                }\n            };\n        }\n    };\n};\nfunction Ye() {\n    return \"undefined\" < \"u\";\n}\nfunction ge(e) {\n    return Jt(e) ? (e.nodeName || \"\").toLowerCase() : \"#document\";\n}\nfunction j(e) {\n    var t;\n    return (e == null || (t = e.ownerDocument) == null ? void 0 : t.defaultView) || window;\n}\nfunction X(e) {\n    var t;\n    return (t = (Jt(e) ? e.ownerDocument : e.document) || window.document) == null ? void 0 : t.documentElement;\n}\nfunction Jt(e) {\n    return Ye() ? e instanceof Node || e instanceof j(e).Node : !1;\n}\nfunction Y(e) {\n    return Ye() ? e instanceof Element || e instanceof j(e).Element : !1;\n}\nfunction Q(e) {\n    return Ye() ? e instanceof HTMLElement || e instanceof j(e).HTMLElement : !1;\n}\nfunction Pt(e) {\n    return !Ye() || typeof ShadowRoot > \"u\" ? !1 : e instanceof ShadowRoot || e instanceof j(e).ShadowRoot;\n}\nfunction Oe(e) {\n    const { overflow: t, overflowX: n, overflowY: r, display: i } = q(e);\n    return /auto|scroll|overlay|hidden|clip/.test(t + r + n) && ![\n        \"inline\",\n        \"contents\"\n    ].includes(i);\n}\nfunction or(e) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].includes(ge(e));\n}\nfunction qe(e) {\n    return [\n        \":popover-open\",\n        \":modal\"\n    ].some((t)=>{\n        try {\n            return e.matches(t);\n        } catch  {\n            return !1;\n        }\n    });\n}\nfunction ft(e) {\n    const t = dt(), n = Y(e) ? q(e) : e;\n    return [\n        \"transform\",\n        \"translate\",\n        \"scale\",\n        \"rotate\",\n        \"perspective\"\n    ].some((r)=>n[r] ? n[r] !== \"none\" : !1) || (n.containerType ? n.containerType !== \"normal\" : !1) || !t && (n.backdropFilter ? n.backdropFilter !== \"none\" : !1) || !t && (n.filter ? n.filter !== \"none\" : !1) || [\n        \"transform\",\n        \"translate\",\n        \"scale\",\n        \"rotate\",\n        \"perspective\",\n        \"filter\"\n    ].some((r)=>(n.willChange || \"\").includes(r)) || [\n        \"paint\",\n        \"layout\",\n        \"strict\",\n        \"content\"\n    ].some((r)=>(n.contain || \"\").includes(r));\n}\nfunction sr(e) {\n    let t = ie(e);\n    for(; Q(t) && !ve(t);){\n        if (ft(t)) return t;\n        if (qe(t)) return null;\n        t = ie(t);\n    }\n    return null;\n}\nfunction dt() {\n    return typeof CSS > \"u\" || !CSS.supports ? !1 : CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction ve(e) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].includes(ge(e));\n}\nfunction q(e) {\n    return j(e).getComputedStyle(e);\n}\nfunction Ke(e) {\n    return Y(e) ? {\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n    } : {\n        scrollLeft: e.scrollX,\n        scrollTop: e.scrollY\n    };\n}\nfunction ie(e) {\n    if (ge(e) === \"html\") return e;\n    const t = // Step into the shadow DOM of the parent of a slotted node.\n    e.assignedSlot || // DOM Element detected.\n    e.parentNode || // ShadowRoot detected.\n    Pt(e) && e.host || // Fallback.\n    X(e);\n    return Pt(t) ? t.host : t;\n}\nfunction Xt(e) {\n    const t = ie(e);\n    return ve(t) ? e.ownerDocument ? e.ownerDocument.body : e.body : Q(t) && Oe(t) ? t : Xt(t);\n}\nfunction Te(e, t, n) {\n    var r;\n    t === void 0 && (t = []), n === void 0 && (n = !0);\n    const i = Xt(e), o = i === ((r = e.ownerDocument) == null ? void 0 : r.body), s = j(i);\n    if (o) {\n        const a = ot(s);\n        return t.concat(s, s.visualViewport || [], Oe(i) ? i : [], a && n ? Te(a) : []);\n    }\n    return t.concat(i, Te(i, [], n));\n}\nfunction ot(e) {\n    return e.parent && Object.getPrototypeOf(e.parent) ? e.frameElement : null;\n}\nfunction Zt(e) {\n    const t = q(e);\n    let n = parseFloat(t.width) || 0, r = parseFloat(t.height) || 0;\n    const i = Q(e), o = i ? e.offsetWidth : n, s = i ? e.offsetHeight : r, a = $e(n) !== o || $e(r) !== s;\n    return a && (n = o, r = s), {\n        width: n,\n        height: r,\n        $: a\n    };\n}\nfunction pt(e) {\n    return Y(e) ? e : e.contextElement;\n}\nfunction de(e) {\n    const t = pt(e);\n    if (!Q(t)) return G(1);\n    const n = t.getBoundingClientRect(), { width: r, height: i, $: o } = Zt(t);\n    let s = (o ? $e(n.width) : n.width) / r, a = (o ? $e(n.height) : n.height) / i;\n    return (!s || !Number.isFinite(s)) && (s = 1), (!a || !Number.isFinite(a)) && (a = 1), {\n        x: s,\n        y: a\n    };\n}\nconst ar = /* @__PURE__ */ G(0);\nfunction en(e) {\n    const t = j(e);\n    return !dt() || !t.visualViewport ? ar : {\n        x: t.visualViewport.offsetLeft,\n        y: t.visualViewport.offsetTop\n    };\n}\nfunction cr(e, t, n) {\n    return t === void 0 && (t = !1), !n || t && n !== j(e) ? !1 : t;\n}\nfunction ce(e, t, n, r) {\n    t === void 0 && (t = !1), n === void 0 && (n = !1);\n    const i = e.getBoundingClientRect(), o = pt(e);\n    let s = G(1);\n    t && (r ? Y(r) && (s = de(r)) : s = de(e));\n    const a = cr(o, n, r) ? en(o) : G(0);\n    let c = (i.left + a.x) / s.x, u = (i.top + a.y) / s.y, l = i.width / s.x, f = i.height / s.y;\n    if (o) {\n        const h = j(o), d = r && Y(r) ? j(r) : r;\n        let m = h, p = ot(m);\n        for(; p && r && d !== m;){\n            const b = de(p), v = p.getBoundingClientRect(), x = q(p), E = v.left + (p.clientLeft + parseFloat(x.paddingLeft)) * b.x, P = v.top + (p.clientTop + parseFloat(x.paddingTop)) * b.y;\n            c *= b.x, u *= b.y, l *= b.x, f *= b.y, c += E, u += P, m = j(p), p = ot(m);\n        }\n    }\n    return Fe({\n        width: l,\n        height: f,\n        x: c,\n        y: u\n    });\n}\nfunction ht(e, t) {\n    const n = Ke(e).scrollLeft;\n    return t ? t.left + n : ce(X(e)).left + n;\n}\nfunction tn(e, t, n) {\n    n === void 0 && (n = !1);\n    const r = e.getBoundingClientRect(), i = r.left + t.scrollLeft - (n ? 0 : // RTL <body> scrollbar.\n    ht(e, r)), o = r.top + t.scrollTop;\n    return {\n        x: i,\n        y: o\n    };\n}\nfunction ur(e) {\n    let { elements: t, rect: n, offsetParent: r, strategy: i } = e;\n    const o = i === \"fixed\", s = X(r), a = t ? qe(t.floating) : !1;\n    if (r === s || a && o) return n;\n    let c = {\n        scrollLeft: 0,\n        scrollTop: 0\n    }, u = G(1);\n    const l = G(0), f = Q(r);\n    if ((f || !f && !o) && ((ge(r) !== \"body\" || Oe(s)) && (c = Ke(r)), Q(r))) {\n        const d = ce(r);\n        u = de(r), l.x = d.x + r.clientLeft, l.y = d.y + r.clientTop;\n    }\n    const h = s && !f && !o ? tn(s, c, !0) : G(0);\n    return {\n        width: n.width * u.x,\n        height: n.height * u.y,\n        x: n.x * u.x - c.scrollLeft * u.x + l.x + h.x,\n        y: n.y * u.y - c.scrollTop * u.y + l.y + h.y\n    };\n}\nfunction lr(e) {\n    return Array.from(e.getClientRects());\n}\nfunction fr(e) {\n    const t = X(e), n = Ke(e), r = e.ownerDocument.body, i = se(t.scrollWidth, t.clientWidth, r.scrollWidth, r.clientWidth), o = se(t.scrollHeight, t.clientHeight, r.scrollHeight, r.clientHeight);\n    let s = -n.scrollLeft + ht(e);\n    const a = -n.scrollTop;\n    return q(r).direction === \"rtl\" && (s += se(t.clientWidth, r.clientWidth) - i), {\n        width: i,\n        height: o,\n        x: s,\n        y: a\n    };\n}\nfunction dr(e, t) {\n    const n = j(e), r = X(e), i = n.visualViewport;\n    let o = r.clientWidth, s = r.clientHeight, a = 0, c = 0;\n    if (i) {\n        o = i.width, s = i.height;\n        const u = dt();\n        (!u || u && t === \"fixed\") && (a = i.offsetLeft, c = i.offsetTop);\n    }\n    return {\n        width: o,\n        height: s,\n        x: a,\n        y: c\n    };\n}\nfunction pr(e, t) {\n    const n = ce(e, !0, t === \"fixed\"), r = n.top + e.clientTop, i = n.left + e.clientLeft, o = Q(e) ? de(e) : G(1), s = e.clientWidth * o.x, a = e.clientHeight * o.y, c = i * o.x, u = r * o.y;\n    return {\n        width: s,\n        height: a,\n        x: c,\n        y: u\n    };\n}\nfunction Ot(e, t, n) {\n    let r;\n    if (t === \"viewport\") r = dr(e, n);\n    else if (t === \"document\") r = fr(X(e));\n    else if (Y(t)) r = pr(t, n);\n    else {\n        const i = en(e);\n        r = {\n            x: t.x - i.x,\n            y: t.y - i.y,\n            width: t.width,\n            height: t.height\n        };\n    }\n    return Fe(r);\n}\nfunction nn(e, t) {\n    const n = ie(e);\n    return n === t || !Y(n) || ve(n) ? !1 : q(n).position === \"fixed\" || nn(n, t);\n}\nfunction hr(e, t) {\n    const n = t.get(e);\n    if (n) return n;\n    let r = Te(e, [], !1).filter((a)=>Y(a) && ge(a) !== \"body\"), i = null;\n    const o = q(e).position === \"fixed\";\n    let s = o ? ie(e) : e;\n    for(; Y(s) && !ve(s);){\n        const a = q(s), c = ft(s);\n        !c && a.position === \"fixed\" && (i = null), (o ? !c && !i : !c && a.position === \"static\" && !!i && [\n            \"absolute\",\n            \"fixed\"\n        ].includes(i.position) || Oe(s) && !c && nn(e, s)) ? r = r.filter((l)=>l !== s) : i = a, s = ie(s);\n    }\n    return t.set(e, r), r;\n}\nfunction vr(e) {\n    let { element: t, boundary: n, rootBoundary: r, strategy: i } = e;\n    const s = [\n        ...n === \"clippingAncestors\" ? qe(t) ? [] : hr(t, this._c) : [].concat(n),\n        r\n    ], a = s[0], c = s.reduce((u, l)=>{\n        const f = Ot(t, l, i);\n        return u.top = se(f.top, u.top), u.right = De(f.right, u.right), u.bottom = De(f.bottom, u.bottom), u.left = se(f.left, u.left), u;\n    }, Ot(t, a, i));\n    return {\n        width: c.right - c.left,\n        height: c.bottom - c.top,\n        x: c.left,\n        y: c.top\n    };\n}\nfunction mr(e) {\n    const { width: t, height: n } = Zt(e);\n    return {\n        width: t,\n        height: n\n    };\n}\nfunction br(e, t, n) {\n    const r = Q(t), i = X(t), o = n === \"fixed\", s = ce(e, !0, o, t);\n    let a = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    const c = G(0);\n    if (r || !r && !o) if ((ge(t) !== \"body\" || Oe(i)) && (a = Ke(t)), r) {\n        const h = ce(t, !0, o, t);\n        c.x = h.x + t.clientLeft, c.y = h.y + t.clientTop;\n    } else i && (c.x = ht(i));\n    const u = i && !r && !o ? tn(i, a) : G(0), l = s.left + a.scrollLeft - c.x - u.x, f = s.top + a.scrollTop - c.y - u.y;\n    return {\n        x: l,\n        y: f,\n        width: s.width,\n        height: s.height\n    };\n}\nfunction Xe(e) {\n    return q(e).position === \"static\";\n}\nfunction At(e, t) {\n    if (!Q(e) || q(e).position === \"fixed\") return null;\n    if (t) return t(e);\n    let n = e.offsetParent;\n    return X(e) === n && (n = n.ownerDocument.body), n;\n}\nfunction rn(e, t) {\n    const n = j(e);\n    if (qe(e)) return n;\n    if (!Q(e)) {\n        let i = ie(e);\n        for(; i && !ve(i);){\n            if (Y(i) && !Xe(i)) return i;\n            i = ie(i);\n        }\n        return n;\n    }\n    let r = At(e, t);\n    for(; r && or(r) && Xe(r);)r = At(r, t);\n    return r && ve(r) && Xe(r) && !ft(r) ? n : r || sr(e) || n;\n}\nconst gr = async function(e) {\n    const t = this.getOffsetParent || rn, n = this.getDimensions, r = await n(e.floating);\n    return {\n        reference: br(e.reference, await t(e.floating), e.strategy),\n        floating: {\n            x: 0,\n            y: 0,\n            width: r.width,\n            height: r.height\n        }\n    };\n};\nfunction yr(e) {\n    return q(e).direction === \"rtl\";\n}\nconst wr = {\n    convertOffsetParentRelativeRectToViewportRelativeRect: ur,\n    getDocumentElement: X,\n    getClippingRect: vr,\n    getOffsetParent: rn,\n    getElementRects: gr,\n    getClientRects: lr,\n    getDimensions: mr,\n    getScale: de,\n    isElement: Y,\n    isRTL: yr\n};\nfunction on(e, t) {\n    return e.x === t.x && e.y === t.y && e.width === t.width && e.height === t.height;\n}\nfunction xr(e, t) {\n    let n = null, r;\n    const i = X(e);\n    function o() {\n        var a;\n        clearTimeout(r), (a = n) == null || a.disconnect(), n = null;\n    }\n    function s(a, c) {\n        a === void 0 && (a = !1), c === void 0 && (c = 1), o();\n        const u = e.getBoundingClientRect(), { left: l, top: f, width: h, height: d } = u;\n        if (a || t(), !h || !d) return;\n        const m = Le(f), p = Le(i.clientWidth - (l + h)), b = Le(i.clientHeight - (f + d)), v = Le(l), E = {\n            rootMargin: -m + \"px \" + -p + \"px \" + -b + \"px \" + -v + \"px\",\n            threshold: se(0, De(1, c)) || 1\n        };\n        let P = !0;\n        function g(S) {\n            const C = S[0].intersectionRatio;\n            if (C !== c) {\n                if (!P) return s();\n                C ? s(!1, C) : r = setTimeout(()=>{\n                    s(!1, 1e-7);\n                }, 1e3);\n            }\n            C === 1 && !on(u, e.getBoundingClientRect()) && s(), P = !1;\n        }\n        try {\n            n = new IntersectionObserver(g, {\n                ...E,\n                // Handle <iframe>s\n                root: i.ownerDocument\n            });\n        } catch  {\n            n = new IntersectionObserver(g, E);\n        }\n        n.observe(e);\n    }\n    return s(!0), o;\n}\nfunction Sr(e, t, n, r) {\n    r === void 0 && (r = {});\n    const { ancestorScroll: i = !0, ancestorResize: o = !0, elementResize: s = typeof ResizeObserver == \"function\", layoutShift: a = typeof IntersectionObserver == \"function\", animationFrame: c = !1 } = r, u = pt(e), l = i || o ? [\n        ...u ? Te(u) : [],\n        ...Te(t)\n    ] : [];\n    l.forEach((v)=>{\n        i && v.addEventListener(\"scroll\", n, {\n            passive: !0\n        }), o && v.addEventListener(\"resize\", n);\n    });\n    const f = u && a ? xr(u, n) : null;\n    let h = -1, d = null;\n    s && (d = new ResizeObserver((v)=>{\n        let [x] = v;\n        x && x.target === u && d && (d.unobserve(t), cancelAnimationFrame(h), h = requestAnimationFrame(()=>{\n            var E;\n            (E = d) == null || E.observe(t);\n        })), n();\n    }), u && !c && d.observe(u), d.observe(t));\n    let m, p = c ? ce(e) : null;\n    c && b();\n    function b() {\n        const v = ce(e);\n        p && !on(p, v) && n(), p = v, m = requestAnimationFrame(b);\n    }\n    return n(), ()=>{\n        var v;\n        l.forEach((x)=>{\n            i && x.removeEventListener(\"scroll\", n), o && x.removeEventListener(\"resize\", n);\n        }), f == null || f(), (v = d) == null || v.disconnect(), d = null, c && cancelAnimationFrame(m);\n    };\n}\nconst Er = rr, Tr = ir, Cr = tr, Pr = (e, t, n)=>{\n    const r = /* @__PURE__ */ new Map(), i = {\n        platform: wr,\n        ...n\n    }, o = {\n        ...i.platform,\n        _c: r\n    };\n    return er(e, t, {\n        ...i,\n        platform: o\n    });\n};\nvar Do = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction Or(e) {\n    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nvar Me = {\n    exports: {}\n}, Ar = Me.exports, kt;\nfunction kr() {\n    return kt || (kt = 1, function(e) {\n        (function(t, n) {\n            e.exports ? e.exports = n() : t.log = n();\n        })(Ar, function() {\n            var t = function() {}, n = \"undefined\", r = \"undefined\" !== n && typeof window.navigator !== n && /Trident\\/|MSIE /.test(window.navigator.userAgent), i = [\n                \"trace\",\n                \"debug\",\n                \"info\",\n                \"warn\",\n                \"error\"\n            ], o = {}, s = null;\n            function a(p, b) {\n                var v = p[b];\n                if (typeof v.bind == \"function\") return v.bind(p);\n                try {\n                    return Function.prototype.bind.call(v, p);\n                } catch  {\n                    return function() {\n                        return Function.prototype.apply.apply(v, [\n                            p,\n                            arguments\n                        ]);\n                    };\n                }\n            }\n            function c() {\n                console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [\n                    console,\n                    arguments\n                ])), console.trace && console.trace();\n            }\n            function u(p) {\n                return p === \"debug\" && (p = \"log\"), typeof console === n ? !1 : p === \"trace\" && r ? c : console[p] !== void 0 ? a(console, p) : console.log !== void 0 ? a(console, \"log\") : t;\n            }\n            function l() {\n                for(var p = this.getLevel(), b = 0; b < i.length; b++){\n                    var v = i[b];\n                    this[v] = b < p ? t : this.methodFactory(v, p, this.name);\n                }\n                if (this.log = this.debug, typeof console === n && p < this.levels.SILENT) return \"No console available for logging\";\n            }\n            function f(p) {\n                return function() {\n                    typeof console !== n && (l.call(this), this[p].apply(this, arguments));\n                };\n            }\n            function h(p, b, v) {\n                return u(p) || f.apply(this, arguments);\n            }\n            function d(p, b) {\n                var v = this, x, E, P, g = \"loglevel\";\n                typeof p == \"string\" ? g += \":\" + p : typeof p == \"symbol\" && (g = void 0);\n                function S(T) {\n                    var L = (i[T] || \"silent\").toUpperCase();\n                    if (!(\"undefined\" === n || !g)) {\n                        try {\n                            window.localStorage[g] = L;\n                            return;\n                        } catch  {}\n                        try {\n                            window.document.cookie = encodeURIComponent(g) + \"=\" + L + \";\";\n                        } catch  {}\n                    }\n                }\n                function C() {\n                    var T;\n                    if (!(\"undefined\" === n || !g)) {\n                        try {\n                            T = window.localStorage[g];\n                        } catch  {}\n                        if (typeof T === n) try {\n                            var L = window.document.cookie, oe = encodeURIComponent(g), K = L.indexOf(oe + \"=\");\n                            K !== -1 && (T = /^([^;]+)/.exec(L.slice(K + oe.length + 1))[1]);\n                        } catch  {}\n                        return v.levels[T] === void 0 && (T = void 0), T;\n                    }\n                }\n                function $() {\n                    if (!(\"undefined\" === n || !g)) {\n                        try {\n                            window.localStorage.removeItem(g);\n                        } catch  {}\n                        try {\n                            window.document.cookie = encodeURIComponent(g) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n                        } catch  {}\n                    }\n                }\n                function I(T) {\n                    var L = T;\n                    if (typeof L == \"string\" && v.levels[L.toUpperCase()] !== void 0 && (L = v.levels[L.toUpperCase()]), typeof L == \"number\" && L >= 0 && L <= v.levels.SILENT) return L;\n                    throw new TypeError(\"log.setLevel() called with invalid level: \" + T);\n                }\n                v.name = p, v.levels = {\n                    TRACE: 0,\n                    DEBUG: 1,\n                    INFO: 2,\n                    WARN: 3,\n                    ERROR: 4,\n                    SILENT: 5\n                }, v.methodFactory = b || h, v.getLevel = function() {\n                    return P ?? E ?? x;\n                }, v.setLevel = function(T, L) {\n                    return P = I(T), L !== !1 && S(P), l.call(v);\n                }, v.setDefaultLevel = function(T) {\n                    E = I(T), C() || v.setLevel(T, !1);\n                }, v.resetLevel = function() {\n                    P = null, $(), l.call(v);\n                }, v.enableAll = function(T) {\n                    v.setLevel(v.levels.TRACE, T);\n                }, v.disableAll = function(T) {\n                    v.setLevel(v.levels.SILENT, T);\n                }, v.rebuild = function() {\n                    if (s !== v && (x = I(s.getLevel())), l.call(v), s === v) for(var T in o)o[T].rebuild();\n                }, x = I(s ? s.getLevel() : \"WARN\");\n                var z = C();\n                z != null && (P = I(z)), l.call(v);\n            }\n            s = new d(), s.getLogger = function(b) {\n                if (typeof b != \"symbol\" && typeof b != \"string\" || b === \"\") throw new TypeError(\"You must supply a name when creating a logger.\");\n                var v = o[b];\n                return v || (v = o[b] = new d(b, s.methodFactory)), v;\n            };\n            var m = \"undefined\" !== n ? window.log : void 0;\n            return s.noConflict = function() {\n                return \"undefined\" !== n && window.log === s && (window.log = m), s;\n            }, s.getLoggers = function() {\n                return o;\n            }, s.default = s, s;\n        });\n    }(Me)), Me.exports;\n}\nvar Lr = kr();\nconst _r = /* @__PURE__ */ Or(Lr);\nvar st = function(e, t) {\n    return st = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(n, r) {\n        n.__proto__ = r;\n    } || function(n, r) {\n        for(var i in r)Object.prototype.hasOwnProperty.call(r, i) && (n[i] = r[i]);\n    }, st(e, t);\n};\nfunction ee(e, t) {\n    if (typeof t != \"function\" && t !== null) throw new TypeError(\"Class extends value \" + String(t) + \" is not a constructor or null\");\n    st(e, t);\n    function n() {\n        this.constructor = e;\n    }\n    e.prototype = t === null ? Object.create(t) : (n.prototype = t.prototype, new n());\n}\nfunction Ir(e, t, n, r) {\n    function i(o) {\n        return o instanceof n ? o : new n(function(s) {\n            s(o);\n        });\n    }\n    return new (n || (n = Promise))(function(o, s) {\n        function a(l) {\n            try {\n                u(r.next(l));\n            } catch (f) {\n                s(f);\n            }\n        }\n        function c(l) {\n            try {\n                u(r.throw(l));\n            } catch (f) {\n                s(f);\n            }\n        }\n        function u(l) {\n            l.done ? o(l.value) : i(l.value).then(a, c);\n        }\n        u((r = r.apply(e, t || [])).next());\n    });\n}\nfunction sn(e, t) {\n    var n = {\n        label: 0,\n        sent: function() {\n            if (o[0] & 1) throw o[1];\n            return o[1];\n        },\n        trys: [],\n        ops: []\n    }, r, i, o, s = Object.create((typeof Iterator == \"function\" ? Iterator : Object).prototype);\n    return s.next = a(0), s.throw = a(1), s.return = a(2), typeof Symbol == \"function\" && (s[Symbol.iterator] = function() {\n        return this;\n    }), s;\n    function a(u) {\n        return function(l) {\n            return c([\n                u,\n                l\n            ]);\n        };\n    }\n    function c(u) {\n        if (r) throw new TypeError(\"Generator is already executing.\");\n        for(; s && (s = 0, u[0] && (n = 0)), n;)try {\n            if (r = 1, i && (o = u[0] & 2 ? i.return : u[0] ? i.throw || ((o = i.return) && o.call(i), 0) : i.next) && !(o = o.call(i, u[1])).done) return o;\n            switch(i = 0, o && (u = [\n                u[0] & 2,\n                o.value\n            ]), u[0]){\n                case 0:\n                case 1:\n                    o = u;\n                    break;\n                case 4:\n                    return n.label++, {\n                        value: u[1],\n                        done: !1\n                    };\n                case 5:\n                    n.label++, i = u[1], u = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    u = n.ops.pop(), n.trys.pop();\n                    continue;\n                default:\n                    if (o = n.trys, !(o = o.length > 0 && o[o.length - 1]) && (u[0] === 6 || u[0] === 2)) {\n                        n = 0;\n                        continue;\n                    }\n                    if (u[0] === 3 && (!o || u[1] > o[0] && u[1] < o[3])) {\n                        n.label = u[1];\n                        break;\n                    }\n                    if (u[0] === 6 && n.label < o[1]) {\n                        n.label = o[1], o = u;\n                        break;\n                    }\n                    if (o && n.label < o[2]) {\n                        n.label = o[2], n.ops.push(u);\n                        break;\n                    }\n                    o[2] && n.ops.pop(), n.trys.pop();\n                    continue;\n            }\n            u = t.call(e, n);\n        } catch (l) {\n            u = [\n                6,\n                l\n            ], i = 0;\n        } finally{\n            r = o = 0;\n        }\n        if (u[0] & 5) throw u[1];\n        return {\n            value: u[0] ? u[1] : void 0,\n            done: !0\n        };\n    }\n}\nfunction me(e) {\n    var t = typeof Symbol == \"function\" && Symbol.iterator, n = t && e[t], r = 0;\n    if (n) return n.call(e);\n    if (e && typeof e.length == \"number\") return {\n        next: function() {\n            return e && r >= e.length && (e = void 0), {\n                value: e && e[r++],\n                done: !e\n            };\n        }\n    };\n    throw new TypeError(t ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction ue(e, t) {\n    var n = typeof Symbol == \"function\" && e[Symbol.iterator];\n    if (!n) return e;\n    var r = n.call(e), i, o = [], s;\n    try {\n        for(; (t === void 0 || t-- > 0) && !(i = r.next()).done;)o.push(i.value);\n    } catch (a) {\n        s = {\n            error: a\n        };\n    } finally{\n        try {\n            i && !i.done && (n = r.return) && n.call(r);\n        } finally{\n            if (s) throw s.error;\n        }\n    }\n    return o;\n}\nfunction be(e, t, n) {\n    if (n || arguments.length === 2) for(var r = 0, i = t.length, o; r < i; r++)(o || !(r in t)) && (o || (o = Array.prototype.slice.call(t, 0, r)), o[r] = t[r]);\n    return e.concat(o || Array.prototype.slice.call(t));\n}\nfunction pe(e) {\n    return this instanceof pe ? (this.v = e, this) : new pe(e);\n}\nfunction Mr(e, t, n) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var r = n.apply(e, t || []), i, o = [];\n    return i = Object.create((typeof AsyncIterator == \"function\" ? AsyncIterator : Object).prototype), a(\"next\"), a(\"throw\"), a(\"return\", s), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function s(d) {\n        return function(m) {\n            return Promise.resolve(m).then(d, f);\n        };\n    }\n    function a(d, m) {\n        r[d] && (i[d] = function(p) {\n            return new Promise(function(b, v) {\n                o.push([\n                    d,\n                    p,\n                    b,\n                    v\n                ]) > 1 || c(d, p);\n            });\n        }, m && (i[d] = m(i[d])));\n    }\n    function c(d, m) {\n        try {\n            u(r[d](m));\n        } catch (p) {\n            h(o[0][3], p);\n        }\n    }\n    function u(d) {\n        d.value instanceof pe ? Promise.resolve(d.value.v).then(l, f) : h(o[0][2], d);\n    }\n    function l(d) {\n        c(\"next\", d);\n    }\n    function f(d) {\n        c(\"throw\", d);\n    }\n    function h(d, m) {\n        d(m), o.shift(), o.length && c(o[0][0], o[0][1]);\n    }\n}\nfunction Rr(e) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var t = e[Symbol.asyncIterator], n;\n    return t ? t.call(e) : (e = typeof me == \"function\" ? me(e) : e[Symbol.iterator](), n = {}, r(\"next\"), r(\"throw\"), r(\"return\"), n[Symbol.asyncIterator] = function() {\n        return this;\n    }, n);\n    function r(o) {\n        n[o] = e[o] && function(s) {\n            return new Promise(function(a, c) {\n                s = e[o](s), i(a, c, s.done, s.value);\n            });\n        };\n    }\n    function i(o, s, a, c) {\n        Promise.resolve(c).then(function(u) {\n            o({\n                value: u,\n                done: a\n            });\n        }, s);\n    }\n}\nfunction O(e) {\n    return typeof e == \"function\";\n}\nfunction vt(e) {\n    var t = function(r) {\n        Error.call(r), r.stack = new Error().stack;\n    }, n = e(t);\n    return n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n;\n}\nvar Ze = vt(function(e) {\n    return function(n) {\n        e(this), this.message = n ? n.length + ` errors occurred during unsubscription:\n` + n.map(function(r, i) {\n            return i + 1 + \") \" + r.toString();\n        }).join(`\n  `) : \"\", this.name = \"UnsubscriptionError\", this.errors = n;\n    };\n});\nfunction Ue(e, t) {\n    if (e) {\n        var n = e.indexOf(t);\n        0 <= n && e.splice(n, 1);\n    }\n}\nvar Ae = function() {\n    function e(t) {\n        this.initialTeardown = t, this.closed = !1, this._parentage = null, this._finalizers = null;\n    }\n    return e.prototype.unsubscribe = function() {\n        var t, n, r, i, o;\n        if (!this.closed) {\n            this.closed = !0;\n            var s = this._parentage;\n            if (s) if (this._parentage = null, Array.isArray(s)) try {\n                for(var a = me(s), c = a.next(); !c.done; c = a.next()){\n                    var u = c.value;\n                    u.remove(this);\n                }\n            } catch (p) {\n                t = {\n                    error: p\n                };\n            } finally{\n                try {\n                    c && !c.done && (n = a.return) && n.call(a);\n                } finally{\n                    if (t) throw t.error;\n                }\n            }\n            else s.remove(this);\n            var l = this.initialTeardown;\n            if (O(l)) try {\n                l();\n            } catch (p) {\n                o = p instanceof Ze ? p.errors : [\n                    p\n                ];\n            }\n            var f = this._finalizers;\n            if (f) {\n                this._finalizers = null;\n                try {\n                    for(var h = me(f), d = h.next(); !d.done; d = h.next()){\n                        var m = d.value;\n                        try {\n                            Lt(m);\n                        } catch (p) {\n                            o = o ?? [], p instanceof Ze ? o = be(be([], ue(o)), ue(p.errors)) : o.push(p);\n                        }\n                    }\n                } catch (p) {\n                    r = {\n                        error: p\n                    };\n                } finally{\n                    try {\n                        d && !d.done && (i = h.return) && i.call(h);\n                    } finally{\n                        if (r) throw r.error;\n                    }\n                }\n            }\n            if (o) throw new Ze(o);\n        }\n    }, e.prototype.add = function(t) {\n        var n;\n        if (t && t !== this) if (this.closed) Lt(t);\n        else {\n            if (t instanceof e) {\n                if (t.closed || t._hasParent(this)) return;\n                t._addParent(this);\n            }\n            (this._finalizers = (n = this._finalizers) !== null && n !== void 0 ? n : []).push(t);\n        }\n    }, e.prototype._hasParent = function(t) {\n        var n = this._parentage;\n        return n === t || Array.isArray(n) && n.includes(t);\n    }, e.prototype._addParent = function(t) {\n        var n = this._parentage;\n        this._parentage = Array.isArray(n) ? (n.push(t), n) : n ? [\n            n,\n            t\n        ] : t;\n    }, e.prototype._removeParent = function(t) {\n        var n = this._parentage;\n        n === t ? this._parentage = null : Array.isArray(n) && Ue(n, t);\n    }, e.prototype.remove = function(t) {\n        var n = this._finalizers;\n        n && Ue(n, t), t instanceof e && t._removeParent(this);\n    }, e.EMPTY = function() {\n        var t = new e();\n        return t.closed = !0, t;\n    }(), e;\n}(), an = Ae.EMPTY;\nfunction cn(e) {\n    return e instanceof Ae || e && \"closed\" in e && O(e.remove) && O(e.add) && O(e.unsubscribe);\n}\nfunction Lt(e) {\n    O(e) ? e() : e.unsubscribe();\n}\nvar Dr = {\n    Promise: void 0\n}, $r = {\n    setTimeout: function(e, t) {\n        for(var n = [], r = 2; r < arguments.length; r++)n[r - 2] = arguments[r];\n        return setTimeout.apply(void 0, be([\n            e,\n            t\n        ], ue(n)));\n    },\n    clearTimeout: function(e) {\n        return clearTimeout(e);\n    },\n    delegate: void 0\n};\nfunction un(e) {\n    $r.setTimeout(function() {\n        throw e;\n    });\n}\nfunction je() {}\nfunction Re(e) {\n    e();\n}\nvar mt = function(e) {\n    ee(t, e);\n    function t(n) {\n        var r = e.call(this) || this;\n        return r.isStopped = !1, n ? (r.destination = n, cn(n) && n.add(r)) : r.destination = Ur, r;\n    }\n    return t.create = function(n, r, i) {\n        return new Ce(n, r, i);\n    }, t.prototype.next = function(n) {\n        this.isStopped || this._next(n);\n    }, t.prototype.error = function(n) {\n        this.isStopped || (this.isStopped = !0, this._error(n));\n    }, t.prototype.complete = function() {\n        this.isStopped || (this.isStopped = !0, this._complete());\n    }, t.prototype.unsubscribe = function() {\n        this.closed || (this.isStopped = !0, e.prototype.unsubscribe.call(this), this.destination = null);\n    }, t.prototype._next = function(n) {\n        this.destination.next(n);\n    }, t.prototype._error = function(n) {\n        try {\n            this.destination.error(n);\n        } finally{\n            this.unsubscribe();\n        }\n    }, t.prototype._complete = function() {\n        try {\n            this.destination.complete();\n        } finally{\n            this.unsubscribe();\n        }\n    }, t;\n}(Ae), Nr = function() {\n    function e(t) {\n        this.partialObserver = t;\n    }\n    return e.prototype.next = function(t) {\n        var n = this.partialObserver;\n        if (n.next) try {\n            n.next(t);\n        } catch (r) {\n            _e(r);\n        }\n    }, e.prototype.error = function(t) {\n        var n = this.partialObserver;\n        if (n.error) try {\n            n.error(t);\n        } catch (r) {\n            _e(r);\n        }\n        else _e(t);\n    }, e.prototype.complete = function() {\n        var t = this.partialObserver;\n        if (t.complete) try {\n            t.complete();\n        } catch (n) {\n            _e(n);\n        }\n    }, e;\n}(), Ce = function(e) {\n    ee(t, e);\n    function t(n, r, i) {\n        var o = e.call(this) || this, s;\n        return O(n) || !n ? s = {\n            next: n ?? void 0,\n            error: r ?? void 0,\n            complete: i ?? void 0\n        } : s = n, o.destination = new Nr(s), o;\n    }\n    return t;\n}(mt);\nfunction _e(e) {\n    un(e);\n}\nfunction Fr(e) {\n    throw e;\n}\nvar Ur = {\n    closed: !0,\n    next: je,\n    error: Fr,\n    complete: je\n}, bt = function() {\n    return typeof Symbol == \"function\" && Symbol.observable || \"@@observable\";\n}();\nfunction gt(e) {\n    return e;\n}\nfunction jr(e) {\n    return e.length === 0 ? gt : e.length === 1 ? e[0] : function(n) {\n        return e.reduce(function(r, i) {\n            return i(r);\n        }, n);\n    };\n}\nvar k = function() {\n    function e(t) {\n        t && (this._subscribe = t);\n    }\n    return e.prototype.lift = function(t) {\n        var n = new e();\n        return n.source = this, n.operator = t, n;\n    }, e.prototype.subscribe = function(t, n, r) {\n        var i = this, o = Br(t) ? t : new Ce(t, n, r);\n        return Re(function() {\n            var s = i, a = s.operator, c = s.source;\n            o.add(a ? a.call(o, c) : c ? i._subscribe(o) : i._trySubscribe(o));\n        }), o;\n    }, e.prototype._trySubscribe = function(t) {\n        try {\n            return this._subscribe(t);\n        } catch (n) {\n            t.error(n);\n        }\n    }, e.prototype.forEach = function(t, n) {\n        var r = this;\n        return n = _t(n), new n(function(i, o) {\n            var s = new Ce({\n                next: function(a) {\n                    try {\n                        t(a);\n                    } catch (c) {\n                        o(c), s.unsubscribe();\n                    }\n                },\n                error: o,\n                complete: i\n            });\n            r.subscribe(s);\n        });\n    }, e.prototype._subscribe = function(t) {\n        var n;\n        return (n = this.source) === null || n === void 0 ? void 0 : n.subscribe(t);\n    }, e.prototype[bt] = function() {\n        return this;\n    }, e.prototype.pipe = function() {\n        for(var t = [], n = 0; n < arguments.length; n++)t[n] = arguments[n];\n        return jr(t)(this);\n    }, e.prototype.toPromise = function(t) {\n        var n = this;\n        return t = _t(t), new t(function(r, i) {\n            var o;\n            n.subscribe(function(s) {\n                return o = s;\n            }, function(s) {\n                return i(s);\n            }, function() {\n                return r(o);\n            });\n        });\n    }, e.create = function(t) {\n        return new e(t);\n    }, e;\n}();\nfunction _t(e) {\n    var t;\n    return (t = e ?? Dr.Promise) !== null && t !== void 0 ? t : Promise;\n}\nfunction Wr(e) {\n    return e && O(e.next) && O(e.error) && O(e.complete);\n}\nfunction Br(e) {\n    return e && e instanceof mt || Wr(e) && cn(e);\n}\nfunction Vr(e) {\n    return O(e == null ? void 0 : e.lift);\n}\nfunction U(e) {\n    return function(t) {\n        if (Vr(t)) return t.lift(function(n) {\n            try {\n                return e(n, this);\n            } catch (r) {\n                this.error(r);\n            }\n        });\n        throw new TypeError(\"Unable to lift unknown Observable type\");\n    };\n}\nfunction B(e, t, n, r, i) {\n    return new Hr(e, t, n, r, i);\n}\nvar Hr = function(e) {\n    ee(t, e);\n    function t(n, r, i, o, s, a) {\n        var c = e.call(this, n) || this;\n        return c.onFinalize = s, c.shouldUnsubscribe = a, c._next = r ? function(u) {\n            try {\n                r(u);\n            } catch (l) {\n                n.error(l);\n            }\n        } : e.prototype._next, c._error = o ? function(u) {\n            try {\n                o(u);\n            } catch (l) {\n                n.error(l);\n            } finally{\n                this.unsubscribe();\n            }\n        } : e.prototype._error, c._complete = i ? function() {\n            try {\n                i();\n            } catch (u) {\n                n.error(u);\n            } finally{\n                this.unsubscribe();\n            }\n        } : e.prototype._complete, c;\n    }\n    return t.prototype.unsubscribe = function() {\n        var n;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            var r = this.closed;\n            e.prototype.unsubscribe.call(this), !r && ((n = this.onFinalize) === null || n === void 0 || n.call(this));\n        }\n    }, t;\n}(mt), zr = vt(function(e) {\n    return function() {\n        e(this), this.name = \"ObjectUnsubscribedError\", this.message = \"object unsubscribed\";\n    };\n}), J = function(e) {\n    ee(t, e);\n    function t() {\n        var n = e.call(this) || this;\n        return n.closed = !1, n.currentObservers = null, n.observers = [], n.isStopped = !1, n.hasError = !1, n.thrownError = null, n;\n    }\n    return t.prototype.lift = function(n) {\n        var r = new It(this, this);\n        return r.operator = n, r;\n    }, t.prototype._throwIfClosed = function() {\n        if (this.closed) throw new zr();\n    }, t.prototype.next = function(n) {\n        var r = this;\n        Re(function() {\n            var i, o;\n            if (r._throwIfClosed(), !r.isStopped) {\n                r.currentObservers || (r.currentObservers = Array.from(r.observers));\n                try {\n                    for(var s = me(r.currentObservers), a = s.next(); !a.done; a = s.next()){\n                        var c = a.value;\n                        c.next(n);\n                    }\n                } catch (u) {\n                    i = {\n                        error: u\n                    };\n                } finally{\n                    try {\n                        a && !a.done && (o = s.return) && o.call(s);\n                    } finally{\n                        if (i) throw i.error;\n                    }\n                }\n            }\n        });\n    }, t.prototype.error = function(n) {\n        var r = this;\n        Re(function() {\n            if (r._throwIfClosed(), !r.isStopped) {\n                r.hasError = r.isStopped = !0, r.thrownError = n;\n                for(var i = r.observers; i.length;)i.shift().error(n);\n            }\n        });\n    }, t.prototype.complete = function() {\n        var n = this;\n        Re(function() {\n            if (n._throwIfClosed(), !n.isStopped) {\n                n.isStopped = !0;\n                for(var r = n.observers; r.length;)r.shift().complete();\n            }\n        });\n    }, t.prototype.unsubscribe = function() {\n        this.isStopped = this.closed = !0, this.observers = this.currentObservers = null;\n    }, Object.defineProperty(t.prototype, \"observed\", {\n        get: function() {\n            var n;\n            return ((n = this.observers) === null || n === void 0 ? void 0 : n.length) > 0;\n        },\n        enumerable: !1,\n        configurable: !0\n    }), t.prototype._trySubscribe = function(n) {\n        return this._throwIfClosed(), e.prototype._trySubscribe.call(this, n);\n    }, t.prototype._subscribe = function(n) {\n        return this._throwIfClosed(), this._checkFinalizedStatuses(n), this._innerSubscribe(n);\n    }, t.prototype._innerSubscribe = function(n) {\n        var r = this, i = this, o = i.hasError, s = i.isStopped, a = i.observers;\n        return o || s ? an : (this.currentObservers = null, a.push(n), new Ae(function() {\n            r.currentObservers = null, Ue(a, n);\n        }));\n    }, t.prototype._checkFinalizedStatuses = function(n) {\n        var r = this, i = r.hasError, o = r.thrownError, s = r.isStopped;\n        i ? n.error(o) : s && n.complete();\n    }, t.prototype.asObservable = function() {\n        var n = new k();\n        return n.source = this, n;\n    }, t.create = function(n, r) {\n        return new It(n, r);\n    }, t;\n}(k), It = function(e) {\n    ee(t, e);\n    function t(n, r) {\n        var i = e.call(this) || this;\n        return i.destination = n, i.source = r, i;\n    }\n    return t.prototype.next = function(n) {\n        var r, i;\n        (i = (r = this.destination) === null || r === void 0 ? void 0 : r.next) === null || i === void 0 || i.call(r, n);\n    }, t.prototype.error = function(n) {\n        var r, i;\n        (i = (r = this.destination) === null || r === void 0 ? void 0 : r.error) === null || i === void 0 || i.call(r, n);\n    }, t.prototype.complete = function() {\n        var n, r;\n        (r = (n = this.destination) === null || n === void 0 ? void 0 : n.complete) === null || r === void 0 || r.call(n);\n    }, t.prototype._subscribe = function(n) {\n        var r, i;\n        return (i = (r = this.source) === null || r === void 0 ? void 0 : r.subscribe(n)) !== null && i !== void 0 ? i : an;\n    }, t;\n}(J), ln = function(e) {\n    ee(t, e);\n    function t(n) {\n        var r = e.call(this) || this;\n        return r._value = n, r;\n    }\n    return Object.defineProperty(t.prototype, \"value\", {\n        get: function() {\n            return this.getValue();\n        },\n        enumerable: !1,\n        configurable: !0\n    }), t.prototype._subscribe = function(n) {\n        var r = e.prototype._subscribe.call(this, n);\n        return !r.closed && n.next(this._value), r;\n    }, t.prototype.getValue = function() {\n        var n = this, r = n.hasError, i = n.thrownError, o = n._value;\n        if (r) throw i;\n        return this._throwIfClosed(), o;\n    }, t.prototype.next = function(n) {\n        e.prototype.next.call(this, this._value = n);\n    }, t;\n}(J), Yr = {\n    now: function() {\n        return Date.now();\n    }\n}, qr = function(e) {\n    ee(t, e);\n    function t(n, r) {\n        return e.call(this) || this;\n    }\n    return t.prototype.schedule = function(n, r) {\n        return this;\n    }, t;\n}(Ae), Mt = {\n    setInterval: function(e, t) {\n        for(var n = [], r = 2; r < arguments.length; r++)n[r - 2] = arguments[r];\n        return setInterval.apply(void 0, be([\n            e,\n            t\n        ], ue(n)));\n    },\n    clearInterval: function(e) {\n        return clearInterval(e);\n    },\n    delegate: void 0\n}, Kr = function(e) {\n    ee(t, e);\n    function t(n, r) {\n        var i = e.call(this, n, r) || this;\n        return i.scheduler = n, i.work = r, i.pending = !1, i;\n    }\n    return t.prototype.schedule = function(n, r) {\n        var i;\n        if (r === void 0 && (r = 0), this.closed) return this;\n        this.state = n;\n        var o = this.id, s = this.scheduler;\n        return o != null && (this.id = this.recycleAsyncId(s, o, r)), this.pending = !0, this.delay = r, this.id = (i = this.id) !== null && i !== void 0 ? i : this.requestAsyncId(s, this.id, r), this;\n    }, t.prototype.requestAsyncId = function(n, r, i) {\n        return i === void 0 && (i = 0), Mt.setInterval(n.flush.bind(n, this), i);\n    }, t.prototype.recycleAsyncId = function(n, r, i) {\n        if (i === void 0 && (i = 0), i != null && this.delay === i && this.pending === !1) return r;\n        r != null && Mt.clearInterval(r);\n    }, t.prototype.execute = function(n, r) {\n        if (this.closed) return new Error(\"executing a cancelled action\");\n        this.pending = !1;\n        var i = this._execute(n, r);\n        if (i) return i;\n        this.pending === !1 && this.id != null && (this.id = this.recycleAsyncId(this.scheduler, this.id, null));\n    }, t.prototype._execute = function(n, r) {\n        var i = !1, o;\n        try {\n            this.work(n);\n        } catch (s) {\n            i = !0, o = s || new Error(\"Scheduled action threw falsy error\");\n        }\n        if (i) return this.unsubscribe(), o;\n    }, t.prototype.unsubscribe = function() {\n        if (!this.closed) {\n            var n = this, r = n.id, i = n.scheduler, o = i.actions;\n            this.work = this.state = this.scheduler = null, this.pending = !1, Ue(o, this), r != null && (this.id = this.recycleAsyncId(i, r, null)), this.delay = null, e.prototype.unsubscribe.call(this);\n        }\n    }, t;\n}(qr), Rt = function() {\n    function e(t, n) {\n        n === void 0 && (n = e.now), this.schedulerActionCtor = t, this.now = n;\n    }\n    return e.prototype.schedule = function(t, n, r) {\n        return n === void 0 && (n = 0), new this.schedulerActionCtor(this, t).schedule(r, n);\n    }, e.now = Yr.now, e;\n}(), Gr = function(e) {\n    ee(t, e);\n    function t(n, r) {\n        r === void 0 && (r = Rt.now);\n        var i = e.call(this, n, r) || this;\n        return i.actions = [], i._active = !1, i;\n    }\n    return t.prototype.flush = function(n) {\n        var r = this.actions;\n        if (this._active) {\n            r.push(n);\n            return;\n        }\n        var i;\n        this._active = !0;\n        do if (i = n.execute(n.state, n.delay)) break;\n        while (n = r.shift());\n        if (this._active = !1, i) {\n            for(; n = r.shift();)n.unsubscribe();\n            throw i;\n        }\n    }, t;\n}(Rt), Qr = new Gr(Kr);\nfunction Jr(e) {\n    return e && O(e.schedule);\n}\nfunction Xr(e) {\n    return e[e.length - 1];\n}\nfunction yt(e) {\n    return Jr(Xr(e)) ? e.pop() : void 0;\n}\nvar wt = function(e) {\n    return e && typeof e.length == \"number\" && typeof e != \"function\";\n};\nfunction fn(e) {\n    return O(e == null ? void 0 : e.then);\n}\nfunction dn(e) {\n    return O(e[bt]);\n}\nfunction pn(e) {\n    return Symbol.asyncIterator && O(e == null ? void 0 : e[Symbol.asyncIterator]);\n}\nfunction hn(e) {\n    return new TypeError(\"You provided \" + (e !== null && typeof e == \"object\" ? \"an invalid object\" : \"'\" + e + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\nfunction Zr() {\n    return typeof Symbol != \"function\" || !Symbol.iterator ? \"@@iterator\" : Symbol.iterator;\n}\nvar vn = Zr();\nfunction mn(e) {\n    return O(e == null ? void 0 : e[vn]);\n}\nfunction bn(e) {\n    return Mr(this, arguments, function() {\n        var n, r, i, o;\n        return sn(this, function(s) {\n            switch(s.label){\n                case 0:\n                    n = e.getReader(), s.label = 1;\n                case 1:\n                    s.trys.push([\n                        1,\n                        ,\n                        9,\n                        10\n                    ]), s.label = 2;\n                case 2:\n                    return [\n                        4,\n                        pe(n.read())\n                    ];\n                case 3:\n                    return r = s.sent(), i = r.value, o = r.done, o ? [\n                        4,\n                        pe(void 0)\n                    ] : [\n                        3,\n                        5\n                    ];\n                case 4:\n                    return [\n                        2,\n                        s.sent()\n                    ];\n                case 5:\n                    return [\n                        4,\n                        pe(i)\n                    ];\n                case 6:\n                    return [\n                        4,\n                        s.sent()\n                    ];\n                case 7:\n                    return s.sent(), [\n                        3,\n                        2\n                    ];\n                case 8:\n                    return [\n                        3,\n                        10\n                    ];\n                case 9:\n                    return n.releaseLock(), [\n                        7\n                    ];\n                case 10:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n}\nfunction gn(e) {\n    return O(e == null ? void 0 : e.getReader);\n}\nfunction H(e) {\n    if (e instanceof k) return e;\n    if (e != null) {\n        if (dn(e)) return ei(e);\n        if (wt(e)) return ti(e);\n        if (fn(e)) return ni(e);\n        if (pn(e)) return yn(e);\n        if (mn(e)) return ri(e);\n        if (gn(e)) return ii(e);\n    }\n    throw hn(e);\n}\nfunction ei(e) {\n    return new k(function(t) {\n        var n = e[bt]();\n        if (O(n.subscribe)) return n.subscribe(t);\n        throw new TypeError(\"Provided object does not correctly implement Symbol.observable\");\n    });\n}\nfunction ti(e) {\n    return new k(function(t) {\n        for(var n = 0; n < e.length && !t.closed; n++)t.next(e[n]);\n        t.complete();\n    });\n}\nfunction ni(e) {\n    return new k(function(t) {\n        e.then(function(n) {\n            t.closed || (t.next(n), t.complete());\n        }, function(n) {\n            return t.error(n);\n        }).then(null, un);\n    });\n}\nfunction ri(e) {\n    return new k(function(t) {\n        var n, r;\n        try {\n            for(var i = me(e), o = i.next(); !o.done; o = i.next()){\n                var s = o.value;\n                if (t.next(s), t.closed) return;\n            }\n        } catch (a) {\n            n = {\n                error: a\n            };\n        } finally{\n            try {\n                o && !o.done && (r = i.return) && r.call(i);\n            } finally{\n                if (n) throw n.error;\n            }\n        }\n        t.complete();\n    });\n}\nfunction yn(e) {\n    return new k(function(t) {\n        oi(e, t).catch(function(n) {\n            return t.error(n);\n        });\n    });\n}\nfunction ii(e) {\n    return yn(bn(e));\n}\nfunction oi(e, t) {\n    var n, r, i, o;\n    return Ir(this, void 0, void 0, function() {\n        var s, a;\n        return sn(this, function(c) {\n            switch(c.label){\n                case 0:\n                    c.trys.push([\n                        0,\n                        5,\n                        6,\n                        11\n                    ]), n = Rr(e), c.label = 1;\n                case 1:\n                    return [\n                        4,\n                        n.next()\n                    ];\n                case 2:\n                    if (r = c.sent(), !!r.done) return [\n                        3,\n                        4\n                    ];\n                    if (s = r.value, t.next(s), t.closed) return [\n                        2\n                    ];\n                    c.label = 3;\n                case 3:\n                    return [\n                        3,\n                        1\n                    ];\n                case 4:\n                    return [\n                        3,\n                        11\n                    ];\n                case 5:\n                    return a = c.sent(), i = {\n                        error: a\n                    }, [\n                        3,\n                        11\n                    ];\n                case 6:\n                    return c.trys.push([\n                        6,\n                        ,\n                        9,\n                        10\n                    ]), r && !r.done && (o = n.return) ? [\n                        4,\n                        o.call(n)\n                    ] : [\n                        3,\n                        8\n                    ];\n                case 7:\n                    c.sent(), c.label = 8;\n                case 8:\n                    return [\n                        3,\n                        10\n                    ];\n                case 9:\n                    if (i) throw i.error;\n                    return [\n                        7\n                    ];\n                case 10:\n                    return [\n                        7\n                    ];\n                case 11:\n                    return t.complete(), [\n                        2\n                    ];\n            }\n        });\n    });\n}\nfunction re(e, t, n, r, i) {\n    r === void 0 && (r = 0), i === void 0 && (i = !1);\n    var o = t.schedule(function() {\n        n(), i ? e.add(this.schedule(null, r)) : this.unsubscribe();\n    }, r);\n    if (e.add(o), !i) return o;\n}\nfunction wn(e, t) {\n    return t === void 0 && (t = 0), U(function(n, r) {\n        n.subscribe(B(r, function(i) {\n            return re(r, e, function() {\n                return r.next(i);\n            }, t);\n        }, function() {\n            return re(r, e, function() {\n                return r.complete();\n            }, t);\n        }, function(i) {\n            return re(r, e, function() {\n                return r.error(i);\n            }, t);\n        }));\n    });\n}\nfunction xn(e, t) {\n    return t === void 0 && (t = 0), U(function(n, r) {\n        r.add(e.schedule(function() {\n            return n.subscribe(r);\n        }, t));\n    });\n}\nfunction si(e, t) {\n    return H(e).pipe(xn(t), wn(t));\n}\nfunction ai(e, t) {\n    return H(e).pipe(xn(t), wn(t));\n}\nfunction ci(e, t) {\n    return new k(function(n) {\n        var r = 0;\n        return t.schedule(function() {\n            r === e.length ? n.complete() : (n.next(e[r++]), n.closed || this.schedule());\n        });\n    });\n}\nfunction ui(e, t) {\n    return new k(function(n) {\n        var r;\n        return re(n, t, function() {\n            r = e[vn](), re(n, t, function() {\n                var i, o, s;\n                try {\n                    i = r.next(), o = i.value, s = i.done;\n                } catch (a) {\n                    n.error(a);\n                    return;\n                }\n                s ? n.complete() : n.next(o);\n            }, 0, !0);\n        }), function() {\n            return O(r == null ? void 0 : r.return) && r.return();\n        };\n    });\n}\nfunction Sn(e, t) {\n    if (!e) throw new Error(\"Iterable cannot be null\");\n    return new k(function(n) {\n        re(n, t, function() {\n            var r = e[Symbol.asyncIterator]();\n            re(n, t, function() {\n                r.next().then(function(i) {\n                    i.done ? n.complete() : n.next(i.value);\n                });\n            }, 0, !0);\n        });\n    });\n}\nfunction li(e, t) {\n    return Sn(bn(e), t);\n}\nfunction fi(e, t) {\n    if (e != null) {\n        if (dn(e)) return si(e, t);\n        if (wt(e)) return ci(e, t);\n        if (fn(e)) return ai(e, t);\n        if (pn(e)) return Sn(e, t);\n        if (mn(e)) return ui(e, t);\n        if (gn(e)) return li(e, t);\n    }\n    throw hn(e);\n}\nfunction Ge(e, t) {\n    return t ? fi(e, t) : H(e);\n}\nfunction Dt() {\n    for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];\n    var n = yt(e);\n    return Ge(e, n);\n}\nfunction di(e) {\n    return e instanceof Date && !isNaN(e);\n}\nvar pi = vt(function(e) {\n    return function(n) {\n        n === void 0 && (n = null), e(this), this.message = \"Timeout has occurred\", this.name = \"TimeoutError\", this.info = n;\n    };\n});\nfunction hi(e, t) {\n    var n = di(e) ? {\n        first: e\n    } : typeof e == \"number\" ? {\n        each: e\n    } : e, r = n.first, i = n.each, o = n.with, s = o === void 0 ? vi : o, a = n.scheduler, c = a === void 0 ? Qr : a, u = n.meta, l = u === void 0 ? null : u;\n    if (r == null && i == null) throw new TypeError(\"No timeout provided.\");\n    return U(function(f, h) {\n        var d, m, p = null, b = 0, v = function(x) {\n            m = re(h, c, function() {\n                try {\n                    d.unsubscribe(), H(s({\n                        meta: l,\n                        lastValue: p,\n                        seen: b\n                    })).subscribe(h);\n                } catch (E) {\n                    h.error(E);\n                }\n            }, x);\n        };\n        d = f.subscribe(B(h, function(x) {\n            m == null || m.unsubscribe(), b++, h.next(p = x), i > 0 && v(i);\n        }, void 0, void 0, function() {\n            m != null && m.closed || m == null || m.unsubscribe(), p = null;\n        })), !b && v(r != null ? typeof r == \"number\" ? r : +r - c.now() : i);\n    });\n}\nfunction vi(e) {\n    throw new pi(e);\n}\nfunction A(e, t) {\n    return U(function(n, r) {\n        var i = 0;\n        n.subscribe(B(r, function(o) {\n            r.next(e.call(t, o, i++));\n        }));\n    });\n}\nvar mi = Array.isArray;\nfunction bi(e, t) {\n    return mi(t) ? e.apply(void 0, be([], ue(t))) : e(t);\n}\nfunction gi(e) {\n    return A(function(t) {\n        return bi(e, t);\n    });\n}\nfunction yi(e, t, n, r, i, o, s, a) {\n    var c = [], u = 0, l = 0, f = !1, h = function() {\n        f && !c.length && !u && t.complete();\n    }, d = function(p) {\n        return u < r ? m(p) : c.push(p);\n    }, m = function(p) {\n        u++;\n        var b = !1;\n        H(n(p, l++)).subscribe(B(t, function(v) {\n            t.next(v);\n        }, function() {\n            b = !0;\n        }, void 0, function() {\n            if (b) try {\n                u--;\n                for(var v = function() {\n                    var x = c.shift();\n                    s || m(x);\n                }; c.length && u < r;)v();\n                h();\n            } catch (x) {\n                t.error(x);\n            }\n        }));\n    };\n    return e.subscribe(B(t, d, function() {\n        f = !0, h();\n    })), function() {};\n}\nfunction xt(e, t, n) {\n    return n === void 0 && (n = 1 / 0), O(t) ? xt(function(r, i) {\n        return A(function(o, s) {\n            return t(r, o, i, s);\n        })(H(e(r, i)));\n    }, n) : (typeof t == \"number\" && (n = t), U(function(r, i) {\n        return yi(r, i, e, n);\n    }));\n}\nfunction wi(e) {\n    return xt(gt, e);\n}\nfunction xi() {\n    return wi(1);\n}\nfunction We() {\n    for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];\n    return xi()(Ge(e, yt(e)));\n}\nvar Si = [\n    \"addListener\",\n    \"removeListener\"\n], Ei = [\n    \"addEventListener\",\n    \"removeEventListener\"\n], Ti = [\n    \"on\",\n    \"off\"\n];\nfunction at(e, t, n, r) {\n    if (O(n) && (r = n, n = void 0), r) return at(e, t, n).pipe(gi(r));\n    var i = ue(Oi(e) ? Ei.map(function(a) {\n        return function(c) {\n            return e[a](t, c, n);\n        };\n    }) : Ci(e) ? Si.map($t(e, t)) : Pi(e) ? Ti.map($t(e, t)) : [], 2), o = i[0], s = i[1];\n    if (!o && wt(e)) return xt(function(a) {\n        return at(a, t, n);\n    })(H(e));\n    if (!o) throw new TypeError(\"Invalid event target\");\n    return new k(function(a) {\n        var c = function() {\n            for(var u = [], l = 0; l < arguments.length; l++)u[l] = arguments[l];\n            return a.next(1 < u.length ? u : u[0]);\n        };\n        return o(c), function() {\n            return s(c);\n        };\n    });\n}\nfunction $t(e, t) {\n    return function(n) {\n        return function(r) {\n            return e[n](t, r);\n        };\n    };\n}\nfunction Ci(e) {\n    return O(e.addListener) && O(e.removeListener);\n}\nfunction Pi(e) {\n    return O(e.on) && O(e.off);\n}\nfunction Oi(e) {\n    return O(e.addEventListener) && O(e.removeEventListener);\n}\nfunction Qe(e, t) {\n    return U(function(n, r) {\n        var i = 0;\n        n.subscribe(B(r, function(o) {\n            return e.call(t, o, i++) && r.next(o);\n        }));\n    });\n}\nfunction Ai(e, t, n, r, i) {\n    return function(o, s) {\n        var a = n, c = t, u = 0;\n        o.subscribe(B(s, function(l) {\n            var f = u++;\n            c = a ? e(c, l, f) : (a = !0, l), s.next(c);\n        }, i));\n    };\n}\nfunction ki(e, t) {\n    return t === void 0 && (t = gt), e = e ?? Li, U(function(n, r) {\n        var i, o = !0;\n        n.subscribe(B(r, function(s) {\n            var a = t(s);\n            (o || !e(i, a)) && (o = !1, i = a, r.next(s));\n        }));\n    });\n}\nfunction Li(e, t) {\n    return e === t;\n}\nfunction _i(e) {\n    return U(function(t, n) {\n        try {\n            t.subscribe(n);\n        } finally{\n            n.add(e);\n        }\n    });\n}\nfunction ct(e, t) {\n    return U(Ai(e, t, arguments.length >= 2, !0));\n}\nfunction Ii(e) {\n    e === void 0 && (e = {});\n    var t = e.connector, n = t === void 0 ? function() {\n        return new J();\n    } : t, r = e.resetOnError, i = r === void 0 ? !0 : r, o = e.resetOnComplete, s = o === void 0 ? !0 : o, a = e.resetOnRefCountZero, c = a === void 0 ? !0 : a;\n    return function(u) {\n        var l, f, h, d = 0, m = !1, p = !1, b = function() {\n            f == null || f.unsubscribe(), f = void 0;\n        }, v = function() {\n            b(), l = h = void 0, m = p = !1;\n        }, x = function() {\n            var E = l;\n            v(), E == null || E.unsubscribe();\n        };\n        return U(function(E, P) {\n            d++, !p && !m && b();\n            var g = h = h ?? n();\n            P.add(function() {\n                d--, d === 0 && !p && !m && (f = et(x, c));\n            }), g.subscribe(P), !l && d > 0 && (l = new Ce({\n                next: function(S) {\n                    return g.next(S);\n                },\n                error: function(S) {\n                    p = !0, b(), f = et(v, i, S), g.error(S);\n                },\n                complete: function() {\n                    m = !0, b(), f = et(v, s), g.complete();\n                }\n            }), H(E).subscribe(l));\n        })(u);\n    };\n}\nfunction et(e, t) {\n    for(var n = [], r = 2; r < arguments.length; r++)n[r - 2] = arguments[r];\n    if (t === !0) {\n        e();\n        return;\n    }\n    if (t !== !1) {\n        var i = new Ce({\n            next: function() {\n                i.unsubscribe(), e();\n            }\n        });\n        return H(t.apply(void 0, be([], ue(n)))).subscribe(i);\n    }\n}\nfunction Mi(e) {\n    return U(function(t, n) {\n        var r = !1, i = B(n, function() {\n            i == null || i.unsubscribe(), r = !0;\n        }, je);\n        H(e).subscribe(i), t.subscribe(B(n, function(o) {\n            return r && n.next(o);\n        }));\n    });\n}\nfunction D() {\n    for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];\n    var n = yt(e);\n    return U(function(r, i) {\n        (n ? We(e, r, n) : We(e, r)).subscribe(i);\n    });\n}\nfunction En(e, t) {\n    return U(function(n, r) {\n        var i = null, o = 0, s = !1, a = function() {\n            return s && !i && r.complete();\n        };\n        n.subscribe(B(r, function(c) {\n            i == null || i.unsubscribe();\n            var u = 0, l = o++;\n            H(e(c, l)).subscribe(i = B(r, function(f) {\n                return r.next(t ? t(c, f, l, u++) : f);\n            }, function() {\n                i = null, a();\n            }));\n        }, function() {\n            s = !0, a();\n        }));\n    });\n}\nfunction Nt(e) {\n    return U(function(t, n) {\n        H(e).subscribe(B(n, function() {\n            return n.complete();\n        }, je)), !n.closed && t.subscribe(n);\n    });\n}\nvar Ri = Object.defineProperty, Di = Object.defineProperties, $i = Object.getOwnPropertyDescriptors, Ft = Object.getOwnPropertySymbols, Ni = Object.prototype.hasOwnProperty, Fi = Object.prototype.propertyIsEnumerable, Ut = (e, t, n)=>t in e ? Ri(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : e[t] = n, Z = (e, t)=>{\n    for(var n in t || (t = {}))Ni.call(t, n) && Ut(e, n, t[n]);\n    if (Ft) for (var n of Ft(t))Fi.call(t, n) && Ut(e, n, t[n]);\n    return e;\n}, Ee = (e, t)=>Di(e, $i(t)), V = (e, t, n)=>new Promise((r, i)=>{\n        var o = (c)=>{\n            try {\n                a(n.next(c));\n            } catch (u) {\n                i(u);\n            }\n        }, s = (c)=>{\n            try {\n                a(n.throw(c));\n            } catch (u) {\n                i(u);\n            }\n        }, a = (c)=>c.done ? r(c.value) : Promise.resolve(c.value).then(o, s);\n        a((n = n.apply(e, t)).next());\n    }), Tn = \"lk\";\nfunction W(e) {\n    return typeof e > \"u\" ? !1 : Ui(e) || ji(e);\n}\nfunction Ui(e) {\n    var t;\n    return e ? e.hasOwnProperty(\"participant\") && e.hasOwnProperty(\"source\") && e.hasOwnProperty(\"track\") && typeof ((t = e.publication) == null ? void 0 : t.track) < \"u\" : !1;\n}\nfunction ji(e) {\n    return e ? e.hasOwnProperty(\"participant\") && e.hasOwnProperty(\"source\") && e.hasOwnProperty(\"publication\") && typeof e.publication < \"u\" : !1;\n}\nfunction Pe(e) {\n    return e ? e.hasOwnProperty(\"participant\") && e.hasOwnProperty(\"source\") && typeof e.publication > \"u\" : !1;\n}\nfunction N(e) {\n    if (typeof e == \"string\" || typeof e == \"number\") return `${e}`;\n    if (Pe(e)) return `${e.participant.identity}_${e.source}_placeholder`;\n    if (W(e)) return `${e.participant.identity}_${e.publication.source}_${e.publication.trackSid}`;\n    throw new Error(`Can't generate a id for the given track reference: ${e}`);\n}\nfunction $o(e, t) {\n    return e === void 0 || t === void 0 ? !1 : W(e) && W(t) ? e.publication.trackSid === t.publication.trackSid : N(e) === N(t);\n}\nfunction No(e, t) {\n    return typeof t > \"u\" ? !1 : W(e) ? t.some((n)=>n.participant.identity === e.participant.identity && W(n) && n.publication.trackSid === e.publication.trackSid) : Pe(e) ? t.some((n)=>n.participant.identity === e.participant.identity && Pe(n) && n.source === e.source) : !1;\n}\nfunction Wi(e, t) {\n    return Pe(e) && W(t) && t.participant.identity === e.participant.identity && t.source === e.source;\n}\nfunction Fo() {\n    const e = document.createElement(\"p\");\n    e.style.width = \"100%\", e.style.height = \"200px\";\n    const t = document.createElement(\"div\");\n    t.style.position = \"absolute\", t.style.top = \"0px\", t.style.left = \"0px\", t.style.visibility = \"hidden\", t.style.width = \"200px\", t.style.height = \"150px\", t.style.overflow = \"hidden\", t.appendChild(e), document.body.appendChild(t);\n    const n = e.offsetWidth;\n    t.style.overflow = \"scroll\";\n    let r = e.offsetWidth;\n    return n === r && (r = t.clientWidth), document.body.removeChild(t), n - r;\n}\nfunction Uo() {\n    return typeof document < \"u\";\n}\nfunction Bi(e) {\n    e = Z({}, e);\n    const t = \"(?:(?:[a-z]+:)?//)?\", n = \"(?:\\\\S+(?::\\\\S*)?@)?\", r = new RegExp(\"(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}\", \"g\").source, u = `(?:${t}|www\\\\.)${n}(?:localhost|${r}|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?)(?::\\\\d{2,5})?(?:[/?#][^\\\\s\"]*)?`;\n    return e.exact ? new RegExp(`(?:^${u}$)`, \"i\") : new RegExp(u, \"ig\");\n}\nvar jt = \"[^\\\\.\\\\s@:](?:[^\\\\s@:]*[^\\\\s@:\\\\.])?@[^\\\\.\\\\s@]+(?:\\\\.[^\\\\.\\\\s@]+)*\";\nfunction Vi({ exact: e } = {}) {\n    return e ? new RegExp(`^${jt}$`) : new RegExp(jt, \"g\");\n}\nfunction jo(e, t, n) {\n    return Sr(e, t, ()=>V(this, null, function*() {\n            const { x: i, y: o } = yield Pr(e, t, {\n                placement: \"top\",\n                middleware: [\n                    Er(6),\n                    Cr(),\n                    Tr({\n                        padding: 5\n                    })\n                ]\n            });\n            n == null || n(i, o);\n        }));\n}\nfunction Wo(e, t) {\n    return !e.contains(t.target);\n}\nvar Bo = ()=>({\n        email: Vi(),\n        url: Bi({})\n    });\nfunction Vo(e, t) {\n    const n = Object.entries(t).map(([o, s], a)=>Array.from(e.matchAll(s)).map(({ index: c, 0: u })=>({\n                type: o,\n                weight: a,\n                content: u,\n                index: c ?? 0\n            }))).flat().sort((o, s)=>{\n        const a = o.index - s.index;\n        return a !== 0 ? a : o.weight - s.weight;\n    }).filter(({ index: o }, s, a)=>{\n        if (s === 0) return !0;\n        const c = a[s - 1];\n        return c.index + c.content.length <= o;\n    }), r = [];\n    let i = 0;\n    for (const { type: o, content: s, index: a } of n)a > i && r.push(e.substring(i, a)), r.push({\n        type: o,\n        content: s\n    }), i = a + s.length;\n    return e.length > i && r.push(e.substring(i)), r;\n}\nvar Hi = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionQualityChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantPermissionsChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantNameChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantAttributesChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackStreamStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionFailed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionPermissionChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged\n], Cn = [\n    ...Hi,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished\n], zi = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n], Yi = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n], Pn = [\n    ...Yi,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n], _ = _r.getLogger(\"lk-components-js\");\n_.setDefaultLevel(\"WARN\");\nfunction Ho(e, t = {}) {\n    var n;\n    _.setLevel(e), (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)((n = t.liveKitClientLogLevel) != null ? n : e);\n}\nfunction zo(e, t = {}) {\n    var n;\n    const r = _.methodFactory;\n    _.methodFactory = (i, o, s)=>{\n        const a = r(i, o, s), c = livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel[i], u = c >= o && c < livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel.silent;\n        return (l, f)=>{\n            f ? a(l, f) : a(l), u && e(c, l, f);\n        };\n    }, _.setLevel(_.getLevel()), (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogExtension)((n = t.liveKitClientLogExtension) != null ? n : e);\n}\nvar Yo = [\n    {\n        columns: 1,\n        rows: 1\n    },\n    {\n        columns: 1,\n        rows: 2,\n        orientation: \"portrait\"\n    },\n    {\n        columns: 2,\n        rows: 1,\n        orientation: \"landscape\"\n    },\n    {\n        columns: 2,\n        rows: 2,\n        minWidth: 560\n    },\n    {\n        columns: 3,\n        rows: 3,\n        minWidth: 700\n    },\n    {\n        columns: 4,\n        rows: 4,\n        minWidth: 960\n    },\n    {\n        columns: 5,\n        rows: 5,\n        minWidth: 1100\n    }\n];\nfunction qi(e, t, n, r) {\n    if (e.length < 1) throw new Error(\"At least one grid layout definition must be provided.\");\n    const i = Ki(e);\n    if (n <= 0 || r <= 0) return i[0];\n    let o = 0;\n    const s = n / r > 1 ? \"landscape\" : \"portrait\";\n    let a = i.find((c, u, l)=>{\n        o = u;\n        const f = l.findIndex((h, d)=>{\n            const m = !h.orientation || h.orientation === s, p = d > u, b = h.maxTiles === c.maxTiles;\n            return p && b && m;\n        }) !== -1;\n        return c.maxTiles >= t && !f;\n    });\n    if (a === void 0) if (a = i[i.length - 1], a) _.warn(`No layout found for: participantCount: ${t}, width/height: ${n}/${r} fallback to biggest available layout (${a}).`);\n    else throw new Error(\"No layout or fallback layout found.\");\n    if ((n < a.minWidth || r < a.minHeight) && o > 0) {\n        const c = i[o - 1];\n        a = qi(i.slice(0, o), c.maxTiles, n, r);\n    }\n    return a;\n}\nfunction Ki(e) {\n    return [\n        ...e\n    ].map((t)=>{\n        var n, r;\n        return {\n            name: `${t.columns}x${t.rows}`,\n            columns: t.columns,\n            rows: t.rows,\n            maxTiles: t.columns * t.rows,\n            minWidth: (n = t.minWidth) != null ? n : 0,\n            minHeight: (r = t.minHeight) != null ? r : 0,\n            orientation: t.orientation\n        };\n    }).sort((t, n)=>t.maxTiles !== n.maxTiles ? t.maxTiles - n.maxTiles : t.minWidth !== 0 || n.minWidth !== 0 ? t.minWidth - n.minWidth : t.minHeight !== 0 || n.minHeight !== 0 ? t.minHeight - n.minHeight : 0);\n}\nfunction qo() {\n    return typeof navigator < \"u\" && navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia;\n}\nfunction Ko(e, t) {\n    var n;\n    return Ee(Z({}, e), {\n        receivedAtMediaTimestamp: (n = t.rtpTimestamp) != null ? n : 0,\n        receivedAt: t.timestamp\n    });\n}\nfunction Go(e, t, n) {\n    return [\n        ...e,\n        ...t\n    ].reduceRight((r, i)=>(r.find((o)=>o.id === i.id) || r.unshift(i), r), []).slice(0 - n);\n}\nvar On = [], An = {\n    showChat: !1,\n    unreadMessages: 0,\n    showSettings: !1\n};\nfunction Gi(e) {\n    return typeof e == \"object\";\n}\nfunction Qo(e) {\n    return Array.isArray(e) && e.filter(Gi).length > 0;\n}\nfunction kn(e, t) {\n    return t.audioLevel - e.audioLevel;\n}\nfunction Ln(e, t) {\n    return e.isSpeaking === t.isSpeaking ? 0 : e.isSpeaking ? -1 : 1;\n}\nfunction _n(e, t) {\n    var n, r, i, o;\n    return e.lastSpokeAt !== void 0 || t.lastSpokeAt !== void 0 ? ((r = (n = t.lastSpokeAt) == null ? void 0 : n.getTime()) != null ? r : 0) - ((o = (i = e.lastSpokeAt) == null ? void 0 : i.getTime()) != null ? o : 0) : 0;\n}\nfunction Be(e, t) {\n    var n, r, i, o;\n    return ((r = (n = e.joinedAt) == null ? void 0 : n.getTime()) != null ? r : 0) - ((o = (i = t.joinedAt) == null ? void 0 : i.getTime()) != null ? o : 0);\n}\nfunction Qi(e, t) {\n    return W(e) ? W(t) ? 0 : -1 : W(t) ? 1 : 0;\n}\nfunction Ji(e, t) {\n    const n = e.participant.isCameraEnabled, r = t.participant.isCameraEnabled;\n    return n !== r ? n ? -1 : 1 : 0;\n}\nfunction Jo(e) {\n    const t = [], n = [], r = [], i = [];\n    e.forEach((a)=>{\n        a.participant.isLocal && a.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera ? t.push(a) : a.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? n.push(a) : a.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera ? r.push(a) : i.push(a);\n    });\n    const o = Xi(n), s = Zi(r);\n    return [\n        ...t,\n        ...o,\n        ...s,\n        ...i\n    ];\n}\nfunction Xi(e) {\n    const t = [], n = [];\n    return e.forEach((i)=>{\n        i.participant.isLocal ? t.push(i) : n.push(i);\n    }), t.sort((i, o)=>Be(i.participant, o.participant)), n.sort((i, o)=>Be(i.participant, o.participant)), [\n        ...n,\n        ...t\n    ];\n}\nfunction Zi(e) {\n    const t = [], n = [];\n    return e.forEach((r)=>{\n        r.participant.isLocal ? t.push(r) : n.push(r);\n    }), n.sort((r, i)=>r.participant.isSpeaking && i.participant.isSpeaking ? kn(r.participant, i.participant) : r.participant.isSpeaking !== i.participant.isSpeaking ? Ln(r.participant, i.participant) : r.participant.lastSpokeAt !== i.participant.lastSpokeAt ? _n(r.participant, i.participant) : W(r) !== W(i) ? Qi(r, i) : r.participant.isCameraEnabled !== i.participant.isCameraEnabled ? Ji(r, i) : Be(r.participant, i.participant)), [\n        ...t,\n        ...n\n    ];\n}\nfunction Xo(e) {\n    const t = [\n        ...e\n    ];\n    t.sort((r, i)=>{\n        if (r.isSpeaking && i.isSpeaking) return kn(r, i);\n        if (r.isSpeaking !== i.isSpeaking) return Ln(r, i);\n        if (r.lastSpokeAt !== i.lastSpokeAt) return _n(r, i);\n        const o = r.videoTrackPublications.size > 0, s = i.videoTrackPublications.size > 0;\n        return o !== s ? o ? -1 : 1 : Be(r, i);\n    });\n    const n = t.find((r)=>r.isLocal);\n    if (n) {\n        const r = t.indexOf(n);\n        r >= 0 && (t.splice(r, 1), t.length > 0 ? t.splice(0, 0, n) : t.push(n));\n    }\n    return t;\n}\nfunction eo(e, t) {\n    return e.reduce((n, r, i)=>i % t === 0 ? [\n            ...n,\n            [\n                r\n            ]\n        ] : [\n            ...n.slice(0, -1),\n            [\n                ...n.slice(-1)[0],\n                r\n            ]\n        ], []);\n}\nfunction Wt(e, t) {\n    const n = Math.max(e.length, t.length);\n    return new Array(n).fill([]).map((r, i)=>[\n            e[i],\n            t[i]\n        ]);\n}\nfunction Ve(e, t, n) {\n    return e.filter((r)=>!t.map((i)=>n(i)).includes(n(r)));\n}\nfunction ut(e) {\n    return e.map((t)=>typeof t == \"string\" || typeof t == \"number\" ? `${t}` : N(t));\n}\nfunction to(e, t) {\n    return {\n        dropped: Ve(e, t, N),\n        added: Ve(t, e, N)\n    };\n}\nfunction no(e) {\n    return e.added.length !== 0 || e.dropped.length !== 0;\n}\nfunction lt(e, t) {\n    const n = t.findIndex((r)=>N(r) === N(e));\n    if (n === -1) throw new Error(`Element not part of the array: ${N(e)} not in ${ut(t)}`);\n    return n;\n}\nfunction ro(e, t, n) {\n    const r = lt(e, n), i = lt(t, n);\n    return n.splice(r, 1, t), n.splice(i, 1, e), n;\n}\nfunction io(e, t) {\n    const n = lt(e, t);\n    return t.splice(n, 1), t;\n}\nfunction oo(e, t) {\n    return [\n        ...t,\n        e\n    ];\n}\nfunction tt(e, t) {\n    return eo(e, t);\n}\nfunction Zo(e, t, n) {\n    let r = so(e, t);\n    if (r.length < t.length) {\n        const s = Ve(t, r, N);\n        r = [\n            ...r,\n            ...s\n        ];\n    }\n    const i = tt(r, n), o = tt(t, n);\n    if (Wt(i, o).forEach(([s, a], c)=>{\n        if (s && a) {\n            const u = tt(r, n)[c], l = to(u, a);\n            no(l) && (_.debug(`Detected visual changes on page: ${c}, current: ${ut(s)}, next: ${ut(a)}`, {\n                changes: l\n            }), l.added.length === l.dropped.length && Wt(l.added, l.dropped).forEach(([f, h])=>{\n                if (f && h) r = ro(f, h, r);\n                else throw new Error(`For a swap action we need a addition and a removal one is missing: ${f}, ${h}`);\n            }), l.added.length === 0 && l.dropped.length > 0 && l.dropped.forEach((f)=>{\n                r = io(f, r);\n            }), l.added.length > 0 && l.dropped.length === 0 && l.added.forEach((f)=>{\n                r = oo(f, r);\n            }));\n        }\n    }), r.length > t.length) {\n        const s = Ve(r, t, N);\n        r = r.filter((a)=>!s.map(N).includes(N(a)));\n    }\n    return r;\n}\nfunction so(e, t) {\n    return e.map((n)=>{\n        const r = t.find((i)=>// If the IDs match or ..\n            N(n) === N(i) || // ... if the current item is a placeholder and the new item is the track reference can replace it.\n            typeof n != \"number\" && Pe(n) && W(i) && Wi(n, i));\n        return r ?? n;\n    });\n}\nfunction F(e) {\n    return `${Tn}-${e}`;\n}\nfunction es(e) {\n    const t = Bt(e), n = In(e.participant).pipe(A(()=>Bt(e)), D(t));\n    return {\n        className: F(e.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera || e.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? \"participant-media-video\" : \"participant-media-audio\"),\n        trackObserver: n\n    };\n}\nfunction Bt(e) {\n    if (W(e)) return e.publication;\n    {\n        const { source: t, name: n, participant: r } = e;\n        if (t && n) return r.getTrackPublications().find((i)=>i.source === t && i.trackName === n);\n        if (n) return r.getTrackPublicationByName(n);\n        if (t) return r.getTrackPublication(t);\n        throw new Error(\"At least one of source and name needs to be defined\");\n    }\n}\nfunction le(e, ...t) {\n    return new k((r)=>{\n        const i = ()=>{\n            r.next(e);\n        };\n        return t.forEach((s)=>{\n            e.on(s, i);\n        }), ()=>{\n            t.forEach((s)=>{\n                e.off(s, i);\n            });\n        };\n    }).pipe(D(e));\n}\nfunction ye(e, t) {\n    return new k((r)=>{\n        const i = (...s)=>{\n            r.next(s);\n        };\n        return e.on(t, i), ()=>{\n            e.off(t, i);\n        };\n    });\n}\nfunction ts(e) {\n    return ye(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe(A(([t])=>t), D(e.state));\n}\nfunction ns(e) {\n    return le(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe(A((n)=>({\n            name: n.name,\n            metadata: n.metadata\n        })));\n}\nfunction rs(e) {\n    return ye(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged).pipe(A(([t])=>t));\n}\nfunction is(e, t, n = !0) {\n    var r;\n    const i = ()=>V(this, null, function*() {\n            try {\n                const a = yield livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(e, n);\n                o.next(a);\n            } catch (a) {\n                t == null || t(a);\n            }\n        }), o = new J(), s = o.pipe(_i(()=>{\n        var a;\n        (a = navigator == null ? void 0 : navigator.mediaDevices) == null || a.removeEventListener(\"devicechange\", i);\n    }));\n    if (false) {}\n    return We(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(e, n).catch((a)=>(t == null || t(a), [])), s);\n}\nfunction ao(e) {\n    return ye(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived);\n}\nfunction co(e) {\n    return le(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged).pipe(A((n)=>({\n            canPlayAudio: n.canPlaybackAudio\n        })));\n}\nfunction uo(e) {\n    return le(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.VideoPlaybackStatusChanged).pipe(A((n)=>({\n            canPlayVideo: n.canPlaybackVideo\n        })));\n}\nfunction lo(e, t) {\n    return ye(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveDeviceChanged).pipe(Qe(([n])=>n === t), A(([n, r])=>(_.debug(\"activeDeviceObservable | RoomEvent.ActiveDeviceChanged\", {\n            kind: n,\n            deviceId: r\n        }), r)));\n}\nfunction os(e, t) {\n    return ye(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantEncryptionStatusChanged).pipe(Qe(([, n])=>(t == null ? void 0 : t.identity) === (n == null ? void 0 : n.identity) || !n && (t == null ? void 0 : t.identity) === e.localParticipant.identity), A(([n])=>n), D(t != null && t.isLocal ? t.isE2EEEnabled : !!(t != null && t.isEncrypted)));\n}\nfunction ss(e) {\n    return ye(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RecordingStatusChanged).pipe(A(([t])=>t), D(e.isRecording));\n}\nfunction we(e, ...t) {\n    return new k((r)=>{\n        const i = ()=>{\n            r.next(e);\n        };\n        return t.forEach((s)=>{\n            e.on(s, i);\n        }), ()=>{\n            t.forEach((s)=>{\n                e.off(s, i);\n            });\n        };\n    }).pipe(D(e));\n}\nfunction In(e) {\n    return we(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged, // ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.MediaDevicesError, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged).pipe(A((n)=>{\n        const { isMicrophoneEnabled: r, isCameraEnabled: i, isScreenShareEnabled: o } = n, s = n.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone), a = n.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera);\n        return {\n            isCameraEnabled: i,\n            isMicrophoneEnabled: r,\n            isScreenShareEnabled: o,\n            cameraTrack: a,\n            microphoneTrack: s,\n            participant: n\n        };\n    }));\n}\nfunction fo(e) {\n    return e ? we(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantNameChanged).pipe(A(({ name: n, identity: r, metadata: i })=>({\n            name: n,\n            identity: r,\n            metadata: i\n        })), D({\n        name: e.name,\n        identity: e.identity,\n        metadata: e.metadata\n    })) : void 0;\n}\nfunction po(e) {\n    return Je(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged).pipe(A(([n])=>n), D(e.connectionQuality));\n}\nfunction Je(e, t) {\n    return new k((r)=>{\n        const i = (...s)=>{\n            r.next(s);\n        };\n        return e.on(t, i), ()=>{\n            e.off(t, i);\n        };\n    });\n}\nfunction ho(e) {\n    var t, n, r, i;\n    return we(e.participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished).pipe(A((o)=>{\n        var s, a;\n        const c = (s = e.publication) != null ? s : o.getTrackPublication(e.source);\n        return (a = c == null ? void 0 : c.isMuted) != null ? a : !0;\n    }), D((i = (r = (t = e.publication) == null ? void 0 : t.isMuted) != null ? r : (n = e.participant.getTrackPublication(e.source)) == null ? void 0 : n.isMuted) != null ? i : !0));\n}\nfunction as(e) {\n    return Je(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged).pipe(A(([t])=>t));\n}\nfunction cs(e, t = {}) {\n    var n;\n    let r;\n    const i = new k((c)=>(r = c, ()=>a.unsubscribe())).pipe(D(Array.from(e.remoteParticipants.values()))), o = (n = t.additionalRoomEvents) != null ? n : Cn, s = Array.from(/* @__PURE__ */ new Set([\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n        ...o\n    ])), a = le(e, ...s).subscribe((c)=>r == null ? void 0 : r.next(Array.from(c.remoteParticipants.values())));\n    return e.remoteParticipants.size > 0 && (r == null || r.next(Array.from(e.remoteParticipants.values()))), i;\n}\nfunction us(e, t, n = {}) {\n    var r;\n    const i = (r = n.additionalEvents) != null ? r : Pn;\n    return le(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe(En((s)=>{\n        const a = s.getParticipantByIdentity(t);\n        return a ? we(a, ...i) : new k((c)=>c.next(void 0));\n    }), D(e.getParticipantByIdentity(t)));\n}\nfunction ls(e) {\n    return Je(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged).pipe(A(()=>e.permissions), D(e.permissions));\n}\nfunction fs(e, { kind: t, identity: n }, r = {}) {\n    var i;\n    const o = (i = r.additionalEvents) != null ? i : Pn, s = (c)=>{\n        let u = !0;\n        return t && (u = u && c.kind === t), n && (u = u && c.identity === n), u;\n    };\n    return le(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe(En((c)=>{\n        const u = Array.from(c.remoteParticipants.values()).find((l)=>s(l));\n        return u ? we(u, ...o) : new k((l)=>l.next(void 0));\n    }), D(Array.from(e.remoteParticipants.values()).find((c)=>s(c))));\n}\nfunction ds(e) {\n    return typeof e > \"u\" ? new k() : Je(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.AttributesChanged).pipe(A(([t])=>({\n            changed: t,\n            attributes: e.attributes\n        })), D({\n        changed: e.attributes,\n        attributes: e.attributes\n    }));\n}\nfunction ps(e, t, n, r, i) {\n    const { localParticipant: o } = t, s = (f, h)=>{\n        let d = !1;\n        switch(f){\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n                d = h.isCameraEnabled;\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n                d = h.isMicrophoneEnabled;\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n                d = h.isScreenShareEnabled;\n                break;\n        }\n        return d;\n    }, a = In(o).pipe(A((f)=>s(e, f.participant)), D(s(e, o))), c = new J(), u = (f, h)=>V(this, null, function*() {\n            try {\n                switch(h ?? (h = n), c.next(!0), e){\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n                        return yield o.setCameraEnabled(f ?? !o.isCameraEnabled, h, r), o.isCameraEnabled;\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n                        return yield o.setMicrophoneEnabled(f ?? !o.isMicrophoneEnabled, h, r), o.isMicrophoneEnabled;\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n                        return yield o.setScreenShareEnabled(f ?? !o.isScreenShareEnabled, h, r), o.isScreenShareEnabled;\n                    default:\n                        throw new TypeError(\"Tried to toggle unsupported source\");\n                }\n            } catch (d) {\n                if (i && d instanceof Error) {\n                    i == null || i(d);\n                    return;\n                } else throw d;\n            } finally{\n                c.next(!1);\n            }\n        });\n    return {\n        className: F(\"button\"),\n        toggle: u,\n        enabledObserver: a,\n        pendingObserver: c.asObservable()\n    };\n}\nfunction hs() {\n    let e = !1;\n    const t = new J(), n = new J(), r = (o)=>V(this, null, function*() {\n            n.next(!0), e = o ?? !e, t.next(e), n.next(!1);\n        });\n    return {\n        className: F(\"button\"),\n        toggle: r,\n        enabledObserver: t.asObservable(),\n        pendingObserver: n.asObservable()\n    };\n}\nfunction vs(e, t, n) {\n    const r = new ln(void 0), i = lo(t, e), o = (a, ...c)=>V(this, [\n            a,\n            ...c\n        ], function*(u, l = {}) {\n            var f, h, d;\n            if (t) {\n                _.debug(`Switching active device of kind \"${e}\" with id ${u}.`), yield t.switchActiveDevice(e, u, l.exact);\n                const m = (f = t.getActiveDevice(e)) != null ? f : u;\n                m !== u && u !== \"default\" && _.info(`We tried to select the device with id (${u}), but the browser decided to select the device with id (${m}) instead.`);\n                let p;\n                e === \"audioinput\" ? p = (h = t.localParticipant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone)) == null ? void 0 : h.track : e === \"videoinput\" && (p = (d = t.localParticipant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera)) == null ? void 0 : d.track);\n                const b = u === \"default\" && !p || u === \"default\" && (p == null ? void 0 : p.mediaStreamTrack.label.startsWith(\"Default\"));\n                r.next(b ? u : m);\n            }\n        });\n    return {\n        className: F(\"media-device-select\"),\n        activeDeviceObservable: i,\n        setActiveMediaDevice: o\n    };\n}\nfunction ms(e) {\n    const t = (r)=>{\n        e.disconnect(r);\n    };\n    return {\n        className: F(\"disconnect-button\"),\n        disconnect: t\n    };\n}\nfunction bs(e) {\n    const t = F(\"connection-quality\"), n = po(e);\n    return {\n        className: t,\n        connectionQualityObserver: n\n    };\n}\nfunction gs(e) {\n    let t = \"track-muted-indicator-camera\";\n    switch(e.source){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n            t = \"track-muted-indicator-camera\";\n            break;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n            t = \"track-muted-indicator-microphone\";\n            break;\n    }\n    const n = F(t), r = ho(e);\n    return {\n        className: n,\n        mediaMutedObserver: r\n    };\n}\nfunction ys(e) {\n    return {\n        className: \"lk-participant-name\",\n        infoObserver: fo(e)\n    };\n}\nfunction ws() {\n    return {\n        className: F(\"participant-tile\")\n    };\n}\nvar vo = {\n    CHAT: \"lk.chat\"\n}, mo = {\n    CHAT: \"lk-chat-topic\"\n};\nfunction Mn(e, t) {\n    return V(this, arguments, function*(n, r, i = {}) {\n        const { reliable: o, destinationIdentities: s, topic: a } = i;\n        yield n.publishData(r, {\n            destinationIdentities: s,\n            topic: a,\n            reliable: o\n        });\n    });\n}\nfunction bo(e, t, n) {\n    const r = Array.isArray(t) ? t : [\n        t\n    ], i = ao(e).pipe(Qe(([, , , c])=>t === void 0 || c !== void 0 && r.includes(c)), A(([c, u, , l])=>{\n        const f = {\n            payload: c,\n            topic: l,\n            from: u\n        };\n        return n == null || n(f), f;\n    }));\n    let o;\n    const s = new k((c)=>{\n        o = c;\n    });\n    return {\n        messageObservable: i,\n        isSendingObservable: s,\n        send: (c, ...u)=>V(this, [\n                c,\n                ...u\n            ], function*(l, f = {}) {\n                o.next(!0);\n                try {\n                    yield Mn(e.localParticipant, l, Z({\n                        topic: r[0]\n                    }, f));\n                } finally{\n                    o.next(!1);\n                }\n            })\n    };\n}\nvar Ie = /* @__PURE__ */ new WeakMap();\nfunction go(e) {\n    return e.ignoreLegacy == !0;\n}\nvar yo = (e)=>JSON.parse(new TextDecoder().decode(e)), wo = (e)=>new TextEncoder().encode(JSON.stringify(e));\nfunction xs(e, t) {\n    var n, r, i, o, s, a;\n    const c = ()=>{\n        var g, S, C;\n        return ((g = e.serverInfo) == null ? void 0 : g.edition) === 1 || !!((S = e.serverInfo) != null && S.version) && (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.compareVersions)((C = e.serverInfo) == null ? void 0 : C.version, \"1.8.2\") > 0;\n    }, u = new J(), l = (n = t == null ? void 0 : t.channelTopic) != null ? n : vo.CHAT, f = (r = t == null ? void 0 : t.channelTopic) != null ? r : mo.CHAT;\n    let h = !1;\n    Ie.has(e) || (h = !0);\n    const d = (i = Ie.get(e)) != null ? i : /* @__PURE__ */ new Map(), m = (o = d.get(l)) != null ? o : new J();\n    d.set(l, m), Ie.set(e, d);\n    const p = (s = t == null ? void 0 : t.messageDecoder) != null ? s : yo;\n    if (h) {\n        e.registerTextStreamHandler(l, (S, C)=>V(this, null, function*() {\n                const { id: $, timestamp: I } = S.info;\n                Ge(S).pipe(ct((T, L)=>T + L), A((T)=>({\n                        id: $,\n                        timestamp: I,\n                        message: T,\n                        from: e.getParticipantByIdentity(C.identity)\n                    }))).subscribe({\n                    next: (T)=>m.next(T)\n                });\n            }));\n        const { messageObservable: g } = bo(e, [\n            f\n        ]);\n        g.pipe(A((S)=>{\n            const C = p(S.payload);\n            return go(C) ? void 0 : Ee(Z({}, C), {\n                from: S.from\n            });\n        }), Qe((S)=>!!S), Nt(u)).subscribe(m);\n    }\n    const b = m.pipe(ct((g, S)=>{\n        if (\"id\" in S && g.find((C)=>{\n            var $, I;\n            return (($ = C.from) == null ? void 0 : $.identity) === ((I = S.from) == null ? void 0 : I.identity) && C.id === S.id;\n        })) {\n            const C = g.findIndex(($)=>$.id === S.id);\n            if (C > -1) {\n                const $ = g[C];\n                g[C] = Ee(Z({}, S), {\n                    timestamp: $.timestamp,\n                    editTimestamp: S.timestamp\n                });\n            }\n            return [\n                ...g\n            ];\n        }\n        return [\n            ...g,\n            S\n        ];\n    }, []), Nt(u)), v = new ln(!1), x = (a = t == null ? void 0 : t.messageEncoder) != null ? a : wo, E = (g, S)=>V(this, null, function*() {\n            var C;\n            S || (S = {}), (C = S.topic) != null || (S.topic = l), v.next(!0);\n            try {\n                const I = {\n                    id: (yield e.localParticipant.sendText(g, S)).id,\n                    timestamp: Date.now(),\n                    message: g,\n                    from: e.localParticipant,\n                    attachedFiles: S.attachments\n                };\n                m.next(I);\n                const z = x(Ee(Z({}, I), {\n                    ignoreLegacy: c()\n                }));\n                return yield Mn(e.localParticipant, z, {\n                    reliable: !0,\n                    topic: f\n                }), I;\n            } finally{\n                v.next(!1);\n            }\n        });\n    function P() {\n        u.next(), u.complete(), m.complete(), Ie.delete(e), e.unregisterTextStreamHandler(l);\n    }\n    return e.once(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected, P), {\n        messageObservable: b,\n        isSendingObservable: v,\n        send: E\n    };\n}\nfunction Ss() {\n    const e = (n)=>V(this, null, function*() {\n            _.info(\"Start Audio for room: \", n), yield n.startAudio();\n        });\n    return {\n        className: F(\"start-audio-button\"),\n        roomAudioPlaybackAllowedObservable: co,\n        handleStartAudioPlayback: e\n    };\n}\nfunction Es() {\n    const e = (n)=>V(this, null, function*() {\n            _.info(\"Start Video for room: \", n), yield n.startVideo();\n        });\n    return {\n        className: F(\"start-audio-button\"),\n        roomVideoPlaybackAllowedObservable: uo,\n        handleStartVideoPlayback: e\n    };\n}\nfunction Ts() {\n    return {\n        className: [\n            F(\"button\"),\n            F(\"chat-toggle\")\n        ].join(\" \")\n    };\n}\nfunction Cs() {\n    return {\n        className: [\n            F(\"button\"),\n            F(\"focus-toggle-button\")\n        ].join(\" \")\n    };\n}\nfunction Ps() {\n    return {\n        className: \"lk-clear-pin-button lk-button\"\n    };\n}\nfunction Os() {\n    return {\n        className: \"lk-room-container\"\n    };\n}\nfunction Vt(e, t, n = !0) {\n    const i = [\n        e.localParticipant,\n        ...Array.from(e.remoteParticipants.values())\n    ], o = [];\n    return i.forEach((s)=>{\n        t.forEach((a)=>{\n            const c = Array.from(s.trackPublications.values()).filter((u)=>u.source === a && // either return all or only the ones that are subscribed\n                (!n || u.track)).map((u)=>({\n                    participant: s,\n                    publication: u,\n                    source: u.source\n                }));\n            o.push(...c);\n        });\n    }), {\n        trackReferences: o,\n        participants: i\n    };\n}\nfunction Ht(e, t, n = !1) {\n    const { sources: r, kind: i, name: o } = t;\n    return Array.from(e.trackPublications.values()).filter((a)=>(!r || r.includes(a.source)) && (!i || a.kind === i) && (!o || a.trackName === o) && // either return all or only the ones that are subscribed\n        (!n || a.track)).map((a)=>({\n            participant: e,\n            publication: a,\n            source: a.source\n        }));\n}\nfunction As(e, t, n) {\n    var r, i;\n    const o = (r = n.additionalRoomEvents) != null ? r : Cn, s = (i = n.onlySubscribed) != null ? i : !0, a = Array.from(/* @__PURE__ */ new Set([\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged,\n        ...o\n    ]).values());\n    return le(e, ...a).pipe(A((u)=>{\n        const l = Vt(u, t, s);\n        return _.debug(`TrackReference[] was updated. (length ${l.trackReferences.length})`, l), l;\n    }), D(Vt(e, t, s)));\n}\nfunction ks(e, t) {\n    return we(e, ...zi).pipe(A((r)=>{\n        const i = Ht(r, t);\n        return _.debug(`TrackReference[] was updated. (length ${i.length})`, i), i;\n    }), D(Ht(e, t)));\n}\nfunction Rn(e, t) {\n    return new k((r)=>{\n        const i = (...s)=>{\n            r.next(s);\n        };\n        return e.on(t, i), ()=>{\n            e.off(t, i);\n        };\n    });\n}\nfunction Ls(e) {\n    return Rn(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.TranscriptionReceived);\n}\nfunction _s(e) {\n    return Rn(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.TimeSyncUpdate).pipe(A(([t])=>t));\n}\nfunction Is(e, t = 1e3) {\n    if (e === null) return Dt(!1);\n    const n = at(e, \"mousemove\", {\n        passive: !0\n    }).pipe(A(()=>!0)), r = n.pipe(hi({\n        each: t,\n        with: ()=>We(Dt(!1), r.pipe(Mi(n)))\n    }), ki());\n    return r;\n}\nfunction xo(e, t) {\n    if (typeof localStorage > \"u\") {\n        _.error(\"Local storage is not available.\");\n        return;\n    }\n    try {\n        if (t) {\n            const n = Object.fromEntries(Object.entries(t).filter(([, r])=>r !== \"\"));\n            localStorage.setItem(e, JSON.stringify(n));\n        }\n    } catch (n) {\n        _.error(`Error setting item to local storage: ${n}`);\n    }\n}\nfunction So(e) {\n    if (typeof localStorage > \"u\") {\n        _.error(\"Local storage is not available.\");\n        return;\n    }\n    try {\n        const t = localStorage.getItem(e);\n        if (!t) {\n            _.warn(`Item with key ${e} does not exist in local storage.`);\n            return;\n        }\n        return JSON.parse(t);\n    } catch (t) {\n        _.error(`Error getting item from local storage: ${t}`);\n        return;\n    }\n}\nfunction Eo(e) {\n    return {\n        load: ()=>So(e),\n        save: (t)=>xo(e, t)\n    };\n}\nvar To = `${Tn}-user-choices`, Se = {\n    videoEnabled: !0,\n    audioEnabled: !0,\n    videoDeviceId: \"default\",\n    audioDeviceId: \"default\",\n    username: \"\"\n}, { load: Co, save: Po } = Eo(To);\nfunction Ms(e, t = !1) {\n    t !== !0 && Po(e);\n}\nfunction Rs(e, t = !1) {\n    var n, r, i, o, s;\n    const a = {\n        videoEnabled: (n = e == null ? void 0 : e.videoEnabled) != null ? n : Se.videoEnabled,\n        audioEnabled: (r = e == null ? void 0 : e.audioEnabled) != null ? r : Se.audioEnabled,\n        videoDeviceId: (i = e == null ? void 0 : e.videoDeviceId) != null ? i : Se.videoDeviceId,\n        audioDeviceId: (o = e == null ? void 0 : e.audioDeviceId) != null ? o : Se.audioDeviceId,\n        username: (s = e == null ? void 0 : e.username) != null ? s : Se.username\n    };\n    if (t) return a;\n    {\n        const c = Co();\n        return Z(Z({}, a), c ?? {});\n    }\n}\nvar nt = null, rt = null, Oo = 0;\nfunction zt() {\n    return nt || (nt = /* @__PURE__ */ new Map()), nt;\n}\nfunction Ao() {\n    return rt || (rt = /* @__PURE__ */ new WeakMap()), rt;\n}\nfunction ko(e, t) {\n    const n = Ao();\n    let r = n.get(e);\n    return r || (r = `room_${Oo++}`, n.set(e, r)), `${r}:${t}`;\n}\nfunction Ds(e, t) {\n    const n = ko(e, t), r = zt(), i = r.get(n);\n    if (i) return i;\n    const o = new J(), s = [];\n    e.registerTextStreamHandler(t, (c, u)=>V(this, null, function*() {\n            Ge(c).pipe(ct((f, h)=>f + h, \"\")).subscribe((f)=>{\n                const h = s.findIndex((d)=>d.streamInfo.id === c.info.id);\n                h !== -1 ? (s[h] = Ee(Z({}, s[h]), {\n                    text: f\n                }), o.next([\n                    ...s\n                ])) : (s.push({\n                    text: f,\n                    participantInfo: u,\n                    streamInfo: c.info\n                }), o.next([\n                    ...s\n                ]));\n            });\n        }));\n    const a = o.asObservable().pipe(Ii());\n    return r.set(n, a), e.once(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected, ()=>{\n        o.complete(), zt().delete(n);\n    }), a;\n}\nfunction Dn(e, t) {\n    if (t.msg === \"show_chat\") return {\n        ...e,\n        showChat: !0,\n        unreadMessages: 0\n    };\n    if (t.msg === \"hide_chat\") return {\n        ...e,\n        showChat: !1\n    };\n    if (t.msg === \"toggle_chat\") {\n        const n = {\n            ...e,\n            showChat: !e.showChat\n        };\n        return n.showChat === !0 && (n.unreadMessages = 0), n;\n    } else return t.msg === \"unread_msg\" ? {\n        ...e,\n        unreadMessages: t.count\n    } : t.msg === \"toggle_settings\" ? {\n        ...e,\n        showSettings: !e.showSettings\n    } : {\n        ...e\n    };\n}\nfunction $n(e, t) {\n    return t.msg === \"set_pin\" ? [\n        t.trackReference\n    ] : t.msg === \"clear_pin\" ? [] : {\n        ...e\n    };\n}\nconst Nn = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction $s() {\n    const e = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Nn);\n    if (!e) throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n    return e;\n}\nfunction Ns(e) {\n    const t = Lo();\n    if (e ?? (e = t), !e) throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n    return e;\n}\nfunction Fs() {\n    const [e, t] = react__WEBPACK_IMPORTED_MODULE_1__.useReducer($n, On), [n, r] = react__WEBPACK_IMPORTED_MODULE_1__.useReducer(Dn, An);\n    return {\n        pin: {\n            dispatch: t,\n            state: e\n        },\n        widget: {\n            dispatch: r,\n            state: n\n        }\n    };\n}\nfunction Us(e) {\n    const [t, n] = react__WEBPACK_IMPORTED_MODULE_1__.useReducer($n, On), [r, i] = react__WEBPACK_IMPORTED_MODULE_1__.useReducer(Dn, An);\n    return e ?? {\n        pin: {\n            dispatch: n,\n            state: t\n        },\n        widget: {\n            dispatch: i,\n            state: r\n        }\n    };\n}\nfunction Lo() {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useContext(Nn);\n}\nconst Fn = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction js() {\n    const e = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Fn);\n    if (!e) throw Error(\"tried to access track context outside of track context provider\");\n    return e;\n}\nfunction Un() {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useContext(Fn);\n}\nfunction Ws(e) {\n    const t = Un(), n = e ?? t;\n    if (!n) throw new Error(\"No TrackRef, make sure you are inside a TrackRefContext or pass the TrackRef explicitly\");\n    return n;\n}\nconst jn = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction Bs() {\n    const e = react__WEBPACK_IMPORTED_MODULE_1__.useContext(jn);\n    if (!e) throw Error(\"tried to access participant context outside of participant context provider\");\n    return e;\n}\nfunction _o() {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useContext(jn);\n}\nfunction Vs(e) {\n    const t = _o(), n = Un(), r = e ?? t ?? (n == null ? void 0 : n.participant);\n    if (!r) throw new Error(\"No participant provided, make sure you are inside a participant context or pass the participant explicitly\");\n    return r;\n}\nconst Wn = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction Hs() {\n    const e = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Wn);\n    if (!e) throw Error(\"tried to access room context outside of livekit room component\");\n    return e;\n}\nfunction Io() {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useContext(Wn);\n}\nfunction zs(e) {\n    const t = Io(), n = e ?? t;\n    if (!n) throw new Error(\"No room provided, make sure you are inside a Room context or pass the room explicitly\");\n    return n;\n}\nconst Mo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction Ys(e) {\n    const t = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Mo);\n    if (e === !0) {\n        if (t) return t;\n        throw Error(\"tried to access feature context, but none is present\");\n    }\n    return t;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/contexts-CPsnPrz2.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/hooks-DEsFub3E.mjs":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/hooks-DEsFub3E.mjs ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Tt),\n/* harmony export */   B: () => (/* binding */ Rt),\n/* harmony export */   C: () => (/* binding */ Ze),\n/* harmony export */   D: () => (/* binding */ vt),\n/* harmony export */   E: () => (/* binding */ yt),\n/* harmony export */   F: () => (/* binding */ Xe),\n/* harmony export */   G: () => (/* binding */ z),\n/* harmony export */   H: () => (/* binding */ Ye),\n/* harmony export */   I: () => (/* binding */ Ot),\n/* harmony export */   J: () => (/* binding */ It),\n/* harmony export */   K: () => (/* binding */ Lt),\n/* harmony export */   L: () => (/* binding */ Ft),\n/* harmony export */   M: () => (/* binding */ $),\n/* harmony export */   N: () => (/* binding */ Vt),\n/* harmony export */   O: () => (/* binding */ et),\n/* harmony export */   P: () => (/* binding */ Jt),\n/* harmony export */   Q: () => (/* binding */ Qt),\n/* harmony export */   R: () => (/* binding */ jt),\n/* harmony export */   S: () => (/* binding */ Yt),\n/* harmony export */   T: () => (/* binding */ ut),\n/* harmony export */   U: () => (/* binding */ ft),\n/* harmony export */   V: () => (/* binding */ Kt),\n/* harmony export */   W: () => (/* binding */ pt),\n/* harmony export */   X: () => (/* binding */ Zt),\n/* harmony export */   Y: () => (/* binding */ en),\n/* harmony export */   Z: () => (/* binding */ tn),\n/* harmony export */   a: () => (/* binding */ O),\n/* harmony export */   b: () => (/* binding */ qt),\n/* harmony export */   c: () => (/* binding */ Pt),\n/* harmony export */   d: () => (/* binding */ kt),\n/* harmony export */   e: () => (/* binding */ wt),\n/* harmony export */   f: () => (/* binding */ Bt),\n/* harmony export */   g: () => (/* binding */ zt),\n/* harmony export */   h: () => (/* binding */ _t),\n/* harmony export */   i: () => (/* binding */ Mt),\n/* harmony export */   j: () => (/* binding */ b),\n/* harmony export */   k: () => (/* binding */ xt),\n/* harmony export */   l: () => (/* binding */ Dt),\n/* harmony export */   m: () => (/* binding */ Ht),\n/* harmony export */   n: () => (/* binding */ Et),\n/* harmony export */   o: () => (/* binding */ Ct),\n/* harmony export */   p: () => (/* binding */ Ut),\n/* harmony export */   q: () => (/* binding */ je),\n/* harmony export */   r: () => (/* binding */ Ke),\n/* harmony export */   s: () => (/* binding */ Xt),\n/* harmony export */   t: () => (/* binding */ Wt),\n/* harmony export */   u: () => (/* binding */ ht),\n/* harmony export */   v: () => (/* binding */ Nt),\n/* harmony export */   w: () => (/* binding */ $t),\n/* harmony export */   x: () => (/* binding */ Gt),\n/* harmony export */   y: () => (/* binding */ At),\n/* harmony export */   z: () => (/* binding */ St)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contexts-CPsnPrz2.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/contexts-CPsnPrz2.mjs\");\n/* harmony import */ var _room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./room-BgiuQa2X.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/room-BgiuQa2X.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.11.2/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n\n\n\n\nconst Qe = (e)=>{\n    const n = react__WEBPACK_IMPORTED_MODULE_0__.useRef(e);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        n.current = e;\n    }), n;\n};\nfunction $e(e, n) {\n    const t = He(), a = Qe(n);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        let s = !1;\n        const c = e.current;\n        if (!c) return;\n        function o(u, i) {\n            s || a.current(u, i);\n        }\n        return t == null || t.subscribe(c, o), ()=>{\n            s = !0, t == null || t.unsubscribe(c, o);\n        };\n    }, [\n        e.current,\n        t,\n        a\n    ]), t == null ? void 0 : t.observer;\n}\nfunction Ge() {\n    let e = !1, n = [];\n    const t = /* @__PURE__ */ new Map();\n    if (true) return;\n    const a = new ResizeObserver((s, c)=>{\n        n = n.concat(s), e || window.requestAnimationFrame(()=>{\n            const o = /* @__PURE__ */ new Set();\n            for(let u = 0; u < n.length; u++){\n                if (o.has(n[u].target)) continue;\n                o.add(n[u].target);\n                const i = t.get(n[u].target);\n                i == null || i.forEach((d)=>d(n[u], c));\n            }\n            n = [], e = !1;\n        }), e = !0;\n    });\n    return {\n        observer: a,\n        subscribe (s, c) {\n            a.observe(s);\n            const o = t.get(s) ?? [];\n            o.push(c), t.set(s, o);\n        },\n        unsubscribe (s, c) {\n            const o = t.get(s) ?? [];\n            if (o.length === 1) {\n                a.unobserve(s), t.delete(s);\n                return;\n            }\n            const u = o.indexOf(c);\n            u !== -1 && o.splice(u, 1), t.set(s, o);\n        }\n    };\n}\nlet D;\nconst He = ()=>D || (D = Ge()), je = (e)=>{\n    const [n, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        width: 0,\n        height: 0\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (e.current) {\n            const { width: s, height: c } = e.current.getBoundingClientRect();\n            t({\n                width: s,\n                height: c\n            });\n        }\n    }, [\n        e.current\n    ]);\n    const a = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((s)=>t(s.contentRect), []);\n    return $e(e, a), n;\n};\nfunction b(e, n, t = !0) {\n    const [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (t && s(n),  true || 0) return;\n        const c = e.subscribe(s);\n        return ()=>c.unsubscribe();\n    }, [\n        e,\n        t\n    ]), a;\n}\nfunction St(e) {\n    const n = (c)=> false ? 0 : !1, [t, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n(e));\n    function s() {\n        a(n(e));\n    }\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const c = window.matchMedia(e);\n        return s(), c.addListener ? c.addListener(s) : c.addEventListener(\"change\", s), ()=>{\n            c.removeListener ? c.removeListener(s) : c.removeEventListener(\"change\", s);\n        };\n    }, [\n        e\n    ]), t;\n}\nfunction vt(e) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), t = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async ()=>{\n        await n.startAudio();\n    }, [\n        n\n    ]), a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.r)(n), [\n        n\n    ]), { canPlayAudio: s } = b(a, {\n        canPlayAudio: n.canPlaybackAudio\n    });\n    return {\n        canPlayAudio: s,\n        startAudio: t\n    };\n}\nfunction ht(e) {\n    const { state: n, dispatch: t } = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a)().pin;\n    return {\n        buttonProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n            const { className: s } = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.b)();\n            return (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(e, {\n                className: s,\n                disabled: !(n != null && n.length),\n                onClick: ()=>{\n                    t && t({\n                        msg: \"clear_pin\"\n                    });\n                }\n            });\n        }, [\n            e,\n            t,\n            n\n        ])\n    };\n}\nfunction Mt(e = {}) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(e.participant), { className: t, connectionQualityObserver: a } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.d)(n), [\n        n\n    ]), s = b(a, livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionQuality.Unknown);\n    return {\n        className: t,\n        quality: s\n    };\n}\nfunction O(e) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(n), [\n        n\n    ]);\n    return b(t, n.state);\n}\nfunction yt(e, n) {\n    const t = typeof e == \"function\" ? e : n, a = typeof e == \"string\" ? e : void 0, s = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), { send: c, messageObservable: o, isSendingObservable: u } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(s, a, t), [\n        s,\n        a,\n        t\n    ]), i = b(o, void 0), d = b(u, !1);\n    return {\n        message: i,\n        send: c,\n        isSending: d\n    };\n}\nfunction Pt(e) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), t = O(n);\n    return {\n        buttonProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n            const { className: s, disconnect: c } = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(n);\n            return (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(e, {\n                className: s,\n                onClick: ()=>c(e.stopTracks ?? !0),\n                disabled: t === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected\n            });\n        }, [\n            n,\n            e,\n            t\n        ])\n    };\n}\nfunction Xe(e) {\n    if (e.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.LocalTrackPublication) {\n        const n = e.publication.track;\n        if (n) {\n            const { facingMode: t } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.facingModeFromLocalTrack)(n);\n            return t;\n        }\n    }\n    return \"undefined\";\n}\nfunction kt({ trackRef: e, props: n }) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(e), a = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.j)(), { className: s } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.k)(), []), c = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(t, a == null ? void 0 : a.pin.state), [\n        t,\n        a == null ? void 0 : a.pin.state\n    ]);\n    return {\n        mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(n, {\n                className: s,\n                onClick: (u)=>{\n                    var i, d, l, f, p;\n                    (i = n.onClick) == null || i.call(n, u), c ? (l = a == null ? void 0 : (d = a.pin).dispatch) == null || l.call(d, {\n                        msg: \"clear_pin\"\n                    }) : (p = a == null ? void 0 : (f = a.pin).dispatch) == null || p.call(f, {\n                        msg: \"set_pin\",\n                        trackReference: t\n                    });\n                }\n            }), [\n            n,\n            s,\n            t,\n            c,\n            a == null ? void 0 : a.pin\n        ]),\n        inFocus: c\n    };\n}\nfunction Et(e, n, t = {}) {\n    const a = t.gridLayouts ?? _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.G, { width: s, height: c } = je(e), o = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.n)(a, n, s, c);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        e.current && o && (e.current.style.setProperty(\"--lk-col-count\", o == null ? void 0 : o.columns.toString()), e.current.style.setProperty(\"--lk-row-count\", o == null ? void 0 : o.rows.toString()));\n    }, [\n        e,\n        o\n    ]), {\n        layout: o,\n        containerWidth: s,\n        containerHeight: c\n    };\n}\nfunction z(e, n = {}) {\n    var u, i;\n    const t = typeof e == \"string\" ? n.participant : e.participant, a = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(t), s = typeof e == \"string\" ? {\n        participant: a,\n        source: e\n    } : e, [c, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!!((u = s.publication) != null && u.isMuted || (i = a.getTrackPublication(s.source)) != null && i.isMuted));\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const d = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.o)(s).subscribe(o);\n        return ()=>d.unsubscribe();\n    }, [\n        (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(s)\n    ]), c;\n}\nfunction Ye(e) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(e), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.q)(n), [\n        n\n    ]);\n    return b(t, n.isSpeaking);\n}\nfunction Ze(e = {}) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e.room), [t, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n.localParticipant), [s, c] = react__WEBPACK_IMPORTED_MODULE_0__.useState(t.isMicrophoneEnabled), [o, u] = react__WEBPACK_IMPORTED_MODULE_0__.useState(t.isMicrophoneEnabled), [i, d] = react__WEBPACK_IMPORTED_MODULE_0__.useState(t.lastMicrophoneError), [l, f] = react__WEBPACK_IMPORTED_MODULE_0__.useState(t.lastCameraError), [p, g] = react__WEBPACK_IMPORTED_MODULE_0__.useState(t.isMicrophoneEnabled), [S, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0), [M, v] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0), P = (h)=>{\n        u(h.isCameraEnabled), c(h.isMicrophoneEnabled), g(h.isScreenShareEnabled), v(h.cameraTrack), m(h.microphoneTrack), d(h.participant.lastMicrophoneError), f(h.participant.lastCameraError), a(h.participant);\n    };\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const h = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(n.localParticipant).subscribe(P);\n        return ()=>h.unsubscribe();\n    }, [\n        n\n    ]), {\n        isMicrophoneEnabled: s,\n        isScreenShareEnabled: p,\n        isCameraEnabled: o,\n        microphoneTrack: S,\n        cameraTrack: M,\n        lastMicrophoneError: i,\n        lastCameraError: l,\n        localParticipant: t\n    };\n}\nfunction Tt() {\n    const e = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(e.localParticipant), [\n        e\n    ]);\n    return b(n, e.localParticipant.permissions);\n}\nfunction wt({ kind: e, room: n, track: t, requestPermissions: a, onError: s }) {\n    const c = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(), o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>n ?? c ?? new livekit_client__WEBPACK_IMPORTED_MODULE_1__.Room(), [\n        n,\n        c\n    ]), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.x)(e, s, a), [\n        e,\n        a,\n        s\n    ]), i = b(u, []), [d, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState((o == null ? void 0 : o.getActiveDevice(e)) ?? \"default\"), { className: f, activeDeviceObservable: p, setActiveMediaDevice: g } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.y)(e, o), [\n        e,\n        o,\n        t\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const S = p.subscribe((m)=>{\n            m && (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.info(\"setCurrentDeviceId\", m), l(m));\n        });\n        return ()=>{\n            S == null || S.unsubscribe();\n        };\n    }, [\n        p\n    ]), {\n        devices: i,\n        className: f,\n        activeDeviceId: d,\n        setActiveMediaDevice: g\n    };\n}\nfunction At({ kind: e, onError: n }) {\n    const t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.x)(e, n), [\n        e,\n        n\n    ]);\n    return b(t, []);\n}\nfunction Ke(e, n, t = {}) {\n    const a = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]), s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1), c = n !== s.current, o = typeof t.customSortFunction == \"function\" ? t.customSortFunction(e) : (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.z)(e);\n    let u = [\n        ...o\n    ];\n    if (c === !1) try {\n        u = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.A)(a.current, o, n);\n    } catch (i) {\n        _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.error(\"Error while running updatePages(): \", i);\n    }\n    return c ? a.current = o : a.current = u, s.current = n, u;\n}\nfunction Ct(e, n) {\n    const [t, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(1), s = Math.max(Math.ceil(n.length / e), 1);\n    t > s && a(s);\n    const c = t * e, o = c - e, u = (f)=>{\n        a((p)=>f === \"next\" ? p === s ? p : p + 1 : p === 1 ? p : p - 1);\n    }, i = (f)=>{\n        f > s ? a(s) : f < 1 ? a(1) : a(f);\n    }, l = Ke(n, e).slice(o, c);\n    return {\n        totalPageCount: s,\n        nextPage: ()=>u(\"next\"),\n        prevPage: ()=>u(\"previous\"),\n        setPage: i,\n        firstItemIndex: o,\n        lastItemIndex: c,\n        tracks: l,\n        currentPage: t\n    };\n}\nfunction Ot(e = {}) {\n    let n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.B)();\n    e.participant && (n = e.participant);\n    const t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.C)(n), [\n        n\n    ]), { identity: a, name: s, metadata: c } = b(t, {\n        name: n == null ? void 0 : n.name,\n        identity: n == null ? void 0 : n.identity,\n        metadata: n == null ? void 0 : n.metadata\n    });\n    return {\n        identity: a,\n        name: s,\n        metadata: c\n    };\n}\nfunction It(e = {}) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(e.participant), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(n), [\n        n\n    ]);\n    return b(t, n.permissions);\n}\nfunction Dt({ trackRef: e, onParticipantClick: n, disableSpeakingIndicator: t, htmlProps: a }) {\n    const s = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(e), c = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className: p } = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.D)();\n        return (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(a, {\n            className: p,\n            onClick: (g)=>{\n                var S;\n                if ((S = a.onClick) == null || S.call(a, g), typeof n == \"function\") {\n                    const m = s.publication ?? s.participant.getTrackPublication(s.source);\n                    n({\n                        participant: s.participant,\n                        track: m\n                    });\n                }\n            }\n        });\n    }, [\n        a,\n        n,\n        s.publication,\n        s.source,\n        s.participant\n    ]), o = s.participant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            participant: s.participant,\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n            publication: o\n        }), [\n        o,\n        s.participant\n    ]), i = z(s), d = z(u), l = Ye(s.participant), f = Xe(s);\n    return {\n        elementProps: {\n            \"data-lk-audio-muted\": d,\n            \"data-lk-video-muted\": i,\n            \"data-lk-speaking\": t === !0 ? !1 : l,\n            \"data-lk-local-participant\": s.participant.isLocal,\n            \"data-lk-source\": s.source,\n            \"data-lk-facing-mode\": f,\n            ...c\n        }\n    };\n}\nfunction $(e = {}) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e.room), [t, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const s = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.E)(n, {\n            additionalRoomEvents: e.updateOnlyOn\n        }).subscribe(a);\n        return ()=>s.unsubscribe();\n    }, [\n        n,\n        JSON.stringify(e.updateOnlyOn)\n    ]), t;\n}\nfunction Lt(e = {}) {\n    const n = $(e), { localParticipant: t } = Ze(e);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>[\n            t,\n            ...n\n        ], [\n        t,\n        n\n    ]);\n}\nfunction Rt(e) {\n    return e = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.F)(e), react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.pin.state) !== void 0 && e.pin.state.length >= 1 ? e.pin.state : [], [\n        e.pin.state\n    ]);\n}\nfunction Ft(e, n = {}) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), [a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n.updateOnlyOn), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>typeof e == \"string\" ? (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.H)(t, e, {\n            additionalEvents: a\n        }) : (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.I)(t, e, {\n            additionalEvents: a\n        }), [\n        t,\n        JSON.stringify(e),\n        a\n    ]), [c, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        p: void 0\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const u = s.subscribe((i)=>o({\n                p: i\n            }));\n        return ()=>u.unsubscribe();\n    }, [\n        s\n    ]), c.p;\n}\nfunction Nt(e = {}) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e.room), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.J)(n), [\n        n\n    ]), { name: a, metadata: s } = b(t, {\n        name: n.name,\n        metadata: n.metadata\n    });\n    return {\n        name: a,\n        metadata: s\n    };\n}\nfunction et() {\n    const e = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.K)(e), [\n        e\n    ]);\n    return b(n, e.activeSpeakers);\n}\nfunction Vt(e) {\n    const [n, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.M)(e)), a = et();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t((0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.M)(e));\n    }, [\n        a,\n        e\n    ]), n;\n}\nfunction Bt({ room: e, props: n }) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), { className: a, roomAudioPlaybackAllowedObservable: s, handleStartAudioPlayback: c } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.N)(), []), o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>s(t), [\n        t,\n        s\n    ]), { canPlayAudio: u } = b(o, {\n        canPlayAudio: t.canPlaybackAudio\n    });\n    return {\n        mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(n, {\n                className: a,\n                onClick: ()=>{\n                    c(t);\n                },\n                style: {\n                    display: u ? \"none\" : \"block\"\n                }\n            }), [\n            n,\n            a,\n            u,\n            c,\n            t\n        ]),\n        canPlayAudio: u\n    };\n}\nfunction zt({ room: e, props: n }) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), { className: a, roomVideoPlaybackAllowedObservable: s, handleStartVideoPlayback: c } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.O)(), []), o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>s(t), [\n        t,\n        s\n    ]), { canPlayVideo: u } = b(o, {\n        canPlayVideo: t.canPlaybackVideo\n    });\n    return {\n        mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(n, {\n                className: a,\n                onClick: ()=>{\n                    c(t);\n                },\n                style: {\n                    display: u ? \"none\" : \"block\"\n                }\n            }), [\n            n,\n            a,\n            u,\n            c,\n            t\n        ]),\n        canPlayVideo: u\n    };\n}\nfunction Ut(e, n = {}) {\n    const t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), a = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), s = n.minSwipeDistance ?? 50, c = (i)=>{\n        a.current = null, t.current = i.targetTouches[0].clientX;\n    }, o = (i)=>{\n        a.current = i.targetTouches[0].clientX;\n    }, u = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        if (!t.current || !a.current) return;\n        const i = t.current - a.current, d = i > s, l = i < -s;\n        d && n.onLeftSwipe && n.onLeftSwipe(), l && n.onRightSwipe && n.onRightSwipe();\n    }, [\n        s,\n        n\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const i = e.current;\n        return i && (i.addEventListener(\"touchstart\", c, {\n            passive: !0\n        }), i.addEventListener(\"touchmove\", o, {\n            passive: !0\n        }), i.addEventListener(\"touchend\", u, {\n            passive: !0\n        })), ()=>{\n            i && (i.removeEventListener(\"touchstart\", c), i.removeEventListener(\"touchmove\", o), i.removeEventListener(\"touchend\", u));\n        };\n    }, [\n        e,\n        u\n    ]);\n}\nfunction qt({ props: e }) {\n    const { dispatch: n, state: t } = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a)().widget, { className: a } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.P)(), []);\n    return {\n        mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(e, {\n                className: a,\n                onClick: ()=>{\n                    n && n({\n                        msg: \"toggle_chat\"\n                    });\n                },\n                \"aria-pressed\": t != null && t.showChat ? \"true\" : \"false\",\n                \"data-lk-unread-msgs\": t ? t.unreadMessages < 10 ? t.unreadMessages.toFixed(0) : \"9+\" : \"0\"\n            }), [\n            e,\n            a,\n            n,\n            t\n        ])\n    };\n}\nfunction Jt(e, n, t = {}) {\n    const [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var o;\n        if (e === void 0) throw Error(\"token endpoint needs to be defined\");\n        if (((o = t.userInfo) == null ? void 0 : o.identity) === void 0) return;\n        (async ()=>{\n            _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"fetching token\");\n            const u = new URLSearchParams({\n                ...t.userInfo,\n                roomName: n\n            }), i = await fetch(`${e}?${u.toString()}`);\n            if (!i.ok) {\n                _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.error(`Could not fetch token. Server responded with status ${i.status}: ${i.statusText}`);\n                return;\n            }\n            const { accessToken: d } = await i.json();\n            s(d);\n        })();\n    }, [\n        e,\n        n,\n        JSON.stringify(t)\n    ]), a;\n}\nfunction xt(e) {\n    var c, o;\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(e), { className: t, mediaMutedObserver: a } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.Q)(n), [\n        (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(n)\n    ]);\n    return {\n        isMuted: b(a, !!((c = n.publication) != null && c.isMuted || (o = n.participant.getTrackPublication(n.source)) != null && o.isMuted)),\n        className: t\n    };\n}\nfunction _t({ source: e, onChange: n, initialState: t, captureOptions: a, publishOptions: s, onDeviceError: c, ...o }) {\n    var P;\n    const u = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(), i = (P = u == null ? void 0 : u.localParticipant) == null ? void 0 : P.getTrackPublication(e), d = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1), { toggle: l, className: f, pendingObserver: p, enabledObserver: g } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>u ? (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.S)(e, u, a, s, c) : (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.T)(), [\n        u,\n        e,\n        JSON.stringify(a),\n        s\n    ]), S = b(p, !1), m = b(g, t ?? !!(i != null && i.isEnabled));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        n == null || n(m, d.current), d.current = !1;\n    }, [\n        m,\n        n\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t !== void 0 && (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"forcing initial toggle state\", e, t), l(t));\n    }, []);\n    const M = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(o, {\n            className: f\n        }), [\n        o,\n        f\n    ]), v = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((h)=>{\n        var I;\n        d.current = !0, l().catch(()=>d.current = !1), (I = o.onClick) == null || I.call(o, h);\n    }, [\n        o,\n        l\n    ]);\n    return {\n        toggle: l,\n        enabled: m,\n        pending: S,\n        track: i,\n        buttonProps: {\n            ...M,\n            \"aria-pressed\": m,\n            \"data-lk-source\": e,\n            \"data-lk-enabled\": m,\n            disabled: S,\n            onClick: v\n        }\n    };\n}\nfunction Wt(e = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera,\n    livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n    livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare,\n    livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShareAudio,\n    livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Unknown\n], n = {}) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(n.room), [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), [c, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e.map((d)=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.U)(d) ? d.source : d), [\n        JSON.stringify(e)\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const d = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.V)(t, u, {\n            additionalRoomEvents: n.updateOnlyOn,\n            onlySubscribed: n.onlySubscribed\n        }).subscribe(({ trackReferences: l, participants: f })=>{\n            _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"setting track bundles\", l, f), s(l), o(f);\n        });\n        return ()=>d.unsubscribe();\n    }, [\n        t,\n        JSON.stringify(n.onlySubscribed),\n        JSON.stringify(n.updateOnlyOn),\n        JSON.stringify(e)\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if ((0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.W)(e)) {\n            const d = nt(e, c), l = Array.from(a);\n            return c.forEach((f)=>{\n                d.has(f.identity) && (d.get(f.identity) ?? []).forEach((g)=>{\n                    if (a.find(({ participant: m, publication: M })=>f.identity === m.identity && M.source === g)) return;\n                    _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(`Add ${g} placeholder for participant ${f.identity}.`);\n                    const S = {\n                        participant: f,\n                        source: g\n                    };\n                    l.push(S);\n                });\n            }), l;\n        } else return a;\n    }, [\n        a,\n        c,\n        e\n    ]);\n}\nfunction tt(e, n) {\n    const t = new Set(e);\n    for (const a of n)t.delete(a);\n    return t;\n}\nfunction nt(e, n) {\n    const t = /* @__PURE__ */ new Map();\n    if ((0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.W)(e)) {\n        const a = e.filter((s)=>s.withPlaceholder).map((s)=>s.source);\n        n.forEach((s)=>{\n            const c = s.getTrackPublications().map((u)=>{\n                var i;\n                return (i = u.track) == null ? void 0 : i.source;\n            }).filter((u)=>u !== void 0), o = Array.from(tt(new Set(a), new Set(c)));\n            o.length > 0 && t.set(s.identity, o);\n        });\n    }\n    return t;\n}\nfunction st(e) {\n    const [n, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.X)(e)), { trackObserver: a } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.Y)(e), [\n        e.participant.sid ?? e.participant.identity,\n        e.source\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const s = a.subscribe((c)=>{\n            t(c);\n        });\n        return ()=>s == null ? void 0 : s.unsubscribe();\n    }, [\n        a\n    ]), {\n        participant: e.participant,\n        source: e.source ?? livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Unknown,\n        publication: n\n    };\n}\nfunction Qt(e, n) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(n);\n    return st({\n        name: e,\n        participant: t\n    });\n}\nfunction $t(e) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), t = O(n), a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>t === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected, [\n        t\n    ]), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.Z)(n, e), [\n        n,\n        e,\n        a\n    ]), c = b(s.isSendingObservable, !1), o = b(s.messageObservable, []);\n    return {\n        send: s.send,\n        chatMessages: o,\n        isSending: c\n    };\n}\nfunction Gt(e = {}) {\n    const [n, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__._)(e.defaults, e.preventLoad ?? !1)), a = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i)=>{\n        t((d)=>({\n                ...d,\n                audioEnabled: i\n            }));\n    }, []), s = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i)=>{\n        t((d)=>({\n                ...d,\n                videoEnabled: i\n            }));\n    }, []), c = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i)=>{\n        t((d)=>({\n                ...d,\n                audioDeviceId: i\n            }));\n    }, []), o = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i)=>{\n        t((d)=>({\n                ...d,\n                videoDeviceId: i\n            }));\n    }, []), u = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i)=>{\n        t((d)=>({\n                ...d,\n                username: i\n            }));\n    }, []);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.$)(n, e.preventSave ?? !1);\n    }, [\n        n,\n        e.preventSave\n    ]), {\n        userChoices: n,\n        saveAudioInputEnabled: a,\n        saveVideoInputEnabled: s,\n        saveAudioInputDeviceId: c,\n        saveVideoInputDeviceId: o,\n        saveUsername: u\n    };\n}\nfunction Ht(e, n = {}) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(e), a = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(n.room), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a0)(a, t), [\n        a,\n        t\n    ]);\n    return b(s, t.isLocal ? t.isE2EEEnabled : !!(t != null && t.isEncrypted));\n}\nfunction jt(e, n = {\n    fftSize: 32,\n    smoothingTimeConstant: 0\n}) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a1)(e) ? e.publication.track : e, [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!t || !t.mediaStream) return;\n        const { cleanup: c, analyser: o } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createAudioAnalyser)(t, n), u = o.frequencyBinCount, i = new Uint8Array(u), l = setInterval(()=>{\n            o.getByteFrequencyData(i);\n            let f = 0;\n            for(let p = 0; p < i.length; p++){\n                const g = i[p];\n                f += g * g;\n            }\n            s(Math.sqrt(f / i.length) / 255);\n        }, 1e3 / 30);\n        return ()=>{\n            c(), clearInterval(l);\n        };\n    }, [\n        t,\n        t == null ? void 0 : t.mediaStream,\n        JSON.stringify(n)\n    ]), a;\n}\nconst at = (e)=>{\n    const n = (t)=>{\n        let c = 1 - Math.max(-100, Math.min(-10, t)) * -1 / 100;\n        return c = Math.sqrt(c), c;\n    };\n    return e.map((t)=>t === -1 / 0 ? 0 : n(t));\n}, rt = {\n    bands: 5,\n    loPass: 100,\n    hiPass: 600,\n    updateInterval: 32,\n    analyserOptions: {\n        fftSize: 2048\n    }\n};\nfunction Xt(e, n = {}) {\n    var o;\n    const t = e instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track ? e : (o = e == null ? void 0 : e.publication) == null ? void 0 : o.track, a = {\n        ...rt,\n        ...n\n    }, [s, c] = react__WEBPACK_IMPORTED_MODULE_0__.useState(new Array(a.bands).fill(0));\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!t || !(t != null && t.mediaStream)) return;\n        const { analyser: u, cleanup: i } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createAudioAnalyser)(t, a.analyserOptions), d = u.frequencyBinCount, l = new Float32Array(d), p = setInterval(()=>{\n            u.getFloatFrequencyData(l);\n            let g = new Float32Array(l.length);\n            for(let v = 0; v < l.length; v++)g[v] = l[v];\n            g = g.slice(n.loPass, n.hiPass);\n            const S = at(g), m = Math.ceil(S.length / a.bands), M = [];\n            for(let v = 0; v < a.bands; v++){\n                const P = S.slice(v * m, (v + 1) * m).reduce((h, I)=>h += I, 0);\n                M.push(P / m);\n            }\n            c(M);\n        }, a.updateInterval);\n        return ()=>{\n            i(), clearInterval(p);\n        };\n    }, [\n        t,\n        t == null ? void 0 : t.mediaStream,\n        JSON.stringify(n)\n    ]), s;\n}\nconst ct = {\n    barCount: 120,\n    volMultiplier: 5,\n    updateInterval: 20\n};\nfunction Yt(e, n = {}) {\n    var l;\n    const t = e instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track ? e : (l = e == null ? void 0 : e.publication) == null ? void 0 : l.track, a = {\n        ...ct,\n        ...n\n    }, s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new Float32Array()), c = react__WEBPACK_IMPORTED_MODULE_0__.useRef(performance.now()), o = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), [u, i] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), d = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((f)=>{\n        i(Array.from(it(f, a.barCount).map((p)=>Math.sqrt(p) * a.volMultiplier)));\n    }, []);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!t || !(t != null && t.mediaStream)) return;\n        const { analyser: f, cleanup: p } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createAudioAnalyser)(t, {\n            fftSize: U(a.barCount)\n        }), g = U(a.barCount), S = new Float32Array(g), m = ()=>{\n            if (M = requestAnimationFrame(m), f.getFloatTimeDomainData(S), s.current.map((v, P)=>v + S[P]), o.current += 1, performance.now() - c.current >= a.updateInterval) {\n                const v = S.map((P)=>P / o.current);\n                d(v), c.current = performance.now(), o.current = 0;\n            }\n        };\n        let M = requestAnimationFrame(m);\n        return ()=>{\n            p(), cancelAnimationFrame(M);\n        };\n    }, [\n        t,\n        t == null ? void 0 : t.mediaStream,\n        JSON.stringify(n),\n        d\n    ]), {\n        bars: u\n    };\n}\nfunction U(e) {\n    return e < 32 ? 32 : ot(e);\n}\nfunction ot(e) {\n    let n = 2;\n    for(; e >>= 1;)n <<= 1;\n    return n;\n}\nfunction it(e, n) {\n    const t = Math.floor(e.length / n), a = new Float32Array(n);\n    for(let s = 0; s < n; s++){\n        const c = t * s;\n        let o = 0;\n        for(let u = 0; u < t; u++)o = o + Math.abs(e[c + u]);\n        a[s] = o / t;\n    }\n    return a;\n}\nfunction ut(e, n) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), a = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(), s = n ? t.getParticipantByIdentity(n) : a, c = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>s ? (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a2)(s, {\n            sources: e\n        }) : void 0, [\n        s == null ? void 0 : s.sid,\n        s == null ? void 0 : s.identity,\n        JSON.stringify(e)\n    ]);\n    return b(c, []);\n}\nfunction dt(e) {\n    var t, a, s;\n    const n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var c;\n        return (c = e == null ? void 0 : e.publication) != null && c.track ? (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a3)(e == null ? void 0 : e.publication.track) : void 0;\n    }, [\n        (t = e == null ? void 0 : e.publication) == null ? void 0 : t.track\n    ]);\n    return b(n, {\n        timestamp: Date.now(),\n        rtpTimestamp: (s = (a = e == null ? void 0 : e.publication) == null ? void 0 : a.track) == null ? void 0 : s.rtpTimestamp\n    });\n}\nconst lt = {\n    bufferSize: 100\n};\nfunction ft(e, n) {\n    const t = {\n        ...lt,\n        ...n\n    }, [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), c = dt(e), o = (u)=>{\n        var i;\n        (i = t.onTranscription) == null || i.call(t, u), s((d)=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a5)(d, // when first receiving a segment, add the current media timestamp to it\n            u.map((l)=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a6)(l, c)), t.bufferSize));\n    };\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!(e != null && e.publication)) return;\n        const u = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a4)(e.publication).subscribe((i)=>{\n            o(...i);\n        });\n        return ()=>{\n            u.unsubscribe();\n        };\n    }, [\n        e && (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(e),\n        o\n    ]), {\n        segments: a\n    };\n}\nfunction pt(e = {}) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(), t = e.participant ?? n, a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(// weird typescript constraint\n    ()=>t ? (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a7)(t) : (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a7)(t), [\n        t\n    ]);\n    return b(a, {\n        attributes: t == null ? void 0 : t.attributes\n    });\n}\nfunction Zt(e, n = {}) {\n    const t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(n.participant), [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(t.attributes[e]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!t) return;\n        const c = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a7)(t).subscribe((o)=>{\n            o.changed[e] !== void 0 && s(o.attributes[e]);\n        });\n        return ()=>{\n            c.unsubscribe();\n        };\n    }, [\n        t,\n        e\n    ]), a;\n}\nconst q = \"lk.agent.state\";\nfunction Kt() {\n    const e = $().find((o)=>o.kind === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ParticipantKind.AGENT), n = ut([\n        livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone\n    ], e == null ? void 0 : e.identity)[0], { segments: t } = ft(n), a = O(), { attributes: s } = pt({\n        participant: e\n    }), c = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>a === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected ? \"disconnected\" : a === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Connecting || !e || !(s != null && s[q]) ? \"connecting\" : s[q], [\n        s,\n        e,\n        a\n    ]);\n    return {\n        agent: e,\n        state: c,\n        audioTrack: n,\n        agentTranscriptions: t,\n        agentAttributes: s\n    };\n}\nfunction en(e) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), t = O(n), a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a8)(n), [\n        n,\n        t\n    ]);\n    return b(a, n.isRecording);\n}\nfunction tn(e) {\n    const n = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), a = O(n) === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected, s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.a9)(n, e), [\n        n,\n        e\n    ]);\n    return {\n        textStreams: b(a ? void 0 : s, [])\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/hooks-DEsFub3E.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/krisp.mjs":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/krisp.mjs ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useKrispNoiseFilter: () => (/* binding */ K)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.11.2/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contexts-CPsnPrz2.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/contexts-CPsnPrz2.mjs\");\n/* harmony import */ var _hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks-DEsFub3E.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/hooks-DEsFub3E.mjs\");\n\n\n\n\nfunction K(l = {}) {\n    const [o, u] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [p, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [d, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1);\n    let e = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.C)().microphoneTrack;\n    const [s, k] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    l.trackRef && (e = l.trackRef.publication);\n    const m = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async (t)=>{\n        if (t) {\n            const { KrispNoiseFilter: r, isKrispNoiseFilterSupported: c } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2\").then(__webpack_require__.bind(__webpack_require__, /*! @livekit/krisp-noise-filter */ \"(ssr)/./node_modules/.pnpm/@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2/node_modules/@livekit/krisp-noise-filter/dist/index.js\"));\n            if (!c()) {\n                _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.warn(\"LiveKit-Krisp noise filter is not supported in this browser\");\n                return;\n            }\n            s || k(r(l.filterOptions));\n        }\n        u((r)=>(r !== t && a(!0), t));\n    }, []);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var t;\n        if (e && e.track instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.LocalAudioTrack && s) {\n            const r = e.track.getProcessor();\n            r && r.name === \"livekit-noise-filter\" ? (a(!0), r.setEnabled(o).finally(()=>{\n                a(!1), n(o);\n            })) : !r && o && (a(!0), (t = e == null ? void 0 : e.track) == null || t.setProcessor(s).then(()=>s.setEnabled(o)).then(()=>{\n                n(!0);\n            }).catch((c)=>{\n                n(!1), _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.error(\"Krisp hook: error enabling filter\", c);\n            }).finally(()=>{\n                a(!1);\n            }));\n        }\n    }, [\n        o,\n        e,\n        s\n    ]), {\n        setNoiseFilterEnabled: m,\n        isNoiseFilterEnabled: d,\n        isNoiseFilterPending: p,\n        processor: s\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjkuMl9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjE2X2xpdmVraXQtY2xpZW50QDIuMTEuMl9fbGl2X3FwNXZ5NnA2eDZyZmhudmdyMzdlYXk0NnNpL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L2Rpc3Qva3Jpc3AubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQXlDZ0IsU0FBQUEsRUFBb0JDLElBQXNDO0lBQ3hFLE1BQU0sQ0FBQ0MsR0FBY0MsRUFBZSxHQUFJQywyQ0FBTSxDQUFTLEtBQ2pELENBQUNFLEdBQXNCQyxFQUF1QixHQUFJSCwyQ0FBTSxDQUFTLEtBQ2pFLENBQUNJLEdBQXNCQyxFQUF1QixHQUFJTCwyQ0FBTSxDQUFTO0lBQ25FLElBQUFNLElBQWlCQyxzREFBQUEsR0FBc0JDLGVBQUE7SUFDM0MsTUFBTSxDQUFDQyxHQUFnQkMsRUFBaUIsR0FBSVYsMkNBQU07SUFHOUNILEVBQVFjLFFBQUEsSUFDVkwsQ0FBQUEsSUFBaUJULEVBQVFjLFFBQUEsQ0FBU0MsV0FBQTtJQUdwQyxNQUFNQyxJQUF3QmIsOENBQU0sQ0FBWSxPQUFPZTtRQUNyRCxJQUFJQSxHQUFRO1lBQ1YsTUFBTSxFQUFFQyxrQkFBQUEsQ0FBQUEsRUFBa0JDLDZCQUFBQSxDQUFBQSxFQUFBQSxHQUFnQyxNQUFNLG9WQUM5RDtZQUdFLEtBQUNBLEtBQStCO2dCQUNsQ0MscURBQUFBLENBQUlDLElBQUEsQ0FBSztnQkFDVDtZQUFBO1lBRUdWLEtBQ2VDLEVBQUFNLEVBQWlCbkIsRUFBUXVCLGFBQWE7UUFDMUQ7UUFFRnJCLEVBQWdCLENBQUNzQixJQUNYQSxDQUFBQSxNQUFTTixLQUNYWixFQUF3QixLQUVuQlksQ0FBQUE7SUFFWCxHQUFHLEVBQUU7SUFFTCxPQUFBZiw0Q0FBTSxDQUFVOztRQUNkLElBQUlNLEtBQWtCQSxFQUFlaUIsS0FBQSxZQUFpQkMsMkRBQUFBLElBQW1CZixHQUFnQjtZQUNqRixNQUFBZ0IsSUFBbUJuQixFQUFlaUIsS0FBQSxDQUFNRyxZQUFBO1lBQzFDRCxLQUFvQkEsRUFBaUJFLElBQUEsS0FBUyx5QkFDaER4QixDQUFBQSxFQUF3QixLQUN2QnNCLEVBQStDRyxVQUFBLENBQVc5QixHQUFjK0IsT0FBQSxDQUFRO2dCQUMvRTFCLEVBQXdCLEtBQ3hCRSxFQUF3QlA7WUFBWSxFQUNyQyxJQUNRLENBQUMyQixLQUFvQjNCLEtBQzlCSyxDQUFBQSxFQUF3QixLQUFJLENBQzVCMkIsSUFBQXhCLEtBQUEsZ0JBQUFBLEVBQWdCaUIsS0FBQSxLQUFoQixRQUFBTyxFQUNJQyxZQUFBLENBQWF0QixHQUNkdUIsSUFBQSxDQUFLLElBQU12QixFQUFlbUIsVUFBQSxDQUFXOUIsSUFDckNrQyxJQUFBLENBQUs7Z0JBQ0ozQixFQUF3QjtZQUFJLEdBRTdCNEIsS0FBQSxDQUFNLENBQUNDO2dCQUNON0IsRUFBd0IsS0FDcEJhLHFEQUFBQSxDQUFBaUIsS0FBQSxDQUFNLHFDQUFxQ0Q7WUFBQyxHQUVqREwsT0FBQSxDQUFRO2dCQUNQMUIsRUFBd0I7WUFBSztRQUVuQztJQUVEO1FBQUNMO1FBQWNRO1FBQWdCRztLQUFlLEdBRTFDO1FBQ0xJLHVCQUFBQTtRQUNBVCxzQkFBQUE7UUFDQUYsc0JBQUFBO1FBQ0FrQyxXQUFXM0I7SUFDYjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvaG9va3MvY2xvdWQva3Jpc3AvdXNlS3Jpc3BOb2lzZUZpbHRlci50cz83NGE2Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuOS4yX0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTZfbGl2ZWtpdC1jbGllbnRAMi4xMS4yX19saXZfcXA1dnk2cDZ4NnJmaG52Z3IzN2VheTQ2c2kvbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3QvZGlzdC9rcmlzcC5tanM/YmZkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMb2NhbEF1ZGlvVHJhY2sgfSBmcm9tICdsaXZla2l0LWNsaWVudCc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHR5cGUgeyBLcmlzcE5vaXNlRmlsdGVyUHJvY2Vzc29yLCBOb2lzZUZpbHRlck9wdGlvbnMgfSBmcm9tICdAbGl2ZWtpdC9rcmlzcC1ub2lzZS1maWx0ZXInO1xuaW1wb3J0IHR5cGUgeyBUcmFja1JlZmVyZW5jZU9yUGxhY2Vob2xkZXIgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHsgdXNlTG9jYWxQYXJ0aWNpcGFudCB9IGZyb20gJy4uLy4uLy4uJztcblxuLyoqXG4gKiBAYmV0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIHVzZUtyaXNwTm9pc2VGaWx0ZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSB0cmFjayByZWZlcmVuY2UgdG8gdXNlIGZvciB0aGUgbm9pc2UgZmlsdGVyIChkZWZhdWx0czogbG9jYWwgbWljcm9waG9uZSB0cmFjaylcbiAgICovXG4gIHRyYWNrUmVmPzogVHJhY2tSZWZlcmVuY2VPclBsYWNlaG9sZGVyO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBmaWx0ZXJPcHRpb25zPzogTm9pc2VGaWx0ZXJPcHRpb25zO1xufVxuXG4vKipcbiAqIEVuYWJsZSB0aGUgS3Jpc3AgZW5oYW5jZWQgbm9pc2UgY2FuY2VsbGF0aW9uIGZlYXR1cmUgZm9yIGxvY2FsIGF1ZGlvIHRyYWNrcy5cbiAqXG4gKiBEZWZhdWx0cyB0byB0aGUgbG9jYWxQYXJ0aWNpcGFudCdzIG1pY3JvcGhvbmUgdHJhY2sgcHVibGljYXRpb24sIGJ1dCB5b3UgY2FuIG92ZXJyaWRlIHRoaXMgYmVoYXZpb3IgYnkgcGFzc2luZyBpbiBhIGRpZmZlcmVudCB0cmFjayByZWZlcmVuY2UuXG4gKlxuICogQHBhY2thZ2UgXFxAbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L2tyaXNwXG4gKiBAcmVtYXJrcyBUaGlzIGZpbHRlciByZXF1aXJlcyB0aGF0IHlvdSBpbnN0YWxsIHRoZSBgQGxpdmVraXQva3Jpc3Atbm9pc2UtZmlsdGVyYCBwYWNrYWdlIGFuZCBpcyBzdXBwb3J0ZWQgb25seSBvbiB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5saXZla2l0LmlvIHwgTGl2ZUtpdCBDbG91ZH0uXG4gKiBAYmV0YVxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogY29uc3Qga3Jpc3AgPSB1c2VLcmlzcE5vaXNlRmlsdGVyKCk7XG4gKiByZXR1cm4gPGlucHV0XG4gKiAgIHR5cGU9XCJjaGVja2JveFwiXG4gKiAgIG9uQ2hhbmdlPXsoZXYpID0+IGtyaXNwLnNldE5vaXNlRmlsdGVyRW5hYmxlZChldi50YXJnZXQuY2hlY2tlZCl9XG4gKiAgIGNoZWNrZWQ9e2tyaXNwLmlzTm9pc2VGaWx0ZXJFbmFibGVkfVxuICogICBkaXNhYmxlZD17a3Jpc3AuaXNOb2lzZUZpbHRlclBlbmRpbmd9XG4gKiAvPlxuICogYGBgXG4gKiBAcmV0dXJucyBVc2UgYHNldElzTm9pc2VGaWx0ZXJFbmFibGVkYCB0byBlbmFibGUvZGlzYWJsZSB0aGUgbm9pc2UgZmlsdGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlS3Jpc3BOb2lzZUZpbHRlcihvcHRpb25zOiB1c2VLcmlzcE5vaXNlRmlsdGVyT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IFtzaG91bGRFbmFibGUsIHNldFNob3VsZEVuYWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc05vaXNlRmlsdGVyUGVuZGluZywgc2V0SXNOb2lzZUZpbHRlclBlbmRpbmddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbaXNOb2lzZUZpbHRlckVuYWJsZWQsIHNldElzTm9pc2VGaWx0ZXJFbmFibGVkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgbGV0IG1pY1B1YmxpY2F0aW9uID0gdXNlTG9jYWxQYXJ0aWNpcGFudCgpLm1pY3JvcGhvbmVUcmFjaztcbiAgY29uc3QgW2tyaXNwUHJvY2Vzc29yLCBzZXRLcmlzcFByb2Nlc3Nvcl0gPSBSZWFjdC51c2VTdGF0ZTxcbiAgICBLcmlzcE5vaXNlRmlsdGVyUHJvY2Vzc29yIHwgdW5kZWZpbmVkXG4gID4oKTtcbiAgaWYgKG9wdGlvbnMudHJhY2tSZWYpIHtcbiAgICBtaWNQdWJsaWNhdGlvbiA9IG9wdGlvbnMudHJhY2tSZWYucHVibGljYXRpb247XG4gIH1cblxuICBjb25zdCBzZXROb2lzZUZpbHRlckVuYWJsZWQgPSBSZWFjdC51c2VDYWxsYmFjayhhc3luYyAoZW5hYmxlOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKGVuYWJsZSkge1xuICAgICAgY29uc3QgeyBLcmlzcE5vaXNlRmlsdGVyLCBpc0tyaXNwTm9pc2VGaWx0ZXJTdXBwb3J0ZWQgfSA9IGF3YWl0IGltcG9ydChcbiAgICAgICAgJ0BsaXZla2l0L2tyaXNwLW5vaXNlLWZpbHRlcidcbiAgICAgICk7XG5cbiAgICAgIGlmICghaXNLcmlzcE5vaXNlRmlsdGVyU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgbG9nLndhcm4oJ0xpdmVLaXQtS3Jpc3Agbm9pc2UgZmlsdGVyIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICgha3Jpc3BQcm9jZXNzb3IpIHtcbiAgICAgICAgc2V0S3Jpc3BQcm9jZXNzb3IoS3Jpc3BOb2lzZUZpbHRlcihvcHRpb25zLmZpbHRlck9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0U2hvdWxkRW5hYmxlKChwcmV2KSA9PiB7XG4gICAgICBpZiAocHJldiAhPT0gZW5hYmxlKSB7XG4gICAgICAgIHNldElzTm9pc2VGaWx0ZXJQZW5kaW5nKHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVuYWJsZTtcbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1pY1B1YmxpY2F0aW9uICYmIG1pY1B1YmxpY2F0aW9uLnRyYWNrIGluc3RhbmNlb2YgTG9jYWxBdWRpb1RyYWNrICYmIGtyaXNwUHJvY2Vzc29yKSB7XG4gICAgICBjb25zdCBjdXJyZW50UHJvY2Vzc29yID0gbWljUHVibGljYXRpb24udHJhY2suZ2V0UHJvY2Vzc29yKCk7XG4gICAgICBpZiAoY3VycmVudFByb2Nlc3NvciAmJiBjdXJyZW50UHJvY2Vzc29yLm5hbWUgPT09ICdsaXZla2l0LW5vaXNlLWZpbHRlcicpIHtcbiAgICAgICAgc2V0SXNOb2lzZUZpbHRlclBlbmRpbmcodHJ1ZSk7XG4gICAgICAgIChjdXJyZW50UHJvY2Vzc29yIGFzIEtyaXNwTm9pc2VGaWx0ZXJQcm9jZXNzb3IpLnNldEVuYWJsZWQoc2hvdWxkRW5hYmxlKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICBzZXRJc05vaXNlRmlsdGVyUGVuZGluZyhmYWxzZSk7XG4gICAgICAgICAgc2V0SXNOb2lzZUZpbHRlckVuYWJsZWQoc2hvdWxkRW5hYmxlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCFjdXJyZW50UHJvY2Vzc29yICYmIHNob3VsZEVuYWJsZSkge1xuICAgICAgICBzZXRJc05vaXNlRmlsdGVyUGVuZGluZyh0cnVlKTtcbiAgICAgICAgbWljUHVibGljYXRpb24/LnRyYWNrXG4gICAgICAgICAgPy5zZXRQcm9jZXNzb3Ioa3Jpc3BQcm9jZXNzb3IpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ga3Jpc3BQcm9jZXNzb3Iuc2V0RW5hYmxlZChzaG91bGRFbmFibGUpKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHNldElzTm9pc2VGaWx0ZXJFbmFibGVkKHRydWUpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHNldElzTm9pc2VGaWx0ZXJFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgICAgIGxvZy5lcnJvcignS3Jpc3AgaG9vazogZXJyb3IgZW5hYmxpbmcgZmlsdGVyJywgZSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICBzZXRJc05vaXNlRmlsdGVyUGVuZGluZyhmYWxzZSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbc2hvdWxkRW5hYmxlLCBtaWNQdWJsaWNhdGlvbiwga3Jpc3BQcm9jZXNzb3JdKTtcblxuICByZXR1cm4ge1xuICAgIHNldE5vaXNlRmlsdGVyRW5hYmxlZCxcbiAgICBpc05vaXNlRmlsdGVyRW5hYmxlZCxcbiAgICBpc05vaXNlRmlsdGVyUGVuZGluZyxcbiAgICBwcm9jZXNzb3I6IGtyaXNwUHJvY2Vzc29yLFxuICB9O1xufVxuIl0sIm5hbWVzIjpbInVzZUtyaXNwTm9pc2VGaWx0ZXIiLCJvcHRpb25zIiwic2hvdWxkRW5hYmxlIiwic2V0U2hvdWxkRW5hYmxlIiwiUmVhY3QiLCJ1c2VTdGF0ZSIsImlzTm9pc2VGaWx0ZXJQZW5kaW5nIiwic2V0SXNOb2lzZUZpbHRlclBlbmRpbmciLCJpc05vaXNlRmlsdGVyRW5hYmxlZCIsInNldElzTm9pc2VGaWx0ZXJFbmFibGVkIiwibWljUHVibGljYXRpb24iLCJ1c2VMb2NhbFBhcnRpY2lwYW50IiwibWljcm9waG9uZVRyYWNrIiwia3Jpc3BQcm9jZXNzb3IiLCJzZXRLcmlzcFByb2Nlc3NvciIsInRyYWNrUmVmIiwicHVibGljYXRpb24iLCJzZXROb2lzZUZpbHRlckVuYWJsZWQiLCJ1c2VDYWxsYmFjayIsImVuYWJsZSIsIktyaXNwTm9pc2VGaWx0ZXIiLCJpc0tyaXNwTm9pc2VGaWx0ZXJTdXBwb3J0ZWQiLCJsb2ciLCJ3YXJuIiwiZmlsdGVyT3B0aW9ucyIsInByZXYiLCJ1c2VFZmZlY3QiLCJ0cmFjayIsIkxvY2FsQXVkaW9UcmFjayIsImN1cnJlbnRQcm9jZXNzb3IiLCJnZXRQcm9jZXNzb3IiLCJuYW1lIiwic2V0RW5hYmxlZCIsImZpbmFsbHkiLCJfYSIsInNldFByb2Nlc3NvciIsInRoZW4iLCJjYXRjaCIsImUiLCJlcnJvciIsInByb2Nlc3NvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/krisp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/prefabs.mjs":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/prefabs.mjs ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioConference: () => (/* binding */ at),\n/* harmony export */   Chat: () => (/* binding */ ee),\n/* harmony export */   ControlBar: () => (/* binding */ te),\n/* harmony export */   MediaDeviceMenu: () => (/* binding */ O),\n/* harmony export */   PreJoin: () => (/* binding */ et),\n/* harmony export */   VideoConference: () => (/* binding */ tt),\n/* harmony export */   VoiceAssistantControlBar: () => (/* binding */ nt),\n/* harmony export */   usePreviewDevice: () => (/* binding */ Ze),\n/* harmony export */   usePreviewTracks: () => (/* binding */ Ke)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./room-BgiuQa2X.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/room-BgiuQa2X.mjs\");\n/* harmony import */ var _components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components-01Mw9Q_q.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/components-01Mw9Q_q.mjs\");\n/* harmony import */ var _hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks-DEsFub3E.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/hooks-DEsFub3E.mjs\");\n/* harmony import */ var _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contexts-CPsnPrz2.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/contexts-CPsnPrz2.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.11.2/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n\n\n\n\n\n\nfunction ee({ messageFormatter: o, messageDecoder: d, messageEncoder: l, channelTopic: n, ...E }) {\n    const p = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), m = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            messageDecoder: d,\n            messageEncoder: l,\n            channelTopic: n\n        }), [\n        d,\n        l,\n        n\n    ]), { chatMessages: s, send: I, isSending: t } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(u), h = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.j)(), r = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    async function v(c) {\n        c.preventDefault(), m.current && m.current.value.trim() !== \"\" && (await I(m.current.value), m.current.value = \"\", m.current.focus());\n    }\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var c;\n        p && ((c = p.current) == null || c.scrollTo({\n            top: p.current.scrollHeight\n        }));\n    }, [\n        p,\n        s\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var i, g, a, C, S;\n        if (!h || s.length === 0) return;\n        if ((i = h.widget.state) != null && i.showChat && s.length > 0 && r.current !== ((g = s[s.length - 1]) == null ? void 0 : g.timestamp)) {\n            r.current = (a = s[s.length - 1]) == null ? void 0 : a.timestamp;\n            return;\n        }\n        const c = s.filter((A)=>!r.current || A.timestamp > r.current).length, { widget: f } = h;\n        c > 0 && ((C = f.state) == null ? void 0 : C.unreadMessages) !== c && ((S = f.dispatch) == null || S.call(f, {\n            msg: \"unread_msg\",\n            count: c\n        }));\n    }, [\n        s,\n        h == null ? void 0 : h.widget\n    ]), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...E,\n        className: \"lk-chat\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-chat-header\"\n    }, \"Messages\", h && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.C, {\n        className: \"lk-close-button\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.S, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", {\n        className: \"lk-list lk-chat-messages\",\n        ref: p\n    }, E.children ? s.map((c, f)=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_5__.c)(E.children, {\n            entry: c,\n            key: c.id ?? f,\n            messageFormatter: o\n        })) : s.map((c, f, i)=>{\n        const g = f >= 1 && i[f - 1].from === c.from, a = f >= 1 && c.timestamp - i[f - 1].timestamp < 6e4;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.a, {\n            key: c.id ?? f,\n            hideName: g,\n            hideTimestamp: g === !1 ? !1 : a,\n            entry: c,\n            messageFormatter: o\n        });\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        className: \"lk-chat-form\",\n        onSubmit: v\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        className: \"lk-form-control lk-chat-form-input\",\n        disabled: t,\n        ref: m,\n        type: \"text\",\n        placeholder: \"Enter a message...\",\n        onInput: (c)=>c.stopPropagation(),\n        onKeyDown: (c)=>c.stopPropagation(),\n        onKeyUp: (c)=>c.stopPropagation()\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        type: \"submit\",\n        className: \"lk-button lk-chat-form-button\",\n        disabled: t\n    }, \"Send\")));\n}\nfunction O({ kind: o, initialSelection: d, onActiveDeviceChange: l, tracks: n, requestPermissions: E = !1, ...p }) {\n    const [m, u] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [s, I] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), [t, h] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!0), [r, v] = react__WEBPACK_IMPORTED_MODULE_0__.useState(E), c = (a, C)=>{\n        _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"handle device change\"), u(!1), l == null || l(a, C);\n    }, f = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), i = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        m && v(!0);\n    }, [\n        m\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        let a;\n        return f.current && i.current && (s || t) && (a = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.an)(f.current, i.current, (C, S)=>{\n            i.current && Object.assign(i.current.style, {\n                left: `${C}px`,\n                top: `${S}px`\n            });\n        })), h(!1), ()=>{\n            a == null || a();\n        };\n    }, [\n        f,\n        i,\n        s,\n        t\n    ]);\n    const g = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((a)=>{\n        i.current && a.target !== f.current && m && (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ao)(i.current, a) && u(!1);\n    }, [\n        m,\n        i,\n        f\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>(document.addEventListener(\"click\", g), ()=>{\n            document.removeEventListener(\"click\", g);\n        }), [\n        g\n    ]), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"lk-button lk-button-menu\",\n        \"aria-pressed\": m,\n        ...p,\n        onClick: ()=>u(!m),\n        ref: f\n    }, p.children), !p.disabled && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-device-menu\",\n        ref: i,\n        style: {\n            visibility: m ? \"visible\" : \"hidden\"\n        }\n    }, o ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.M, {\n        initialSelection: d,\n        onActiveDeviceChange: (a)=>c(o, a),\n        onDeviceListChange: I,\n        kind: o,\n        track: n == null ? void 0 : n[o],\n        requestPermissions: r\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-device-menu-heading\"\n    }, \"Audio inputs\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.M, {\n        kind: \"audioinput\",\n        onActiveDeviceChange: (a)=>c(\"audioinput\", a),\n        onDeviceListChange: I,\n        track: n == null ? void 0 : n.audioinput,\n        requestPermissions: r\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-device-menu-heading\"\n    }, \"Video inputs\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.M, {\n        kind: \"videoinput\",\n        onActiveDeviceChange: (a)=>c(\"videoinput\", a),\n        onDeviceListChange: I,\n        track: n == null ? void 0 : n.videoinput,\n        requestPermissions: r\n    }))));\n}\nfunction W() {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_5__.w)();\n    }, []);\n}\nfunction Ke(o, d) {\n    const [l, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), E = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>new livekit_client__WEBPACK_IMPORTED_MODULE_1__.Mutex(), []);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let p = !1, m = [];\n        return E.lock().then(async (u)=>{\n            try {\n                (o.audio || o.video) && (m = await (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createLocalTracks)(o), p ? m.forEach((s)=>s.stop()) : n(m));\n            } catch (s) {\n                d && s instanceof Error ? d(s) : _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.error(s);\n            } finally{\n                u();\n            }\n        }), ()=>{\n            p = !0, m.forEach((u)=>{\n                u.stop();\n            });\n        };\n    }, [\n        JSON.stringify(o, _room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_5__.r),\n        d,\n        E\n    ]), l;\n}\nfunction Ze(o, d, l) {\n    const [n, E] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [p, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), u = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.y)({\n        kind: l\n    }), [s, I] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0), [t, h] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), [r, v] = react__WEBPACK_IMPORTED_MODULE_0__.useState(d);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        v(d);\n    }, [\n        d\n    ]);\n    const c = async (g, a)=>{\n        try {\n            const C = a === \"videoinput\" ? await (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createLocalVideoTrack)({\n                deviceId: g,\n                resolution: livekit_client__WEBPACK_IMPORTED_MODULE_1__.VideoPresets.h720.resolution\n            }) : await (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createLocalAudioTrack)({\n                deviceId: g\n            }), S = await C.getDeviceId(!1);\n            S && g !== S && (i.current = S, v(S)), h(C);\n        } catch (C) {\n            C instanceof Error && E(C);\n        }\n    }, f = async (g, a)=>{\n        await g.setDeviceId(a), i.current = a;\n    }, i = react__WEBPACK_IMPORTED_MODULE_0__.useRef(r);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        o && !t && !n && !p && (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"creating track\", l), m(!0), c(r, l).finally(()=>{\n            m(!1);\n        }));\n    }, [\n        o,\n        t,\n        n,\n        p\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t && (o ? s != null && s.deviceId && i.current !== (s == null ? void 0 : s.deviceId) ? (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(`switching ${l} device from`, i.current, s.deviceId), f(t, s.deviceId)) : (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(`unmuting local ${l} track`), t.unmute()) : (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(`muting ${l} track`), t.mute().then(()=>_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(t.mediaStreamTrack))));\n    }, [\n        t,\n        s,\n        o,\n        l\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>()=>{\n            t && (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(`stopping local ${l} track`), t.stop(), t.mute());\n        }, []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        I(u == null ? void 0 : u.find((g)=>g.deviceId === r));\n    }, [\n        r,\n        u\n    ]), {\n        selectedDevice: s,\n        localTrack: t,\n        deviceError: n\n    };\n}\nfunction et({ defaults: o = {}, onValidate: d, onSubmit: l, onError: n, debug: E, joinLabel: p = \"Join Room\", micLabel: m = \"Microphone\", camLabel: u = \"Camera\", userLabel: s = \"Username\", persistUserChoices: I = !0, videoProcessor: t, ...h }) {\n    const { userChoices: r, saveAudioInputDeviceId: v, saveAudioInputEnabled: c, saveVideoInputDeviceId: f, saveVideoInputEnabled: i, saveUsername: g } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.x)({\n        defaults: o,\n        preventSave: !I,\n        preventLoad: !I\n    }), [a, C] = react__WEBPACK_IMPORTED_MODULE_0__.useState(r), [S, A] = react__WEBPACK_IMPORTED_MODULE_0__.useState(a.audioEnabled), [w, L] = react__WEBPACK_IMPORTED_MODULE_0__.useState(a.videoEnabled), [T, $] = react__WEBPACK_IMPORTED_MODULE_0__.useState(a.audioDeviceId), [k, N] = react__WEBPACK_IMPORTED_MODULE_0__.useState(a.videoDeviceId), [V, ae] = react__WEBPACK_IMPORTED_MODULE_0__.useState(a.username);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        c(S);\n    }, [\n        S,\n        c\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        i(w);\n    }, [\n        w,\n        i\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        v(T);\n    }, [\n        T,\n        v\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        f(k);\n    }, [\n        k,\n        f\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        g(V);\n    }, [\n        V,\n        g\n    ]);\n    const D = Ke({\n        audio: S ? {\n            deviceId: r.audioDeviceId\n        } : !1,\n        video: w ? {\n            deviceId: r.videoDeviceId,\n            processor: t\n        } : !1\n    }, n), U = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), M = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>D == null ? void 0 : D.filter((b)=>b.kind === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Kind.Video)[0], [\n        D\n    ]), ne = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (M) {\n            const { facingMode: b } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.facingModeFromLocalTrack)(M);\n            return b;\n        } else return \"undefined\";\n    }, [\n        M\n    ]), j = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>D == null ? void 0 : D.filter((b)=>b.kind === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Kind.Audio)[0], [\n        D\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>(U.current && M && (M.unmute(), M.attach(U.current)), ()=>{\n            M == null || M.detach();\n        }), [\n        M\n    ]);\n    const [se, ce] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), _ = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((b)=>typeof d == \"function\" ? d(b) : b.username !== \"\", [\n        d\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const b = {\n            username: V,\n            videoEnabled: w,\n            videoDeviceId: k,\n            audioEnabled: S,\n            audioDeviceId: T\n        };\n        C(b), ce(_(b));\n    }, [\n        V,\n        w,\n        _,\n        S,\n        T,\n        k\n    ]);\n    function re(b) {\n        b.preventDefault(), _(a) ? typeof l == \"function\" && l(a) : _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.warn(\"Validation failed with: \", a);\n    }\n    return W(), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-prejoin\",\n        ...h\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-video-container\"\n    }, M && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: U,\n        width: \"1280\",\n        height: \"720\",\n        \"data-lk-facing-mode\": ne\n    }), (!M || !w) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-camera-off-note\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.b, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-container\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group audio\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.T, {\n        initialState: S,\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n        onChange: (b)=>A(b)\n    }, m), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(O, {\n        initialSelection: T,\n        kind: \"audioinput\",\n        disabled: !j,\n        tracks: {\n            audioinput: j\n        },\n        onActiveDeviceChange: (b, F)=>$(F)\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group video\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.T, {\n        initialState: w,\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera,\n        onChange: (b)=>L(b)\n    }, u), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(O, {\n        initialSelection: k,\n        kind: \"videoinput\",\n        disabled: !M,\n        tracks: {\n            videoinput: M\n        },\n        onActiveDeviceChange: (b, F)=>N(F)\n    })))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        className: \"lk-username-container\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        className: \"lk-form-control\",\n        id: \"username\",\n        name: \"username\",\n        type: \"text\",\n        defaultValue: V,\n        placeholder: s,\n        onChange: (b)=>ae(b.target.value),\n        autoComplete: \"off\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"lk-button lk-join-button\",\n        type: \"submit\",\n        onClick: re,\n        disabled: !se\n    }, p)), E && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, \"User Choices:\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", {\n        className: \"lk-list\",\n        style: {\n            overflow: \"hidden\",\n            maxWidth: \"15rem\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Username: \", `${a.username}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Enabled: \", `${a.videoEnabled}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Enabled: \", `${a.audioEnabled}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Device: \", `${a.videoDeviceId}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Device: \", `${a.audioDeviceId}`))));\n}\nfunction Ge({ props: o }) {\n    const { dispatch: d, state: l } = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.a)().widget, n = \"lk-button lk-settings-toggle\";\n    return {\n        mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_5__.m)(o, {\n                className: n,\n                onClick: ()=>{\n                    d && d({\n                        msg: \"toggle_settings\"\n                    });\n                },\n                \"aria-pressed\": l != null && l.showSettings ? \"true\" : \"false\"\n            }), [\n            o,\n            n,\n            d,\n            l\n        ])\n    };\n}\nconst Je = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function(d, l) {\n    const { mergedProps: n } = Ge({\n        props: d\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        ref: l,\n        ...n\n    }, d.children);\n});\nfunction te({ variation: o, controls: d, saveUserChoices: l = !0, onDeviceError: n, ...E }) {\n    var $;\n    const [p, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), u = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.j)();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var k, N;\n        ((k = u == null ? void 0 : u.widget.state) == null ? void 0 : k.showChat) !== void 0 && m((N = u == null ? void 0 : u.widget.state) == null ? void 0 : N.showChat);\n    }, [\n        ($ = u == null ? void 0 : u.widget.state) == null ? void 0 : $.showChat\n    ]);\n    const I = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.z)(`(max-width: ${p ? 1e3 : 760}px)`) ? \"minimal\" : \"verbose\";\n    o ?? (o = I);\n    const t = {\n        leave: !0,\n        ...d\n    }, h = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.A)();\n    h ? (t.camera ?? (t.camera = h.canPublish), t.microphone ?? (t.microphone = h.canPublish), t.screenShare ?? (t.screenShare = h.canPublish), t.chat ?? (t.chat = h.canPublishData && (d == null ? void 0 : d.chat))) : (t.camera = !1, t.chat = !1, t.microphone = !1, t.screenShare = !1);\n    const r = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>o === \"minimal\" || o === \"verbose\", [\n        o\n    ]), v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>o === \"textOnly\" || o === \"verbose\", [\n        o\n    ]), c = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ap)(), [f, i] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), g = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((k)=>{\n        i(k);\n    }, [\n        i\n    ]), a = (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_5__.a)({\n        className: \"lk-control-bar\"\n    }, E), { saveAudioInputEnabled: C, saveVideoInputEnabled: S, saveAudioInputDeviceId: A, saveVideoInputDeviceId: w } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.x)({\n        preventSave: !l\n    }), L = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((k, N)=>N ? C(k) : null, [\n        C\n    ]), T = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((k, N)=>N ? S(k) : null, [\n        S\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...a\n    }, t.microphone && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.T, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n        showIcon: r,\n        onChange: L,\n        onDeviceError: (k)=>n == null ? void 0 : n({\n                source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n                error: k\n            })\n    }, v && \"Microphone\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(O, {\n        kind: \"audioinput\",\n        onActiveDeviceChange: (k, N)=>A(N ?? \"default\")\n    }))), t.camera && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.T, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera,\n        showIcon: r,\n        onChange: T,\n        onDeviceError: (k)=>n == null ? void 0 : n({\n                source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera,\n                error: k\n            })\n    }, v && \"Camera\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(O, {\n        kind: \"videoinput\",\n        onActiveDeviceChange: (k, N)=>w(N ?? \"default\")\n    }))), t.screenShare && c && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.T, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare,\n        captureOptions: {\n            audio: !0,\n            selfBrowserSurface: \"include\"\n        },\n        showIcon: r,\n        onChange: g,\n        onDeviceError: (k)=>n == null ? void 0 : n({\n                source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare,\n                error: k\n            })\n    }, v && (f ? \"Stop screen share\" : \"Share screen\")), t.chat && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.C, null, r && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.c, null), v && \"Chat\"), t.settings && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Je, null, r && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.d, null), v && \"Settings\"), t.leave && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.D, null, r && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.e, null), v && \"Leave\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.f, null));\n}\nfunction tt({ chatMessageFormatter: o, chatMessageDecoder: d, chatMessageEncoder: l, SettingsComponent: n, ...E }) {\n    var c, f;\n    const [p, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        showChat: !1,\n        unreadMessages: 0,\n        showSettings: !1\n    }), u = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), s = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.t)([\n        {\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera,\n            withPlaceholder: !0\n        },\n        {\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare,\n            withPlaceholder: !1\n        }\n    ], {\n        updateOnlyOn: [\n            livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.ActiveSpeakersChanged\n        ],\n        onlySubscribed: !1\n    }), I = (i)=>{\n        _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"updating widget state\", i), m(i);\n    }, t = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.aq)(), h = s.filter(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.a1).filter((i)=>i.publication.source === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare), r = (c = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(t)) == null ? void 0 : c[0], v = s.filter((i)=>!(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.ar)(i, r));\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var i, g, a, C, S, A;\n        if (h.some((w)=>w.publication.isSubscribed) && u.current === null ? (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"Auto set screen share focus:\", {\n            newScreenShareTrack: h[0]\n        }), (g = (i = t.pin).dispatch) == null || g.call(i, {\n            msg: \"set_pin\",\n            trackReference: h[0]\n        }), u.current = h[0]) : u.current && !h.some((w)=>{\n            var L, T;\n            return w.publication.trackSid === ((T = (L = u.current) == null ? void 0 : L.publication) == null ? void 0 : T.trackSid);\n        }) && (_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"Auto clearing screen share focus.\"), (C = (a = t.pin).dispatch) == null || C.call(a, {\n            msg: \"clear_pin\"\n        }), u.current = null), r && !(0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(r)) {\n            const w = s.find((L)=>L.participant.identity === r.participant.identity && L.source === r.source);\n            w !== r && (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(w) && ((A = (S = t.pin).dispatch) == null || A.call(S, {\n                msg: \"set_pin\",\n                trackReference: w\n            }));\n        }\n    }, [\n        h.map((i)=>`${i.publication.trackSid}_${i.publication.isSubscribed}`).join(),\n        (f = r == null ? void 0 : r.publication) == null ? void 0 : f.trackSid,\n        s\n    ]), W(), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-video-conference\",\n        ...E\n    }, (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_3__.as)() && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.L, {\n        value: t,\n        onWidgetChange: I\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-video-conference-inner\"\n    }, r ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-focus-layout-wrapper\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.F, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.g, {\n        tracks: v\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.P, null)), r && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.h, {\n        trackRef: r\n    }))) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-grid-layout-wrapper\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.G, {\n        tracks: s\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.P, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(te, {\n        controls: {\n            chat: !0,\n            settings: !!n\n        }\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ee, {\n        style: {\n            display: p.showChat ? \"grid\" : \"none\"\n        },\n        messageFormatter: o,\n        messageEncoder: l,\n        messageDecoder: d\n    }), n && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-settings-menu-modal\",\n        style: {\n            display: p.showSettings ? \"block\" : \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(n, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.R, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.i, null));\n}\nfunction at({ ...o }) {\n    const [d, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        showChat: !1,\n        unreadMessages: 0\n    }), n = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.t)([\n        livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone\n    ]);\n    return W(), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.L, {\n        onWidgetChange: l\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-audio-conference\",\n        ...o\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-audio-conference-stage\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.j, {\n        tracks: n\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.k, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(te, {\n        controls: {\n            microphone: !0,\n            screenShare: !1,\n            camera: !1,\n            chat: !0\n        }\n    }), d.showChat && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ee, null)));\n}\nfunction nt({ controls: o, saveUserChoices: d = !0, onDeviceError: l, ...n }) {\n    const E = {\n        leave: !0,\n        microphone: !0,\n        ...o\n    }, p = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.A)(), { microphoneTrack: m, localParticipant: u } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.C)(), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            participant: u,\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n            publication: m\n        }), [\n        u,\n        m\n    ]);\n    p ? E.microphone ?? (E.microphone = p.canPublish) : E.microphone = !1;\n    const I = (0,_room_BgiuQa2X_mjs__WEBPACK_IMPORTED_MODULE_5__.a)({\n        className: \"lk-agent-control-bar\"\n    }, n), { saveAudioInputEnabled: t, saveAudioInputDeviceId: h } = (0,_hooks_DEsFub3E_mjs__WEBPACK_IMPORTED_MODULE_2__.x)({\n        preventSave: !d\n    }), r = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((v, c)=>{\n        c && t(v);\n    }, [\n        t\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...I\n    }, E.microphone && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.T, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n        showIcon: !0,\n        onChange: r,\n        onDeviceError: (v)=>l == null ? void 0 : l({\n                source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n                error: v\n            })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.B, {\n        trackRef: s,\n        barCount: 7,\n        options: {\n            minHeight: 5\n        }\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(O, {\n        kind: \"audioinput\",\n        onActiveDeviceChange: (v, c)=>h(c ?? \"default\")\n    }))), E.leave && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.D, null, \"Disconnect\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_01Mw9Q_q_mjs__WEBPACK_IMPORTED_MODULE_4__.f, null));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjkuMl9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjE2X2xpdmVraXQtY2xpZW50QDIuMTEuMl9fbGl2X3FwNXZ5NnA2eDZyZmhudmdyMzdlYXk0NnNpL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L2Rpc3QvcHJlZmFicy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUNPLFNBQVNBLEdBQUssRUFDbkJDLGtCQUFBQSxDQUFBQSxFQUNBQyxnQkFBQUEsQ0FBQUEsRUFDQUMsZ0JBQUFBLENBQUFBLEVBQ0FDLGNBQUFBLENBQUFBLEVBQ0EsR0FBR0MsR0FDTDtJQUNRLE1BQUFDLElBQVFDLHlDQUFNLENBQXlCLE9BQ3ZDRSxJQUFXRix5Q0FBTSxDQUF5QixPQUUxQ0csSUFBMkJILDBDQUFNLENBQVEsSUFDdEM7WUFBRUwsZ0JBQUFBO1lBQWdCQyxnQkFBQUE7WUFBZ0JDLGNBQUFBO1FBQWEsSUFDckQ7UUFBQ0Y7UUFBZ0JDO1FBQWdCQztLQUFhLEdBRTNDLEVBQUVRLGNBQUFBLENBQUFBLEVBQWNDLE1BQUFBLENBQUFBLEVBQU1DLFdBQUFBLENBQUFBLEVBQVUsR0FBSUMsc0RBQUFBLENBQVFMLElBRTVDTSxJQUFnQkMseURBQUFBLElBQ2hCQyxJQUFnQlgseUNBQU0sQ0FBaUM7SUFFN0QsZUFBZVksRUFBYUMsQ0FBQUE7UUFDMUJBLEVBQU1DLGNBQUEsSUFDRlosRUFBU2EsT0FBQSxJQUFXYixFQUFTYSxPQUFBLENBQVFDLEtBQUEsQ0FBTUMsSUFBQSxPQUFXLE1BQ2xELE9BQUFYLEVBQUtKLEVBQVNhLE9BQUEsQ0FBUUMsS0FBSyxHQUNqQ2QsRUFBU2EsT0FBQSxDQUFRQyxLQUFBLEdBQVEsSUFDekJkLEVBQVNhLE9BQUEsQ0FBUUcsS0FBQSxFQUFNO0lBQ3pCO0lBR0YsT0FBQWxCLDRDQUFNLENB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RSxzQkFBc0IsQ0FBQ3VNLEdBQU8xTCxJQUM1QmdHLEVBQXVCaEcsS0FBWTtJQUFTLE1BT3JEc0ssRUFBZ0JDLEtBQUEsSUFBVSw4QkFBQXpQLGdEQUFBLENBQUFtUix1REFBQUEsRUFBQSxNQUFrQixlQUM1Qyw4QkFBQW5SLGdEQUFBLENBQUFxUix1REFBQUEsRUFBQTtBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvcHJlZmFicy9DaGF0LnRzeD8zODExIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuOS4yX0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTZfbGl2ZWtpdC1jbGllbnRAMi4xMS4yX19saXZfcXA1dnk2cDZ4NnJmaG52Z3IzN2VheTQ2c2kvbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3Qvc3JjL3ByZWZhYnMvTWVkaWFEZXZpY2VNZW51LnRzeD9iNzJhIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuOS4yX0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTZfbGl2ZWtpdC1jbGllbnRAMi4xMS4yX19saXZfcXA1dnk2cDZ4NnJmaG52Z3IzN2VheTQ2c2kvbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3Qvc3JjL2hvb2tzL3VzZVdhcm5BYm91dE1pc3NpbmdTdHlsZXMudHM/NmNiNiIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjkuMl9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjE2X2xpdmVraXQtY2xpZW50QDIuMTEuMl9fbGl2X3FwNXZ5NnA2eDZyZmhudmdyMzdlYXk0NnNpL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L3NyYy9wcmVmYWJzL1ByZUpvaW4udHN4PzM4MjciLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvaG9va3MvdXNlU2V0dGluZ3NUb2dnbGUudHM/N2Y3MCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjkuMl9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjE2X2xpdmVraXQtY2xpZW50QDIuMTEuMl9fbGl2X3FwNXZ5NnA2eDZyZmhudmdyMzdlYXk0NnNpL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL1NldHRpbmdzTWVudVRvZ2dsZS50c3g/YTFlMCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjkuMl9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjE2X2xpdmVraXQtY2xpZW50QDIuMTEuMl9fbGl2X3FwNXZ5NnA2eDZyZmhudmdyMzdlYXk0NnNpL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L3NyYy9wcmVmYWJzL0NvbnRyb2xCYXIudHN4P2IwNDgiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvcHJlZmFicy9WaWRlb0NvbmZlcmVuY2UudHN4PzYyMWUiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvcHJlZmFicy9BdWRpb0NvbmZlcmVuY2UudHN4PzZjMmQiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvcHJlZmFicy9Wb2ljZUFzc2lzdGFudENvbnRyb2xCYXIudHN4P2FiYTQiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9kaXN0L3ByZWZhYnMubWpzPzliMTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBDaGF0TWVzc2FnZSwgdHlwZSBDaGF0T3B0aW9ucyB9IGZyb20gJ0BsaXZla2l0L2NvbXBvbmVudHMtY29yZSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VNYXliZUxheW91dENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IGNsb25lU2luZ2xlQ2hpbGQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgdHlwZSB7IE1lc3NhZ2VGb3JtYXR0ZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRFbnRyeSc7XG5pbXBvcnQgeyBDaGF0RW50cnkgfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRFbnRyeSc7XG5pbXBvcnQgeyB1c2VDaGF0IH0gZnJvbSAnLi4vaG9va3MvdXNlQ2hhdCc7XG5pbXBvcnQgeyBDaGF0VG9nZ2xlIH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5pbXBvcnQgQ2hhdENsb3NlSWNvbiBmcm9tICcuLi9hc3NldHMvaWNvbnMvQ2hhdENsb3NlSWNvbic7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXRQcm9wcyBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiwgQ2hhdE9wdGlvbnMge1xuICBtZXNzYWdlRm9ybWF0dGVyPzogTWVzc2FnZUZvcm1hdHRlcjtcbn1cblxuLyoqXG4gKiBUaGUgQ2hhdCBjb21wb25lbnQgcHJvdmlkZXMgcmVhZHktdG8tdXNlIGNoYXQgZnVuY3Rpb25hbGl0eSBpbiBhIExpdmVLaXQgcm9vbS5cbiAqIE1lc3NhZ2VzIGFyZSBkaXN0cmlidXRlZCB0byBhbGwgcGFydGljaXBhbnRzIGluIHRoZSByb29tIGluIHJlYWwtdGltZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogLSBPbmx5IHVzZXJzIHdobyBhcmUgaW4gdGhlIHJvb20gYXQgdGhlIHRpbWUgb2YgZGlzcGF0Y2ggd2lsbCByZWNlaXZlIG1lc3NhZ2VzXG4gKiAtIE1lc3NhZ2UgaGlzdG9yeSBpcyBub3QgcGVyc2lzdGVkIGJldHdlZW4gc2Vzc2lvbnNcbiAqIC0gUmVxdWlyZXMgYEBsaXZla2l0L2NvbXBvbmVudHMtc3R5bGVzYCB0byBiZSBpbXBvcnRlZCBmb3Igc3R5bGluZ1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGltcG9ydCAnQGxpdmVraXQvY29tcG9uZW50cy1zdHlsZXMnO1xuICpcbiAqIGZ1bmN0aW9uIFJvb20oKSB7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpdmVLaXRSb29tIGRhdGEtbGstdGhlbWU9XCJkZWZhdWx0XCI+XG4gKiAgICAgICA8Q2hhdCAvPlxuICogICAgIDwvTGl2ZUtpdFJvb20+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBGb3IgY3VzdG9tIHN0eWxpbmcsIHJlZmVyIHRvOiBodHRwczovL2RvY3MubGl2ZWtpdC5pby9yZWZlcmVuY2UvY29tcG9uZW50cy9yZWFjdC9jb25jZXB0cy9zdHlsZS1jb21wb25lbnRzL1xuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENoYXQoe1xuICBtZXNzYWdlRm9ybWF0dGVyLFxuICBtZXNzYWdlRGVjb2RlcixcbiAgbWVzc2FnZUVuY29kZXIsXG4gIGNoYW5uZWxUb3BpYyxcbiAgLi4ucHJvcHNcbn06IENoYXRQcm9wcykge1xuICBjb25zdCB1bFJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MVUxpc3RFbGVtZW50PihudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgY2hhdE9wdGlvbnM6IENoYXRPcHRpb25zID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHsgbWVzc2FnZURlY29kZXIsIG1lc3NhZ2VFbmNvZGVyLCBjaGFubmVsVG9waWMgfTtcbiAgfSwgW21lc3NhZ2VEZWNvZGVyLCBtZXNzYWdlRW5jb2RlciwgY2hhbm5lbFRvcGljXSk7XG5cbiAgY29uc3QgeyBjaGF0TWVzc2FnZXMsIHNlbmQsIGlzU2VuZGluZyB9ID0gdXNlQ2hhdChjaGF0T3B0aW9ucyk7XG5cbiAgY29uc3QgbGF5b3V0Q29udGV4dCA9IHVzZU1heWJlTGF5b3V0Q29udGV4dCgpO1xuICBjb25zdCBsYXN0UmVhZE1zZ0F0ID0gUmVhY3QudXNlUmVmPENoYXRNZXNzYWdlWyd0aW1lc3RhbXAnXT4oMCk7XG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU3VibWl0KGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGlucHV0UmVmLmN1cnJlbnQudmFsdWUudHJpbSgpICE9PSAnJykge1xuICAgICAgYXdhaXQgc2VuZChpbnB1dFJlZi5jdXJyZW50LnZhbHVlKTtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQudmFsdWUgPSAnJztcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh1bFJlZikge1xuICAgICAgdWxSZWYuY3VycmVudD8uc2Nyb2xsVG8oeyB0b3A6IHVsUmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0IH0pO1xuICAgIH1cbiAgfSwgW3VsUmVmLCBjaGF0TWVzc2FnZXNdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghbGF5b3V0Q29udGV4dCB8fCBjaGF0TWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgbGF5b3V0Q29udGV4dC53aWRnZXQuc3RhdGU/LnNob3dDaGF0ICYmXG4gICAgICBjaGF0TWVzc2FnZXMubGVuZ3RoID4gMCAmJlxuICAgICAgbGFzdFJlYWRNc2dBdC5jdXJyZW50ICE9PSBjaGF0TWVzc2FnZXNbY2hhdE1lc3NhZ2VzLmxlbmd0aCAtIDFdPy50aW1lc3RhbXBcbiAgICApIHtcbiAgICAgIGxhc3RSZWFkTXNnQXQuY3VycmVudCA9IGNoYXRNZXNzYWdlc1tjaGF0TWVzc2FnZXMubGVuZ3RoIC0gMV0/LnRpbWVzdGFtcDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1bnJlYWRNZXNzYWdlQ291bnQgPSBjaGF0TWVzc2FnZXMuZmlsdGVyKFxuICAgICAgKG1zZykgPT4gIWxhc3RSZWFkTXNnQXQuY3VycmVudCB8fCBtc2cudGltZXN0YW1wID4gbGFzdFJlYWRNc2dBdC5jdXJyZW50LFxuICAgICkubGVuZ3RoO1xuXG4gICAgY29uc3QgeyB3aWRnZXQgfSA9IGxheW91dENvbnRleHQ7XG4gICAgaWYgKHVucmVhZE1lc3NhZ2VDb3VudCA+IDAgJiYgd2lkZ2V0LnN0YXRlPy51bnJlYWRNZXNzYWdlcyAhPT0gdW5yZWFkTWVzc2FnZUNvdW50KSB7XG4gICAgICB3aWRnZXQuZGlzcGF0Y2g/Lih7IG1zZzogJ3VucmVhZF9tc2cnLCBjb3VudDogdW5yZWFkTWVzc2FnZUNvdW50IH0pO1xuICAgIH1cbiAgfSwgW2NoYXRNZXNzYWdlcywgbGF5b3V0Q29udGV4dD8ud2lkZ2V0XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPVwibGstY2hhdFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJsay1jaGF0LWhlYWRlclwiPlxuICAgICAgICBNZXNzYWdlc1xuICAgICAgICB7bGF5b3V0Q29udGV4dCAmJiAoXG4gICAgICAgICAgPENoYXRUb2dnbGUgY2xhc3NOYW1lPVwibGstY2xvc2UtYnV0dG9uXCI+XG4gICAgICAgICAgICA8Q2hhdENsb3NlSWNvbiAvPlxuICAgICAgICAgIDwvQ2hhdFRvZ2dsZT5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8dWwgY2xhc3NOYW1lPVwibGstbGlzdCBsay1jaGF0LW1lc3NhZ2VzXCIgcmVmPXt1bFJlZn0+XG4gICAgICAgIHtwcm9wcy5jaGlsZHJlblxuICAgICAgICAgID8gY2hhdE1lc3NhZ2VzLm1hcCgobXNnLCBpZHgpID0+XG4gICAgICAgICAgICAgIGNsb25lU2luZ2xlQ2hpbGQocHJvcHMuY2hpbGRyZW4sIHtcbiAgICAgICAgICAgICAgICBlbnRyeTogbXNnLFxuICAgICAgICAgICAgICAgIGtleTogbXNnLmlkID8/IGlkeCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlRm9ybWF0dGVyLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IGNoYXRNZXNzYWdlcy5tYXAoKG1zZywgaWR4LCBhbGxNc2cpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgaGlkZU5hbWUgPSBpZHggPj0gMSAmJiBhbGxNc2dbaWR4IC0gMV0uZnJvbSA9PT0gbXNnLmZyb207XG4gICAgICAgICAgICAgIC8vIElmIHRoZSB0aW1lIGRlbHRhIGJldHdlZW4gdHdvIG1lc3NhZ2VzIGlzIGJpZ2dlciB0aGFuIDYwcyBzaG93IHRpbWVzdGFtcC5cbiAgICAgICAgICAgICAgY29uc3QgaGlkZVRpbWVzdGFtcCA9IGlkeCA+PSAxICYmIG1zZy50aW1lc3RhbXAgLSBhbGxNc2dbaWR4IC0gMV0udGltZXN0YW1wIDwgNjBfMDAwO1xuXG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPENoYXRFbnRyeVxuICAgICAgICAgICAgICAgICAga2V5PXttc2cuaWQgPz8gaWR4fVxuICAgICAgICAgICAgICAgICAgaGlkZU5hbWU9e2hpZGVOYW1lfVxuICAgICAgICAgICAgICAgICAgaGlkZVRpbWVzdGFtcD17aGlkZU5hbWUgPT09IGZhbHNlID8gZmFsc2UgOiBoaWRlVGltZXN0YW1wfSAvLyBJZiB3ZSBzaG93IHRoZSBuYW1lIGFsd2F5cyBzaG93IHRoZSB0aW1lc3RhbXAgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICAgIGVudHJ5PXttc2d9XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlRm9ybWF0dGVyPXttZXNzYWdlRm9ybWF0dGVyfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgIDwvdWw+XG4gICAgICA8Zm9ybSBjbGFzc05hbWU9XCJsay1jaGF0LWZvcm1cIiBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgY2xhc3NOYW1lPVwibGstZm9ybS1jb250cm9sIGxrLWNoYXQtZm9ybS1pbnB1dFwiXG4gICAgICAgICAgZGlzYWJsZWQ9e2lzU2VuZGluZ31cbiAgICAgICAgICByZWY9e2lucHV0UmVmfVxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGEgbWVzc2FnZS4uLlwiXG4gICAgICAgICAgb25JbnB1dD17KGV2KSA9PiBldi5zdG9wUHJvcGFnYXRpb24oKX1cbiAgICAgICAgICBvbktleURvd249eyhldikgPT4gZXYuc3RvcFByb3BhZ2F0aW9uKCl9XG4gICAgICAgICAgb25LZXlVcD17KGV2KSA9PiBldi5zdG9wUHJvcGFnYXRpb24oKX1cbiAgICAgICAgLz5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3NOYW1lPVwibGstYnV0dG9uIGxrLWNoYXQtZm9ybS1idXR0b25cIiBkaXNhYmxlZD17aXNTZW5kaW5nfT5cbiAgICAgICAgICBTZW5kXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IHsgY29tcHV0ZU1lbnVQb3NpdGlvbiwgd2FzQ2xpY2tPdXRzaWRlLCBsb2cgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTWVkaWFEZXZpY2VTZWxlY3QgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRyb2xzL01lZGlhRGV2aWNlU2VsZWN0JztcbmltcG9ydCB0eXBlIHsgTG9jYWxBdWRpb1RyYWNrLCBMb2NhbFZpZGVvVHJhY2sgfSBmcm9tICdsaXZla2l0LWNsaWVudCc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIE1lZGlhRGV2aWNlTWVudVByb3BzIGV4dGVuZHMgUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+IHtcbiAga2luZD86IE1lZGlhRGV2aWNlS2luZDtcbiAgaW5pdGlhbFNlbGVjdGlvbj86IHN0cmluZztcbiAgb25BY3RpdmVEZXZpY2VDaGFuZ2U/OiAoa2luZDogTWVkaWFEZXZpY2VLaW5kLCBkZXZpY2VJZDogc3RyaW5nKSA9PiB2b2lkO1xuICB0cmFja3M/OiBQYXJ0aWFsPFJlY29yZDxNZWRpYURldmljZUtpbmQsIExvY2FsQXVkaW9UcmFjayB8IExvY2FsVmlkZW9UcmFjayB8IHVuZGVmaW5lZD4+O1xuICAvKipcbiAgICogdGhpcyB3aWxsIGNhbGwgZ2V0VXNlck1lZGlhIGlmIHRoZSBwZXJtaXNzaW9ucyBhcmUgbm90IHlldCBnaXZlbiB0byBlbnVtZXJhdGUgdGhlIGRldmljZXMgd2l0aCBkZXZpY2UgbGFiZWxzLlxuICAgKiBpbiBzb21lIGJyb3dzZXJzIG11bHRpcGxlIGNhbGxzIHRvIGdldFVzZXJNZWRpYSByZXN1bHQgaW4gbXVsdGlwbGUgcGVybWlzc2lvbiBwcm9tcHRzLlxuICAgKiBJdCdzIGdlbmVyYWxseSBhZHZpc2VkIG9ubHkgZmxpcCB0aGlzIHRvIHRydWUsIG9uY2UgYSAocHJldmlldykgdHJhY2sgaGFzIGJlZW4gYWNxdWlyZWQgc3VjY2Vzc2Z1bGx5IHdpdGggdGhlXG4gICAqIGFwcHJvcHJpYXRlIHBlcm1pc3Npb25zLlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBQcmVKb2lufVxuICAgKiBAc2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFEZXZpY2VzL2VudW1lcmF0ZURldmljZXMgfCBNRE4gZW51bWVyYXRlRGV2aWNlc31cbiAgICovXG4gIHJlcXVlc3RQZXJtaXNzaW9ucz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIGBNZWRpYURldmljZU1lbnVgIGNvbXBvbmVudCBpcyBhIGJ1dHRvbiB0aGF0IG9wZW5zIGEgbWVudSB0aGF0IGxpc3RzXG4gKiBhbGwgbWVkaWEgZGV2aWNlcyBhbmQgYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCB0aGVtLlxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGlzIGNvbXBvbmVudCBpcyBpbXBsZW1lbnRlZCB3aXRoIHRoZSBgTWVkaWFEZXZpY2VTZWxlY3RgIExpdmVLaXQgY29tcG9uZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiA8TGl2ZUtpdFJvb20+XG4gKiAgIDxNZWRpYURldmljZU1lbnUgLz5cbiAqIDwvTGl2ZUtpdFJvb20+XG4gKiBgYGBcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1lZGlhRGV2aWNlTWVudSh7XG4gIGtpbmQsXG4gIGluaXRpYWxTZWxlY3Rpb24sXG4gIG9uQWN0aXZlRGV2aWNlQ2hhbmdlLFxuICB0cmFja3MsXG4gIHJlcXVlc3RQZXJtaXNzaW9ucyA9IGZhbHNlLFxuICAuLi5wcm9wc1xufTogTWVkaWFEZXZpY2VNZW51UHJvcHMpIHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2RldmljZXMsIHNldERldmljZXNdID0gUmVhY3QudXNlU3RhdGU8TWVkaWFEZXZpY2VJbmZvW10+KFtdKTtcbiAgY29uc3QgW3VwZGF0ZVJlcXVpcmVkLCBzZXRVcGRhdGVSZXF1aXJlZF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPih0cnVlKTtcbiAgY29uc3QgW25lZWRQZXJtaXNzaW9ucywgc2V0TmVlZFBlcm1pc3Npb25zXSA9IFJlYWN0LnVzZVN0YXRlKHJlcXVlc3RQZXJtaXNzaW9ucyk7XG5cbiAgY29uc3QgaGFuZGxlQWN0aXZlRGV2aWNlQ2hhbmdlID0gKGtpbmQ6IE1lZGlhRGV2aWNlS2luZCwgZGV2aWNlSWQ6IHN0cmluZykgPT4ge1xuICAgIGxvZy5kZWJ1ZygnaGFuZGxlIGRldmljZSBjaGFuZ2UnKTtcbiAgICBzZXRJc09wZW4oZmFsc2UpO1xuICAgIG9uQWN0aXZlRGV2aWNlQ2hhbmdlPy4oa2luZCwgZGV2aWNlSWQpO1xuICB9O1xuXG4gIGNvbnN0IGJ1dHRvbiA9IFJlYWN0LnVzZVJlZjxIVE1MQnV0dG9uRWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHRvb2x0aXAgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzT3Blbikge1xuICAgICAgc2V0TmVlZFBlcm1pc3Npb25zKHRydWUpO1xuICAgIH1cbiAgfSwgW2lzT3Blbl0pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGNsZWFudXA6IFJldHVyblR5cGU8dHlwZW9mIGNvbXB1dGVNZW51UG9zaXRpb24+IHwgdW5kZWZpbmVkO1xuICAgIGlmIChidXR0b24uY3VycmVudCAmJiB0b29sdGlwLmN1cnJlbnQgJiYgKGRldmljZXMgfHwgdXBkYXRlUmVxdWlyZWQpKSB7XG4gICAgICBjbGVhbnVwID0gY29tcHV0ZU1lbnVQb3NpdGlvbihidXR0b24uY3VycmVudCwgdG9vbHRpcC5jdXJyZW50LCAoeCwgeSkgPT4ge1xuICAgICAgICBpZiAodG9vbHRpcC5jdXJyZW50KSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih0b29sdGlwLmN1cnJlbnQuc3R5bGUsIHsgbGVmdDogYCR7eH1weGAsIHRvcDogYCR7eX1weGAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRVcGRhdGVSZXF1aXJlZChmYWxzZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFudXA/LigpO1xuICAgIH07XG4gIH0sIFtidXR0b24sIHRvb2x0aXAsIGRldmljZXMsIHVwZGF0ZVJlcXVpcmVkXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICBpZiAoIXRvb2x0aXAuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBidXR0b24uY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNPcGVuICYmIHdhc0NsaWNrT3V0c2lkZSh0b29sdGlwLmN1cnJlbnQsIGV2ZW50KSkge1xuICAgICAgICBzZXRJc09wZW4oZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2lzT3BlbiwgdG9vbHRpcCwgYnV0dG9uXSxcbiAgKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI8J2NsaWNrJz4oJ2NsaWNrJywgaGFuZGxlQ2xpY2tPdXRzaWRlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcjwnY2xpY2snPignY2xpY2snLCBoYW5kbGVDbGlja091dHNpZGUpO1xuICAgIH07XG4gIH0sIFtoYW5kbGVDbGlja091dHNpZGVdKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cImxrLWJ1dHRvbiBsay1idXR0b24tbWVudVwiXG4gICAgICAgIGFyaWEtcHJlc3NlZD17aXNPcGVufVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzT3BlbighaXNPcGVuKX1cbiAgICAgICAgcmVmPXtidXR0b259XG4gICAgICA+XG4gICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgey8qKiBvbmx5IHJlbmRlciB3aGVuIGVuYWJsZWQgaW4gb3JkZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHBlcm1pc3Npb25zIGFyZSByZXF1ZXN0ZWQgb25seSBpZiB0aGUgbWVudSBpcyBlbmFibGVkICovfVxuICAgICAgeyFwcm9wcy5kaXNhYmxlZCAmJiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJsay1kZXZpY2UtbWVudVwiXG4gICAgICAgICAgcmVmPXt0b29sdGlwfVxuICAgICAgICAgIHN0eWxlPXt7IHZpc2liaWxpdHk6IGlzT3BlbiA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nIH19XG4gICAgICAgID5cbiAgICAgICAgICB7a2luZCA/IChcbiAgICAgICAgICAgIDxNZWRpYURldmljZVNlbGVjdFxuICAgICAgICAgICAgICBpbml0aWFsU2VsZWN0aW9uPXtpbml0aWFsU2VsZWN0aW9ufVxuICAgICAgICAgICAgICBvbkFjdGl2ZURldmljZUNoYW5nZT17KGRldmljZUlkKSA9PiBoYW5kbGVBY3RpdmVEZXZpY2VDaGFuZ2Uoa2luZCwgZGV2aWNlSWQpfVxuICAgICAgICAgICAgICBvbkRldmljZUxpc3RDaGFuZ2U9e3NldERldmljZXN9XG4gICAgICAgICAgICAgIGtpbmQ9e2tpbmR9XG4gICAgICAgICAgICAgIHRyYWNrPXt0cmFja3M/LltraW5kXX1cbiAgICAgICAgICAgICAgcmVxdWVzdFBlcm1pc3Npb25zPXtuZWVkUGVybWlzc2lvbnN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxrLWRldmljZS1tZW51LWhlYWRpbmdcIj5BdWRpbyBpbnB1dHM8L2Rpdj5cbiAgICAgICAgICAgICAgPE1lZGlhRGV2aWNlU2VsZWN0XG4gICAgICAgICAgICAgICAga2luZD1cImF1ZGlvaW5wdXRcIlxuICAgICAgICAgICAgICAgIG9uQWN0aXZlRGV2aWNlQ2hhbmdlPXsoZGV2aWNlSWQpID0+XG4gICAgICAgICAgICAgICAgICBoYW5kbGVBY3RpdmVEZXZpY2VDaGFuZ2UoJ2F1ZGlvaW5wdXQnLCBkZXZpY2VJZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25EZXZpY2VMaXN0Q2hhbmdlPXtzZXREZXZpY2VzfVxuICAgICAgICAgICAgICAgIHRyYWNrPXt0cmFja3M/LmF1ZGlvaW5wdXR9XG4gICAgICAgICAgICAgICAgcmVxdWVzdFBlcm1pc3Npb25zPXtuZWVkUGVybWlzc2lvbnN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGstZGV2aWNlLW1lbnUtaGVhZGluZ1wiPlZpZGVvIGlucHV0czwvZGl2PlxuICAgICAgICAgICAgICA8TWVkaWFEZXZpY2VTZWxlY3RcbiAgICAgICAgICAgICAgICBraW5kPVwidmlkZW9pbnB1dFwiXG4gICAgICAgICAgICAgICAgb25BY3RpdmVEZXZpY2VDaGFuZ2U9eyhkZXZpY2VJZCkgPT5cbiAgICAgICAgICAgICAgICAgIGhhbmRsZUFjdGl2ZURldmljZUNoYW5nZSgndmlkZW9pbnB1dCcsIGRldmljZUlkKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkRldmljZUxpc3RDaGFuZ2U9e3NldERldmljZXN9XG4gICAgICAgICAgICAgICAgdHJhY2s9e3RyYWNrcz8udmlkZW9pbnB1dH1cbiAgICAgICAgICAgICAgICByZXF1ZXN0UGVybWlzc2lvbnM9e25lZWRQZXJtaXNzaW9uc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHdhcm5BYm91dE1pc3NpbmdTdHlsZXMgfSBmcm9tICcuLi91dGlscyc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzKCkge1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdhcm5BYm91dE1pc3NpbmdTdHlsZXMoKTtcbiAgfSwgW10pO1xufVxuIiwiaW1wb3J0IHR5cGUge1xuICBDcmVhdGVMb2NhbFRyYWNrc09wdGlvbnMsXG4gIExvY2FsQXVkaW9UcmFjayxcbiAgTG9jYWxUcmFjayxcbiAgTG9jYWxWaWRlb1RyYWNrLFxuICBUcmFja1Byb2Nlc3Nvcixcbn0gZnJvbSAnbGl2ZWtpdC1jbGllbnQnO1xuaW1wb3J0IHtcbiAgY3JlYXRlTG9jYWxBdWRpb1RyYWNrLFxuICBjcmVhdGVMb2NhbFRyYWNrcyxcbiAgY3JlYXRlTG9jYWxWaWRlb1RyYWNrLFxuICBmYWNpbmdNb2RlRnJvbUxvY2FsVHJhY2ssXG4gIFRyYWNrLFxuICBWaWRlb1ByZXNldHMsXG4gIE11dGV4LFxufSBmcm9tICdsaXZla2l0LWNsaWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNZWRpYURldmljZU1lbnUgfSBmcm9tICcuL01lZGlhRGV2aWNlTWVudSc7XG5pbXBvcnQgeyBUcmFja1RvZ2dsZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29udHJvbHMvVHJhY2tUb2dnbGUnO1xuaW1wb3J0IHR5cGUgeyBMb2NhbFVzZXJDaG9pY2VzIH0gZnJvbSAnQGxpdmVraXQvY29tcG9uZW50cy1jb3JlJztcbmltcG9ydCB7IGxvZyB9IGZyb20gJ0BsaXZla2l0L2NvbXBvbmVudHMtY29yZSc7XG5pbXBvcnQgeyBQYXJ0aWNpcGFudFBsYWNlaG9sZGVyIH0gZnJvbSAnLi4vYXNzZXRzL2ltYWdlcyc7XG5pbXBvcnQgeyB1c2VNZWRpYURldmljZXMsIHVzZVBlcnNpc3RlbnRVc2VyQ2hvaWNlcyB9IGZyb20gJy4uL2hvb2tzJztcbmltcG9ydCB7IHVzZVdhcm5BYm91dE1pc3NpbmdTdHlsZXMgfSBmcm9tICcuLi9ob29rcy91c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzJztcbmltcG9ydCB7IHJvb21PcHRpb25zU3RyaW5naWZ5UmVwbGFjZXIgfSBmcm9tICcuLi91dGlscyc7XG5cbi8qKlxuICogUHJvcHMgZm9yIHRoZSBQcmVKb2luIGNvbXBvbmVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcmVKb2luUHJvcHNcbiAgZXh0ZW5kcyBPbWl0PFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiwgJ29uU3VibWl0JyB8ICdvbkVycm9yJz4ge1xuICAvKiogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgYExvY2FsVXNlckNob2ljZXNgIGlmIHZhbGlkYXRpb24gaXMgcGFzc2VkLiAqL1xuICBvblN1Ym1pdD86ICh2YWx1ZXM6IExvY2FsVXNlckNob2ljZXMpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBQcm92aWRlIHlvdXIgY3VzdG9tIHZhbGlkYXRpb24gZnVuY3Rpb24uIE9ubHkgaWYgdmFsaWRhdGlvbiBpcyBzdWNjZXNzZnVsIHRoZSB1c2VyIGNob2ljZXMgYXJlIHBhc3QgdG8gdGhlIG9uU3VibWl0IGNhbGxiYWNrLlxuICAgKi9cbiAgb25WYWxpZGF0ZT86ICh2YWx1ZXM6IExvY2FsVXNlckNob2ljZXMpID0+IGJvb2xlYW47XG4gIG9uRXJyb3I/OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkO1xuICAvKiogUHJlZmlsbCB0aGUgaW5wdXQgZm9ybSB3aXRoIGluaXRpYWwgdmFsdWVzLiAqL1xuICBkZWZhdWx0cz86IFBhcnRpYWw8TG9jYWxVc2VyQ2hvaWNlcz47XG4gIC8qKiBEaXNwbGF5IGEgZGVidWcgd2luZG93IGZvciB5b3VyIGNvbnZlbmllbmNlLiAqL1xuICBkZWJ1Zz86IGJvb2xlYW47XG4gIGpvaW5MYWJlbD86IHN0cmluZztcbiAgbWljTGFiZWw/OiBzdHJpbmc7XG4gIGNhbUxhYmVsPzogc3RyaW5nO1xuICB1c2VyTGFiZWw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJZiB0cnVlLCB1c2VyIGNob2ljZXMgYXJlIHBlcnNpc3RlZCBhY3Jvc3Mgc2Vzc2lvbnMuXG4gICAqIEBkZWZhdWx0VmFsdWUgdHJ1ZVxuICAgKiBAYWxwaGFcbiAgICovXG4gIHBlcnNpc3RVc2VyQ2hvaWNlcz86IGJvb2xlYW47XG4gIHZpZGVvUHJvY2Vzc29yPzogVHJhY2tQcm9jZXNzb3I8VHJhY2suS2luZC5WaWRlbz47XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJldmlld1RyYWNrcyhcbiAgb3B0aW9uczogQ3JlYXRlTG9jYWxUcmFja3NPcHRpb25zLFxuICBvbkVycm9yPzogKGVycjogRXJyb3IpID0+IHZvaWQsXG4pIHtcbiAgY29uc3QgW3RyYWNrcywgc2V0VHJhY2tzXSA9IFJlYWN0LnVzZVN0YXRlPExvY2FsVHJhY2tbXT4oKTtcblxuICBjb25zdCB0cmFja0xvY2sgPSBSZWFjdC51c2VNZW1vKCgpID0+IG5ldyBNdXRleCgpLCBbXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgbmVlZHNDbGVhbnVwID0gZmFsc2U7XG4gICAgbGV0IGxvY2FsVHJhY2tzOiBBcnJheTxMb2NhbFRyYWNrPiA9IFtdO1xuICAgIHRyYWNrTG9jay5sb2NrKCkudGhlbihhc3luYyAodW5sb2NrKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAob3B0aW9ucy5hdWRpbyB8fCBvcHRpb25zLnZpZGVvKSB7XG4gICAgICAgICAgbG9jYWxUcmFja3MgPSBhd2FpdCBjcmVhdGVMb2NhbFRyYWNrcyhvcHRpb25zKTtcblxuICAgICAgICAgIGlmIChuZWVkc0NsZWFudXApIHtcbiAgICAgICAgICAgIGxvY2FsVHJhY2tzLmZvckVhY2goKHRyKSA9PiB0ci5zdG9wKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUcmFja3MobG9jYWxUcmFja3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZTogdW5rbm93bikge1xuICAgICAgICBpZiAob25FcnJvciAmJiBlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBvbkVycm9yKGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdW5sb2NrKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbmVlZHNDbGVhbnVwID0gdHJ1ZTtcbiAgICAgIGxvY2FsVHJhY2tzLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgIHRyYWNrLnN0b3AoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0sIFtKU09OLnN0cmluZ2lmeShvcHRpb25zLCByb29tT3B0aW9uc1N0cmluZ2lmeVJlcGxhY2VyKSwgb25FcnJvciwgdHJhY2tMb2NrXSk7XG5cbiAgcmV0dXJuIHRyYWNrcztcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCB1c2UgYHVzZVByZXZpZXdUcmFja3NgIGluc3RlYWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVByZXZpZXdEZXZpY2U8VCBleHRlbmRzIExvY2FsVmlkZW9UcmFjayB8IExvY2FsQXVkaW9UcmFjaz4oXG4gIGVuYWJsZWQ6IGJvb2xlYW4sXG4gIGRldmljZUlkOiBzdHJpbmcsXG4gIGtpbmQ6ICd2aWRlb2lucHV0JyB8ICdhdWRpb2lucHV0Jyxcbikge1xuICBjb25zdCBbZGV2aWNlRXJyb3IsIHNldERldmljZUVycm9yXSA9IFJlYWN0LnVzZVN0YXRlPEVycm9yIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtpc0NyZWF0aW5nVHJhY2ssIHNldElzQ3JlYXRpbmdUcmFja10gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cbiAgY29uc3QgZGV2aWNlcyA9IHVzZU1lZGlhRGV2aWNlcyh7IGtpbmQgfSk7XG4gIGNvbnN0IFtzZWxlY3RlZERldmljZSwgc2V0U2VsZWN0ZWREZXZpY2VdID0gUmVhY3QudXNlU3RhdGU8TWVkaWFEZXZpY2VJbmZvIHwgdW5kZWZpbmVkPihcbiAgICB1bmRlZmluZWQsXG4gICk7XG5cbiAgY29uc3QgW2xvY2FsVHJhY2ssIHNldExvY2FsVHJhY2tdID0gUmVhY3QudXNlU3RhdGU8VD4oKTtcbiAgY29uc3QgW2xvY2FsRGV2aWNlSWQsIHNldExvY2FsRGV2aWNlSWRdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPihkZXZpY2VJZCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRMb2NhbERldmljZUlkKGRldmljZUlkKTtcbiAgfSwgW2RldmljZUlkXSk7XG5cbiAgY29uc3QgY3JlYXRlVHJhY2sgPSBhc3luYyAoZGV2aWNlSWQ6IHN0cmluZywga2luZDogJ3ZpZGVvaW5wdXQnIHwgJ2F1ZGlvaW5wdXQnKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRyYWNrID1cbiAgICAgICAga2luZCA9PT0gJ3ZpZGVvaW5wdXQnXG4gICAgICAgICAgPyBhd2FpdCBjcmVhdGVMb2NhbFZpZGVvVHJhY2soe1xuICAgICAgICAgICAgICBkZXZpY2VJZCxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogVmlkZW9QcmVzZXRzLmg3MjAucmVzb2x1dGlvbixcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBhd2FpdCBjcmVhdGVMb2NhbEF1ZGlvVHJhY2soeyBkZXZpY2VJZCB9KTtcblxuICAgICAgY29uc3QgbmV3RGV2aWNlSWQgPSBhd2FpdCB0cmFjay5nZXREZXZpY2VJZChmYWxzZSk7XG4gICAgICBpZiAobmV3RGV2aWNlSWQgJiYgZGV2aWNlSWQgIT09IG5ld0RldmljZUlkKSB7XG4gICAgICAgIHByZXZEZXZpY2VJZC5jdXJyZW50ID0gbmV3RGV2aWNlSWQ7XG4gICAgICAgIHNldExvY2FsRGV2aWNlSWQobmV3RGV2aWNlSWQpO1xuICAgICAgfVxuICAgICAgc2V0TG9jYWxUcmFjayh0cmFjayBhcyBUKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHNldERldmljZUVycm9yKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBzd2l0Y2hEZXZpY2UgPSBhc3luYyAodHJhY2s6IExvY2FsVmlkZW9UcmFjayB8IExvY2FsQXVkaW9UcmFjaywgaWQ6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IHRyYWNrLnNldERldmljZUlkKGlkKTtcbiAgICBwcmV2RGV2aWNlSWQuY3VycmVudCA9IGlkO1xuICB9O1xuXG4gIGNvbnN0IHByZXZEZXZpY2VJZCA9IFJlYWN0LnVzZVJlZihsb2NhbERldmljZUlkKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChlbmFibGVkICYmICFsb2NhbFRyYWNrICYmICFkZXZpY2VFcnJvciAmJiAhaXNDcmVhdGluZ1RyYWNrKSB7XG4gICAgICBsb2cuZGVidWcoJ2NyZWF0aW5nIHRyYWNrJywga2luZCk7XG4gICAgICBzZXRJc0NyZWF0aW5nVHJhY2sodHJ1ZSk7XG4gICAgICBjcmVhdGVUcmFjayhsb2NhbERldmljZUlkLCBraW5kKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgc2V0SXNDcmVhdGluZ1RyYWNrKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2VuYWJsZWQsIGxvY2FsVHJhY2ssIGRldmljZUVycm9yLCBpc0NyZWF0aW5nVHJhY2tdKTtcblxuICAvLyBzd2l0Y2ggY2FtZXJhIGRldmljZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghbG9jYWxUcmFjaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWVuYWJsZWQpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgbXV0aW5nICR7a2luZH0gdHJhY2tgKTtcbiAgICAgIGxvY2FsVHJhY2subXV0ZSgpLnRoZW4oKCkgPT4gbG9nLmRlYnVnKGxvY2FsVHJhY2subWVkaWFTdHJlYW1UcmFjaykpO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWREZXZpY2U/LmRldmljZUlkICYmIHByZXZEZXZpY2VJZC5jdXJyZW50ICE9PSBzZWxlY3RlZERldmljZT8uZGV2aWNlSWQpIHtcbiAgICAgIGxvZy5kZWJ1Zyhgc3dpdGNoaW5nICR7a2luZH0gZGV2aWNlIGZyb21gLCBwcmV2RGV2aWNlSWQuY3VycmVudCwgc2VsZWN0ZWREZXZpY2UuZGV2aWNlSWQpO1xuICAgICAgc3dpdGNoRGV2aWNlKGxvY2FsVHJhY2ssIHNlbGVjdGVkRGV2aWNlLmRldmljZUlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKGB1bm11dGluZyBsb2NhbCAke2tpbmR9IHRyYWNrYCk7XG4gICAgICBsb2NhbFRyYWNrLnVubXV0ZSgpO1xuICAgIH1cbiAgfSwgW2xvY2FsVHJhY2ssIHNlbGVjdGVkRGV2aWNlLCBlbmFibGVkLCBraW5kXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGxvY2FsVHJhY2spIHtcbiAgICAgICAgbG9nLmRlYnVnKGBzdG9wcGluZyBsb2NhbCAke2tpbmR9IHRyYWNrYCk7XG4gICAgICAgIGxvY2FsVHJhY2suc3RvcCgpO1xuICAgICAgICBsb2NhbFRyYWNrLm11dGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRTZWxlY3RlZERldmljZShkZXZpY2VzPy5maW5kKChkZXYpID0+IGRldi5kZXZpY2VJZCA9PT0gbG9jYWxEZXZpY2VJZCkpO1xuICB9LCBbbG9jYWxEZXZpY2VJZCwgZGV2aWNlc10pO1xuXG4gIHJldHVybiB7XG4gICAgc2VsZWN0ZWREZXZpY2UsXG4gICAgbG9jYWxUcmFjayxcbiAgICBkZXZpY2VFcnJvcixcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgYFByZUpvaW5gIHByZWZhYiBjb21wb25lbnQgaXMgbm9ybWFsbHkgcHJlc2VudGVkIHRvIHRoZSB1c2VyIGJlZm9yZSBoZSBlbnRlcnMgYSByb29tLlxuICogVGhpcyBjb21wb25lbnQgYWxsb3dzIHRoZSB1c2VyIHRvIGNoZWNrIGFuZCBzZWxlY3QgdGhlIHByZWZlcnJlZCBtZWRpYSBkZXZpY2UgKGNhbWVyYSB1bmQgbWljcm9waG9uZSkuXG4gKiBPbiBzdWJtaXQgdGhlIHVzZXIgZGVjaXNpb25zIGFyZSByZXR1cm5lZCwgd2hpY2ggY2FuIHRoZW4gYmUgcGFzc2VkIG9uIHRvIHRoZSBgTGl2ZUtpdFJvb21gIHNvIHRoYXQgdGhlIHVzZXIgZW50ZXJzIHRoZSByb29tIHdpdGggdGhlIGNvcnJlY3QgbWVkaWEgZGV2aWNlcy5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhpcyBjb21wb25lbnQgaXMgaW5kZXBlbmRlbnQgb2YgdGhlIGBMaXZlS2l0Um9vbWAgY29tcG9uZW50IGFuZCBzaG91bGQgbm90IGJlIG5lc3RlZCB3aXRoaW4gaXQuXG4gKiBCZWNhdXNlIGl0IG9ubHkgYWNjZXNzZXMgdGhlIGxvY2FsIG1lZGlhIHRyYWNrcyB0aGlzIGNvbXBvbmVudCBpcyBzZWxmLWNvbnRhaW5lZCBhbmQgd29ya3Mgd2l0aG91dCBjb25uZWN0aW9uIHRvIHRoZSBMaXZlS2l0IHNlcnZlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiA8UHJlSm9pbiAvPlxuICogYGBgXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQcmVKb2luKHtcbiAgZGVmYXVsdHMgPSB7fSxcbiAgb25WYWxpZGF0ZSxcbiAgb25TdWJtaXQsXG4gIG9uRXJyb3IsXG4gIGRlYnVnLFxuICBqb2luTGFiZWwgPSAnSm9pbiBSb29tJyxcbiAgbWljTGFiZWwgPSAnTWljcm9waG9uZScsXG4gIGNhbUxhYmVsID0gJ0NhbWVyYScsXG4gIHVzZXJMYWJlbCA9ICdVc2VybmFtZScsXG4gIHBlcnNpc3RVc2VyQ2hvaWNlcyA9IHRydWUsXG4gIHZpZGVvUHJvY2Vzc29yLFxuICAuLi5odG1sUHJvcHNcbn06IFByZUpvaW5Qcm9wcykge1xuICBjb25zdCB7XG4gICAgdXNlckNob2ljZXM6IGluaXRpYWxVc2VyQ2hvaWNlcyxcbiAgICBzYXZlQXVkaW9JbnB1dERldmljZUlkLFxuICAgIHNhdmVBdWRpb0lucHV0RW5hYmxlZCxcbiAgICBzYXZlVmlkZW9JbnB1dERldmljZUlkLFxuICAgIHNhdmVWaWRlb0lucHV0RW5hYmxlZCxcbiAgICBzYXZlVXNlcm5hbWUsXG4gIH0gPSB1c2VQZXJzaXN0ZW50VXNlckNob2ljZXMoe1xuICAgIGRlZmF1bHRzLFxuICAgIHByZXZlbnRTYXZlOiAhcGVyc2lzdFVzZXJDaG9pY2VzLFxuICAgIHByZXZlbnRMb2FkOiAhcGVyc2lzdFVzZXJDaG9pY2VzLFxuICB9KTtcblxuICBjb25zdCBbdXNlckNob2ljZXMsIHNldFVzZXJDaG9pY2VzXSA9IFJlYWN0LnVzZVN0YXRlKGluaXRpYWxVc2VyQ2hvaWNlcyk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBkZXZpY2Ugc2V0dGluZ3NcbiAgY29uc3QgW2F1ZGlvRW5hYmxlZCwgc2V0QXVkaW9FbmFibGVkXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KHVzZXJDaG9pY2VzLmF1ZGlvRW5hYmxlZCk7XG4gIGNvbnN0IFt2aWRlb0VuYWJsZWQsIHNldFZpZGVvRW5hYmxlZF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPih1c2VyQ2hvaWNlcy52aWRlb0VuYWJsZWQpO1xuICBjb25zdCBbYXVkaW9EZXZpY2VJZCwgc2V0QXVkaW9EZXZpY2VJZF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KHVzZXJDaG9pY2VzLmF1ZGlvRGV2aWNlSWQpO1xuICBjb25zdCBbdmlkZW9EZXZpY2VJZCwgc2V0VmlkZW9EZXZpY2VJZF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KHVzZXJDaG9pY2VzLnZpZGVvRGV2aWNlSWQpO1xuICBjb25zdCBbdXNlcm5hbWUsIHNldFVzZXJuYW1lXSA9IFJlYWN0LnVzZVN0YXRlKHVzZXJDaG9pY2VzLnVzZXJuYW1lKTtcblxuICAvLyBTYXZlIHVzZXIgY2hvaWNlcyB0byBwZXJzaXN0ZW50IHN0b3JhZ2UuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2F2ZUF1ZGlvSW5wdXRFbmFibGVkKGF1ZGlvRW5hYmxlZCk7XG4gIH0sIFthdWRpb0VuYWJsZWQsIHNhdmVBdWRpb0lucHV0RW5hYmxlZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNhdmVWaWRlb0lucHV0RW5hYmxlZCh2aWRlb0VuYWJsZWQpO1xuICB9LCBbdmlkZW9FbmFibGVkLCBzYXZlVmlkZW9JbnB1dEVuYWJsZWRdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzYXZlQXVkaW9JbnB1dERldmljZUlkKGF1ZGlvRGV2aWNlSWQpO1xuICB9LCBbYXVkaW9EZXZpY2VJZCwgc2F2ZUF1ZGlvSW5wdXREZXZpY2VJZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNhdmVWaWRlb0lucHV0RGV2aWNlSWQodmlkZW9EZXZpY2VJZCk7XG4gIH0sIFt2aWRlb0RldmljZUlkLCBzYXZlVmlkZW9JbnB1dERldmljZUlkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2F2ZVVzZXJuYW1lKHVzZXJuYW1lKTtcbiAgfSwgW3VzZXJuYW1lLCBzYXZlVXNlcm5hbWVdKTtcblxuICBjb25zdCB0cmFja3MgPSB1c2VQcmV2aWV3VHJhY2tzKFxuICAgIHtcbiAgICAgIGF1ZGlvOiBhdWRpb0VuYWJsZWQgPyB7IGRldmljZUlkOiBpbml0aWFsVXNlckNob2ljZXMuYXVkaW9EZXZpY2VJZCB9IDogZmFsc2UsXG4gICAgICB2aWRlbzogdmlkZW9FbmFibGVkXG4gICAgICAgID8geyBkZXZpY2VJZDogaW5pdGlhbFVzZXJDaG9pY2VzLnZpZGVvRGV2aWNlSWQsIHByb2Nlc3NvcjogdmlkZW9Qcm9jZXNzb3IgfVxuICAgICAgICA6IGZhbHNlLFxuICAgIH0sXG4gICAgb25FcnJvcixcbiAgKTtcblxuICBjb25zdCB2aWRlb0VsID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIGNvbnN0IHZpZGVvVHJhY2sgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IHRyYWNrcz8uZmlsdGVyKCh0cmFjaykgPT4gdHJhY2sua2luZCA9PT0gVHJhY2suS2luZC5WaWRlbylbMF0gYXMgTG9jYWxWaWRlb1RyYWNrLFxuICAgIFt0cmFja3NdLFxuICApO1xuXG4gIGNvbnN0IGZhY2luZ01vZGUgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBpZiAodmlkZW9UcmFjaykge1xuICAgICAgY29uc3QgeyBmYWNpbmdNb2RlIH0gPSBmYWNpbmdNb2RlRnJvbUxvY2FsVHJhY2sodmlkZW9UcmFjayk7XG4gICAgICByZXR1cm4gZmFjaW5nTW9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgIH1cbiAgfSwgW3ZpZGVvVHJhY2tdKTtcblxuICBjb25zdCBhdWRpb1RyYWNrID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiB0cmFja3M/LmZpbHRlcigodHJhY2spID0+IHRyYWNrLmtpbmQgPT09IFRyYWNrLktpbmQuQXVkaW8pWzBdIGFzIExvY2FsQXVkaW9UcmFjayxcbiAgICBbdHJhY2tzXSxcbiAgKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2aWRlb0VsLmN1cnJlbnQgJiYgdmlkZW9UcmFjaykge1xuICAgICAgdmlkZW9UcmFjay51bm11dGUoKTtcbiAgICAgIHZpZGVvVHJhY2suYXR0YWNoKHZpZGVvRWwuY3VycmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHZpZGVvVHJhY2s/LmRldGFjaCgpO1xuICAgIH07XG4gIH0sIFt2aWRlb1RyYWNrXSk7XG5cbiAgY29uc3QgW2lzVmFsaWQsIHNldElzVmFsaWRdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oKTtcblxuICBjb25zdCBoYW5kbGVWYWxpZGF0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlczogTG9jYWxVc2VyQ2hvaWNlcykgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvblZhbGlkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBvblZhbGlkYXRlKHZhbHVlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWVzLnVzZXJuYW1lICE9PSAnJztcbiAgICAgIH1cbiAgICB9LFxuICAgIFtvblZhbGlkYXRlXSxcbiAgKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IG5ld1VzZXJDaG9pY2VzID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICB2aWRlb0VuYWJsZWQsXG4gICAgICB2aWRlb0RldmljZUlkLFxuICAgICAgYXVkaW9FbmFibGVkLFxuICAgICAgYXVkaW9EZXZpY2VJZCxcbiAgICB9O1xuICAgIHNldFVzZXJDaG9pY2VzKG5ld1VzZXJDaG9pY2VzKTtcbiAgICBzZXRJc1ZhbGlkKGhhbmRsZVZhbGlkYXRpb24obmV3VXNlckNob2ljZXMpKTtcbiAgfSwgW3VzZXJuYW1lLCB2aWRlb0VuYWJsZWQsIGhhbmRsZVZhbGlkYXRpb24sIGF1ZGlvRW5hYmxlZCwgYXVkaW9EZXZpY2VJZCwgdmlkZW9EZXZpY2VJZF0pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChldmVudDogUmVhY3QuRm9ybUV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoaGFuZGxlVmFsaWRhdGlvbih1c2VyQ2hvaWNlcykpIHtcbiAgICAgIGlmICh0eXBlb2Ygb25TdWJtaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb25TdWJtaXQodXNlckNob2ljZXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2cud2FybignVmFsaWRhdGlvbiBmYWlsZWQgd2l0aDogJywgdXNlckNob2ljZXMpO1xuICAgIH1cbiAgfVxuXG4gIHVzZVdhcm5BYm91dE1pc3NpbmdTdHlsZXMoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibGstcHJlam9pblwiIHsuLi5odG1sUHJvcHN9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJsay12aWRlby1jb250YWluZXJcIj5cbiAgICAgICAge3ZpZGVvVHJhY2sgJiYgKFxuICAgICAgICAgIDx2aWRlbyByZWY9e3ZpZGVvRWx9IHdpZHRoPVwiMTI4MFwiIGhlaWdodD1cIjcyMFwiIGRhdGEtbGstZmFjaW5nLW1vZGU9e2ZhY2luZ01vZGV9IC8+XG4gICAgICAgICl9XG4gICAgICAgIHsoIXZpZGVvVHJhY2sgfHwgIXZpZGVvRW5hYmxlZCkgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGstY2FtZXJhLW9mZi1ub3RlXCI+XG4gICAgICAgICAgICA8UGFydGljaXBhbnRQbGFjZWhvbGRlciAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImxrLWJ1dHRvbi1ncm91cC1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsay1idXR0b24tZ3JvdXAgYXVkaW9cIj5cbiAgICAgICAgICA8VHJhY2tUb2dnbGVcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZT17YXVkaW9FbmFibGVkfVxuICAgICAgICAgICAgc291cmNlPXtUcmFjay5Tb3VyY2UuTWljcm9waG9uZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZW5hYmxlZCkgPT4gc2V0QXVkaW9FbmFibGVkKGVuYWJsZWQpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHttaWNMYWJlbH1cbiAgICAgICAgICA8L1RyYWNrVG9nZ2xlPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGstYnV0dG9uLWdyb3VwLW1lbnVcIj5cbiAgICAgICAgICAgIDxNZWRpYURldmljZU1lbnVcbiAgICAgICAgICAgICAgaW5pdGlhbFNlbGVjdGlvbj17YXVkaW9EZXZpY2VJZH1cbiAgICAgICAgICAgICAga2luZD1cImF1ZGlvaW5wdXRcIlxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWF1ZGlvVHJhY2t9XG4gICAgICAgICAgICAgIHRyYWNrcz17eyBhdWRpb2lucHV0OiBhdWRpb1RyYWNrIH19XG4gICAgICAgICAgICAgIG9uQWN0aXZlRGV2aWNlQ2hhbmdlPXsoXywgaWQpID0+IHNldEF1ZGlvRGV2aWNlSWQoaWQpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGstYnV0dG9uLWdyb3VwIHZpZGVvXCI+XG4gICAgICAgICAgPFRyYWNrVG9nZ2xlXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU9e3ZpZGVvRW5hYmxlZH1cbiAgICAgICAgICAgIHNvdXJjZT17VHJhY2suU291cmNlLkNhbWVyYX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZW5hYmxlZCkgPT4gc2V0VmlkZW9FbmFibGVkKGVuYWJsZWQpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtjYW1MYWJlbH1cbiAgICAgICAgICA8L1RyYWNrVG9nZ2xlPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGstYnV0dG9uLWdyb3VwLW1lbnVcIj5cbiAgICAgICAgICAgIDxNZWRpYURldmljZU1lbnVcbiAgICAgICAgICAgICAgaW5pdGlhbFNlbGVjdGlvbj17dmlkZW9EZXZpY2VJZH1cbiAgICAgICAgICAgICAga2luZD1cInZpZGVvaW5wdXRcIlxuICAgICAgICAgICAgICBkaXNhYmxlZD17IXZpZGVvVHJhY2t9XG4gICAgICAgICAgICAgIHRyYWNrcz17eyB2aWRlb2lucHV0OiB2aWRlb1RyYWNrIH19XG4gICAgICAgICAgICAgIG9uQWN0aXZlRGV2aWNlQ2hhbmdlPXsoXywgaWQpID0+IHNldFZpZGVvRGV2aWNlSWQoaWQpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGZvcm0gY2xhc3NOYW1lPVwibGstdXNlcm5hbWUtY29udGFpbmVyXCI+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT1cImxrLWZvcm0tY29udHJvbFwiXG4gICAgICAgICAgaWQ9XCJ1c2VybmFtZVwiXG4gICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgZGVmYXVsdFZhbHVlPXt1c2VybmFtZX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17dXNlckxhYmVsfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoaW5wdXRFbCkgPT4gc2V0VXNlcm5hbWUoaW5wdXRFbC50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJsay1idXR0b24gbGstam9pbi1idXR0b25cIlxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVN1Ym1pdH1cbiAgICAgICAgICBkaXNhYmxlZD17IWlzVmFsaWR9XG4gICAgICAgID5cbiAgICAgICAgICB7am9pbkxhYmVsfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cblxuICAgICAge2RlYnVnICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8c3Ryb25nPlVzZXIgQ2hvaWNlczo8L3N0cm9uZz5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGstbGlzdFwiIHN0eWxlPXt7IG92ZXJmbG93OiAnaGlkZGVuJywgbWF4V2lkdGg6ICcxNXJlbScgfX0+XG4gICAgICAgICAgICA8bGk+VXNlcm5hbWU6IHtgJHt1c2VyQ2hvaWNlcy51c2VybmFtZX1gfTwvbGk+XG4gICAgICAgICAgICA8bGk+VmlkZW8gRW5hYmxlZDoge2Ake3VzZXJDaG9pY2VzLnZpZGVvRW5hYmxlZH1gfTwvbGk+XG4gICAgICAgICAgICA8bGk+QXVkaW8gRW5hYmxlZDoge2Ake3VzZXJDaG9pY2VzLmF1ZGlvRW5hYmxlZH1gfTwvbGk+XG4gICAgICAgICAgICA8bGk+VmlkZW8gRGV2aWNlOiB7YCR7dXNlckNob2ljZXMudmlkZW9EZXZpY2VJZH1gfTwvbGk+XG4gICAgICAgICAgICA8bGk+QXVkaW8gRGV2aWNlOiB7YCR7dXNlckNob2ljZXMuYXVkaW9EZXZpY2VJZH1gfTwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IHsgdXNlTGF5b3V0Q29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQnO1xuaW1wb3J0IHsgbWVyZ2VQcm9wcyB9IGZyb20gJy4uL21lcmdlUHJvcHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKiogQGFscGhhICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNldHRpbmdzVG9nZ2xlUHJvcHMge1xuICBwcm9wczogUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xufVxuXG4vKipcbiAqIFRoZSBgdXNlU2V0dGluZ3NUb2dnbGVgIGhvb2sgcHJvdmlkZXMgc3RhdGUgYW5kIGZ1bmN0aW9ucyBmb3IgdG9nZ2xpbmcgdGhlIHNldHRpbmdzIG1lbnUuXG4gKiBAcmVtYXJrc1xuICogRGVwZW5kcyBvbiB0aGUgYExheW91dENvbnRleHRgIHRvIHdvcmsgcHJvcGVybHkuXG4gKiBAc2VlIHtAbGluayBTZXR0aW5nc01lbnV9XG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNldHRpbmdzVG9nZ2xlKHsgcHJvcHMgfTogVXNlU2V0dGluZ3NUb2dnbGVQcm9wcykge1xuICBjb25zdCB7IGRpc3BhdGNoLCBzdGF0ZSB9ID0gdXNlTGF5b3V0Q29udGV4dCgpLndpZGdldDtcbiAgY29uc3QgY2xhc3NOYW1lID0gJ2xrLWJ1dHRvbiBsay1zZXR0aW5ncy10b2dnbGUnO1xuXG4gIGNvbnN0IG1lcmdlZFByb3BzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMocHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaWYgKGRpc3BhdGNoKSBkaXNwYXRjaCh7IG1zZzogJ3RvZ2dsZV9zZXR0aW5ncycgfSk7XG4gICAgICB9LFxuICAgICAgJ2FyaWEtcHJlc3NlZCc6IHN0YXRlPy5zaG93U2V0dGluZ3MgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgIH0pO1xuICB9LCBbcHJvcHMsIGNsYXNzTmFtZSwgZGlzcGF0Y2gsIHN0YXRlXSk7XG5cbiAgcmV0dXJuIHsgbWVyZ2VkUHJvcHMgfTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNldHRpbmdzVG9nZ2xlIH0gZnJvbSAnLi4vLi4vaG9va3MvdXNlU2V0dGluZ3NUb2dnbGUnO1xuXG4vKiogQGFscGhhICovXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmdzTWVudVRvZ2dsZVByb3BzIGV4dGVuZHMgUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+IHt9XG5cbi8qKlxuICogVGhlIGBTZXR0aW5nc01lbnVUb2dnbGVgIGNvbXBvbmVudCBpcyBhIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGBTZXR0aW5nc01lbnVgIGNvbXBvbmVudC5cbiAqIEByZW1hcmtzXG4gKiBGb3IgdGhlIGNvbXBvbmVudCB0byBoYXZlIGFueSBlZmZlY3QgaXQgaGFzIHRvIGxpdmUgaW5zaWRlIGEgYExheW91dENvbnRleHRgIGNvbnRleHQuXG4gKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBTZXR0aW5nc01lbnVUb2dnbGU6IChcbiAgcHJvcHM6IFNldHRpbmdzTWVudVRvZ2dsZVByb3BzICYgUmVhY3QuUmVmQXR0cmlidXRlczxIVE1MQnV0dG9uRWxlbWVudD4sXG4pID0+IFJlYWN0LlJlYWN0Tm9kZSA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5mb3J3YXJkUmVmPEhUTUxCdXR0b25FbGVtZW50LCBTZXR0aW5nc01lbnVUb2dnbGVQcm9wcz4oXG4gIGZ1bmN0aW9uIFNldHRpbmdzTWVudVRvZ2dsZShwcm9wczogU2V0dGluZ3NNZW51VG9nZ2xlUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHsgbWVyZ2VkUHJvcHMgfSA9IHVzZVNldHRpbmdzVG9nZ2xlKHsgcHJvcHMgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGJ1dHRvbiByZWY9e3JlZn0gey4uLm1lcmdlZFByb3BzfT5cbiAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgPC9idXR0b24+XG4gICAgKTtcbiAgfSxcbik7XG4iLCJpbXBvcnQgeyBUcmFjayB9IGZyb20gJ2xpdmVraXQtY2xpZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1lZGlhRGV2aWNlTWVudSB9IGZyb20gJy4vTWVkaWFEZXZpY2VNZW51JztcbmltcG9ydCB7IERpc2Nvbm5lY3RCdXR0b24gfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRyb2xzL0Rpc2Nvbm5lY3RCdXR0b24nO1xuaW1wb3J0IHsgVHJhY2tUb2dnbGUgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRyb2xzL1RyYWNrVG9nZ2xlJztcbmltcG9ydCB7IENoYXRJY29uLCBHZWFySWNvbiwgTGVhdmVJY29uIH0gZnJvbSAnLi4vYXNzZXRzL2ljb25zJztcbmltcG9ydCB7IENoYXRUb2dnbGUgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRyb2xzL0NoYXRUb2dnbGUnO1xuaW1wb3J0IHsgdXNlTG9jYWxQYXJ0aWNpcGFudFBlcm1pc3Npb25zLCB1c2VQZXJzaXN0ZW50VXNlckNob2ljZXMgfSBmcm9tICcuLi9ob29rcyc7XG5pbXBvcnQgeyB1c2VNZWRpYVF1ZXJ5IH0gZnJvbSAnLi4vaG9va3MvaW50ZXJuYWwnO1xuaW1wb3J0IHsgdXNlTWF5YmVMYXlvdXRDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyBzdXBwb3J0c1NjcmVlblNoYXJpbmcgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHsgbWVyZ2VQcm9wcyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFN0YXJ0TWVkaWFCdXR0b24gfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRyb2xzL1N0YXJ0TWVkaWFCdXR0b24nO1xuaW1wb3J0IHsgU2V0dGluZ3NNZW51VG9nZ2xlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb250cm9scy9TZXR0aW5nc01lbnVUb2dnbGUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgQ29udHJvbEJhckNvbnRyb2xzID0ge1xuICBtaWNyb3Bob25lPzogYm9vbGVhbjtcbiAgY2FtZXJhPzogYm9vbGVhbjtcbiAgY2hhdD86IGJvb2xlYW47XG4gIHNjcmVlblNoYXJlPzogYm9vbGVhbjtcbiAgbGVhdmU/OiBib29sZWFuO1xuICBzZXR0aW5ncz86IGJvb2xlYW47XG59O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBDb250cm9sQmFyUHJvcHMgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4ge1xuICBvbkRldmljZUVycm9yPzogKGVycm9yOiB7IHNvdXJjZTogVHJhY2suU291cmNlOyBlcnJvcjogRXJyb3IgfSkgPT4gdm9pZDtcbiAgdmFyaWF0aW9uPzogJ21pbmltYWwnIHwgJ3ZlcmJvc2UnIHwgJ3RleHRPbmx5JztcbiAgY29udHJvbHM/OiBDb250cm9sQmFyQ29udHJvbHM7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB1c2VyJ3MgZGV2aWNlIGNob2ljZXMgd2lsbCBiZSBwZXJzaXN0ZWQuXG4gICAqIFRoaXMgd2lsbCBlbmFibGUgdGhlIHVzZXIgdG8gaGF2ZSB0aGUgc2FtZSBkZXZpY2UgY2hvaWNlcyB3aGVuIHRoZXkgcmVqb2luIHRoZSByb29tLlxuICAgKiBAZGVmYXVsdFZhbHVlIHRydWVcbiAgICogQGFscGhhXG4gICAqL1xuICBzYXZlVXNlckNob2ljZXM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFRoZSBgQ29udHJvbEJhcmAgcHJlZmFiIGdpdmVzIHRoZSB1c2VyIHRoZSBiYXNpYyB1c2VyIGludGVyZmFjZSB0byBjb250cm9sIHRoZWlyXG4gKiBtZWRpYSBkZXZpY2VzIChjYW1lcmEsIG1pY3JvcGhvbmUgYW5kIHNjcmVlbiBzaGFyZSksIG9wZW4gdGhlIGBDaGF0YCBhbmQgbGVhdmUgdGhlIHJvb20uXG4gKlxuICogQHJlbWFya3NcbiAqIFRoaXMgY29tcG9uZW50IGlzIGJ1aWxkIHdpdGggb3RoZXIgTGl2ZUtpdCBjb21wb25lbnRzIGxpa2UgYFRyYWNrVG9nZ2xlYCxcbiAqIGBEZXZpY2VTZWxlY3RvckJ1dHRvbmAsIGBEaXNjb25uZWN0QnV0dG9uYCBhbmQgYFN0YXJ0QXVkaW9gLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIDxMaXZlS2l0Um9vbT5cbiAqICAgPENvbnRyb2xCYXIgLz5cbiAqIDwvTGl2ZUtpdFJvb20+XG4gKiBgYGBcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbnRyb2xCYXIoe1xuICB2YXJpYXRpb24sXG4gIGNvbnRyb2xzLFxuICBzYXZlVXNlckNob2ljZXMgPSB0cnVlLFxuICBvbkRldmljZUVycm9yLFxuICAuLi5wcm9wc1xufTogQ29udHJvbEJhclByb3BzKSB7XG4gIGNvbnN0IFtpc0NoYXRPcGVuLCBzZXRJc0NoYXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgbGF5b3V0Q29udGV4dCA9IHVzZU1heWJlTGF5b3V0Q29udGV4dCgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChsYXlvdXRDb250ZXh0Py53aWRnZXQuc3RhdGU/LnNob3dDaGF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldElzQ2hhdE9wZW4obGF5b3V0Q29udGV4dD8ud2lkZ2V0LnN0YXRlPy5zaG93Q2hhdCk7XG4gICAgfVxuICB9LCBbbGF5b3V0Q29udGV4dD8ud2lkZ2V0LnN0YXRlPy5zaG93Q2hhdF0pO1xuICBjb25zdCBpc1Rvb0xpdHRsZVNwYWNlID0gdXNlTWVkaWFRdWVyeShgKG1heC13aWR0aDogJHtpc0NoYXRPcGVuID8gMTAwMCA6IDc2MH1weClgKTtcblxuICBjb25zdCBkZWZhdWx0VmFyaWF0aW9uID0gaXNUb29MaXR0bGVTcGFjZSA/ICdtaW5pbWFsJyA6ICd2ZXJib3NlJztcbiAgdmFyaWF0aW9uID8/PSBkZWZhdWx0VmFyaWF0aW9uO1xuXG4gIGNvbnN0IHZpc2libGVDb250cm9scyA9IHsgbGVhdmU6IHRydWUsIC4uLmNvbnRyb2xzIH07XG5cbiAgY29uc3QgbG9jYWxQZXJtaXNzaW9ucyA9IHVzZUxvY2FsUGFydGljaXBhbnRQZXJtaXNzaW9ucygpO1xuXG4gIGlmICghbG9jYWxQZXJtaXNzaW9ucykge1xuICAgIHZpc2libGVDb250cm9scy5jYW1lcmEgPSBmYWxzZTtcbiAgICB2aXNpYmxlQ29udHJvbHMuY2hhdCA9IGZhbHNlO1xuICAgIHZpc2libGVDb250cm9scy5taWNyb3Bob25lID0gZmFsc2U7XG4gICAgdmlzaWJsZUNvbnRyb2xzLnNjcmVlblNoYXJlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdmlzaWJsZUNvbnRyb2xzLmNhbWVyYSA/Pz0gbG9jYWxQZXJtaXNzaW9ucy5jYW5QdWJsaXNoO1xuICAgIHZpc2libGVDb250cm9scy5taWNyb3Bob25lID8/PSBsb2NhbFBlcm1pc3Npb25zLmNhblB1Ymxpc2g7XG4gICAgdmlzaWJsZUNvbnRyb2xzLnNjcmVlblNoYXJlID8/PSBsb2NhbFBlcm1pc3Npb25zLmNhblB1Ymxpc2g7XG4gICAgdmlzaWJsZUNvbnRyb2xzLmNoYXQgPz89IGxvY2FsUGVybWlzc2lvbnMuY2FuUHVibGlzaERhdGEgJiYgY29udHJvbHM/LmNoYXQ7XG4gIH1cblxuICBjb25zdCBzaG93SWNvbiA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gdmFyaWF0aW9uID09PSAnbWluaW1hbCcgfHwgdmFyaWF0aW9uID09PSAndmVyYm9zZScsXG4gICAgW3ZhcmlhdGlvbl0sXG4gICk7XG4gIGNvbnN0IHNob3dUZXh0ID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiB2YXJpYXRpb24gPT09ICd0ZXh0T25seScgfHwgdmFyaWF0aW9uID09PSAndmVyYm9zZScsXG4gICAgW3ZhcmlhdGlvbl0sXG4gICk7XG5cbiAgY29uc3QgYnJvd3NlclN1cHBvcnRzU2NyZWVuU2hhcmluZyA9IHN1cHBvcnRzU2NyZWVuU2hhcmluZygpO1xuXG4gIGNvbnN0IFtpc1NjcmVlblNoYXJlRW5hYmxlZCwgc2V0SXNTY3JlZW5TaGFyZUVuYWJsZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IG9uU2NyZWVuU2hhcmVDaGFuZ2UgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZW5hYmxlZDogYm9vbGVhbikgPT4ge1xuICAgICAgc2V0SXNTY3JlZW5TaGFyZUVuYWJsZWQoZW5hYmxlZCk7XG4gICAgfSxcbiAgICBbc2V0SXNTY3JlZW5TaGFyZUVuYWJsZWRdLFxuICApO1xuXG4gIGNvbnN0IGh0bWxQcm9wcyA9IG1lcmdlUHJvcHMoeyBjbGFzc05hbWU6ICdsay1jb250cm9sLWJhcicgfSwgcHJvcHMpO1xuXG4gIGNvbnN0IHtcbiAgICBzYXZlQXVkaW9JbnB1dEVuYWJsZWQsXG4gICAgc2F2ZVZpZGVvSW5wdXRFbmFibGVkLFxuICAgIHNhdmVBdWRpb0lucHV0RGV2aWNlSWQsXG4gICAgc2F2ZVZpZGVvSW5wdXREZXZpY2VJZCxcbiAgfSA9IHVzZVBlcnNpc3RlbnRVc2VyQ2hvaWNlcyh7IHByZXZlbnRTYXZlOiAhc2F2ZVVzZXJDaG9pY2VzIH0pO1xuXG4gIGNvbnN0IG1pY3JvcGhvbmVPbkNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChlbmFibGVkOiBib29sZWFuLCBpc1VzZXJJbml0aWF0ZWQ6IGJvb2xlYW4pID0+XG4gICAgICBpc1VzZXJJbml0aWF0ZWQgPyBzYXZlQXVkaW9JbnB1dEVuYWJsZWQoZW5hYmxlZCkgOiBudWxsLFxuICAgIFtzYXZlQXVkaW9JbnB1dEVuYWJsZWRdLFxuICApO1xuXG4gIGNvbnN0IGNhbWVyYU9uQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGVuYWJsZWQ6IGJvb2xlYW4sIGlzVXNlckluaXRpYXRlZDogYm9vbGVhbikgPT5cbiAgICAgIGlzVXNlckluaXRpYXRlZCA/IHNhdmVWaWRlb0lucHV0RW5hYmxlZChlbmFibGVkKSA6IG51bGwsXG4gICAgW3NhdmVWaWRlb0lucHV0RW5hYmxlZF0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHsuLi5odG1sUHJvcHN9PlxuICAgICAge3Zpc2libGVDb250cm9scy5taWNyb3Bob25lICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsay1idXR0b24tZ3JvdXBcIj5cbiAgICAgICAgICA8VHJhY2tUb2dnbGVcbiAgICAgICAgICAgIHNvdXJjZT17VHJhY2suU291cmNlLk1pY3JvcGhvbmV9XG4gICAgICAgICAgICBzaG93SWNvbj17c2hvd0ljb259XG4gICAgICAgICAgICBvbkNoYW5nZT17bWljcm9waG9uZU9uQ2hhbmdlfVxuICAgICAgICAgICAgb25EZXZpY2VFcnJvcj17KGVycm9yKSA9PiBvbkRldmljZUVycm9yPy4oeyBzb3VyY2U6IFRyYWNrLlNvdXJjZS5NaWNyb3Bob25lLCBlcnJvciB9KX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7c2hvd1RleHQgJiYgJ01pY3JvcGhvbmUnfVxuICAgICAgICAgIDwvVHJhY2tUb2dnbGU+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsay1idXR0b24tZ3JvdXAtbWVudVwiPlxuICAgICAgICAgICAgPE1lZGlhRGV2aWNlTWVudVxuICAgICAgICAgICAgICBraW5kPVwiYXVkaW9pbnB1dFwiXG4gICAgICAgICAgICAgIG9uQWN0aXZlRGV2aWNlQ2hhbmdlPXsoX2tpbmQsIGRldmljZUlkKSA9PlxuICAgICAgICAgICAgICAgIHNhdmVBdWRpb0lucHV0RGV2aWNlSWQoZGV2aWNlSWQgPz8gJ2RlZmF1bHQnKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7dmlzaWJsZUNvbnRyb2xzLmNhbWVyYSAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGstYnV0dG9uLWdyb3VwXCI+XG4gICAgICAgICAgPFRyYWNrVG9nZ2xlXG4gICAgICAgICAgICBzb3VyY2U9e1RyYWNrLlNvdXJjZS5DYW1lcmF9XG4gICAgICAgICAgICBzaG93SWNvbj17c2hvd0ljb259XG4gICAgICAgICAgICBvbkNoYW5nZT17Y2FtZXJhT25DaGFuZ2V9XG4gICAgICAgICAgICBvbkRldmljZUVycm9yPXsoZXJyb3IpID0+IG9uRGV2aWNlRXJyb3I/Lih7IHNvdXJjZTogVHJhY2suU291cmNlLkNhbWVyYSwgZXJyb3IgfSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Nob3dUZXh0ICYmICdDYW1lcmEnfVxuICAgICAgICAgIDwvVHJhY2tUb2dnbGU+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsay1idXR0b24tZ3JvdXAtbWVudVwiPlxuICAgICAgICAgICAgPE1lZGlhRGV2aWNlTWVudVxuICAgICAgICAgICAgICBraW5kPVwidmlkZW9pbnB1dFwiXG4gICAgICAgICAgICAgIG9uQWN0aXZlRGV2aWNlQ2hhbmdlPXsoX2tpbmQsIGRldmljZUlkKSA9PlxuICAgICAgICAgICAgICAgIHNhdmVWaWRlb0lucHV0RGV2aWNlSWQoZGV2aWNlSWQgPz8gJ2RlZmF1bHQnKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7dmlzaWJsZUNvbnRyb2xzLnNjcmVlblNoYXJlICYmIGJyb3dzZXJTdXBwb3J0c1NjcmVlblNoYXJpbmcgJiYgKFxuICAgICAgICA8VHJhY2tUb2dnbGVcbiAgICAgICAgICBzb3VyY2U9e1RyYWNrLlNvdXJjZS5TY3JlZW5TaGFyZX1cbiAgICAgICAgICBjYXB0dXJlT3B0aW9ucz17eyBhdWRpbzogdHJ1ZSwgc2VsZkJyb3dzZXJTdXJmYWNlOiAnaW5jbHVkZScgfX1cbiAgICAgICAgICBzaG93SWNvbj17c2hvd0ljb259XG4gICAgICAgICAgb25DaGFuZ2U9e29uU2NyZWVuU2hhcmVDaGFuZ2V9XG4gICAgICAgICAgb25EZXZpY2VFcnJvcj17KGVycm9yKSA9PiBvbkRldmljZUVycm9yPy4oeyBzb3VyY2U6IFRyYWNrLlNvdXJjZS5TY3JlZW5TaGFyZSwgZXJyb3IgfSl9XG4gICAgICAgID5cbiAgICAgICAgICB7c2hvd1RleHQgJiYgKGlzU2NyZWVuU2hhcmVFbmFibGVkID8gJ1N0b3Agc2NyZWVuIHNoYXJlJyA6ICdTaGFyZSBzY3JlZW4nKX1cbiAgICAgICAgPC9UcmFja1RvZ2dsZT5cbiAgICAgICl9XG4gICAgICB7dmlzaWJsZUNvbnRyb2xzLmNoYXQgJiYgKFxuICAgICAgICA8Q2hhdFRvZ2dsZT5cbiAgICAgICAgICB7c2hvd0ljb24gJiYgPENoYXRJY29uIC8+fVxuICAgICAgICAgIHtzaG93VGV4dCAmJiAnQ2hhdCd9XG4gICAgICAgIDwvQ2hhdFRvZ2dsZT5cbiAgICAgICl9XG4gICAgICB7dmlzaWJsZUNvbnRyb2xzLnNldHRpbmdzICYmIChcbiAgICAgICAgPFNldHRpbmdzTWVudVRvZ2dsZT5cbiAgICAgICAgICB7c2hvd0ljb24gJiYgPEdlYXJJY29uIC8+fVxuICAgICAgICAgIHtzaG93VGV4dCAmJiAnU2V0dGluZ3MnfVxuICAgICAgICA8L1NldHRpbmdzTWVudVRvZ2dsZT5cbiAgICAgICl9XG4gICAgICB7dmlzaWJsZUNvbnRyb2xzLmxlYXZlICYmIChcbiAgICAgICAgPERpc2Nvbm5lY3RCdXR0b24+XG4gICAgICAgICAge3Nob3dJY29uICYmIDxMZWF2ZUljb24gLz59XG4gICAgICAgICAge3Nob3dUZXh0ICYmICdMZWF2ZSd9XG4gICAgICAgIDwvRGlzY29ubmVjdEJ1dHRvbj5cbiAgICAgICl9XG4gICAgICA8U3RhcnRNZWRpYUJ1dHRvbiAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUge1xuICBNZXNzYWdlRGVjb2RlcixcbiAgTWVzc2FnZUVuY29kZXIsXG4gIFRyYWNrUmVmZXJlbmNlT3JQbGFjZWhvbGRlcixcbiAgV2lkZ2V0U3RhdGUsXG59IGZyb20gJ0BsaXZla2l0L2NvbXBvbmVudHMtY29yZSc7XG5pbXBvcnQgeyBpc0VxdWFsVHJhY2tSZWYsIGlzVHJhY2tSZWZlcmVuY2UsIGlzV2ViLCBsb2cgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHsgUm9vbUV2ZW50LCBUcmFjayB9IGZyb20gJ2xpdmVraXQtY2xpZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTWVzc2FnZUZvcm1hdHRlciB9IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgQ2Fyb3VzZWxMYXlvdXQsXG4gIENvbm5lY3Rpb25TdGF0ZVRvYXN0LFxuICBGb2N1c0xheW91dCxcbiAgRm9jdXNMYXlvdXRDb250YWluZXIsXG4gIEdyaWRMYXlvdXQsXG4gIExheW91dENvbnRleHRQcm92aWRlcixcbiAgUGFydGljaXBhbnRUaWxlLFxuICBSb29tQXVkaW9SZW5kZXJlcixcbn0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5pbXBvcnQgeyB1c2VDcmVhdGVMYXlvdXRDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyB1c2VQaW5uZWRUcmFja3MsIHVzZVRyYWNrcyB9IGZyb20gJy4uL2hvb2tzJztcbmltcG9ydCB7IENoYXQgfSBmcm9tICcuL0NoYXQnO1xuaW1wb3J0IHsgQ29udHJvbEJhciB9IGZyb20gJy4vQ29udHJvbEJhcic7XG5pbXBvcnQgeyB1c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzIH0gZnJvbSAnLi4vaG9va3MvdXNlV2FybkFib3V0TWlzc2luZ1N0eWxlcyc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFZpZGVvQ29uZmVyZW5jZVByb3BzIGV4dGVuZHMgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+IHtcbiAgY2hhdE1lc3NhZ2VGb3JtYXR0ZXI/OiBNZXNzYWdlRm9ybWF0dGVyO1xuICBjaGF0TWVzc2FnZUVuY29kZXI/OiBNZXNzYWdlRW5jb2RlcjtcbiAgY2hhdE1lc3NhZ2VEZWNvZGVyPzogTWVzc2FnZURlY29kZXI7XG4gIC8qKiBAYWxwaGEgKi9cbiAgU2V0dGluZ3NDb21wb25lbnQ/OiBSZWFjdC5Db21wb25lbnRUeXBlO1xufVxuXG4vKipcbiAqIFRoZSBgVmlkZW9Db25mZXJlbmNlYCByZWFkeS1tYWRlIGNvbXBvbmVudCBpcyB5b3VyIGRyb3AtaW4gc29sdXRpb24gZm9yIGEgY2xhc3NpYyB2aWRlbyBjb25mZXJlbmNpbmcgYXBwbGljYXRpb24uXG4gKiBJdCBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IHN1Y2ggYXMgZm9jdXNpbmcgb24gb25lIHBhcnRpY2lwYW50LCBncmlkIHZpZXcgd2l0aCBwYWdpbmF0aW9uIHRvIGhhbmRsZSBsYXJnZSBudW1iZXJzXG4gKiBvZiBwYXJ0aWNpcGFudHMsIGJhc2ljIG5vbi1wZXJzaXN0ZW50IGNoYXQsIHNjcmVlbiBzaGFyaW5nLCBhbmQgbW9yZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhlIGNvbXBvbmVudCBpcyBpbXBsZW1lbnRlZCB3aXRoIG90aGVyIExpdmVLaXQgY29tcG9uZW50cyBsaWtlIGBGb2N1c0NvbnRleHRQcm92aWRlcmAsXG4gKiBgR3JpZExheW91dGAsIGBDb250cm9sQmFyYCwgYEZvY3VzTGF5b3V0Q29udGFpbmVyYCBhbmQgYEZvY3VzTGF5b3V0YC5cbiAqIFlvdSBjYW4gdXNlIHRoZXNlIGNvbXBvbmVudHMgYXMgYSBzdGFydGluZyBwb2ludCBmb3IgeW91ciBvd24gY3VzdG9tIHZpZGVvIGNvbmZlcmVuY2luZyBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiA8TGl2ZUtpdFJvb20+XG4gKiAgIDxWaWRlb0NvbmZlcmVuY2UgLz5cbiAqIDxMaXZlS2l0Um9vbT5cbiAqIGBgYFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gVmlkZW9Db25mZXJlbmNlKHtcbiAgY2hhdE1lc3NhZ2VGb3JtYXR0ZXIsXG4gIGNoYXRNZXNzYWdlRGVjb2RlcixcbiAgY2hhdE1lc3NhZ2VFbmNvZGVyLFxuICBTZXR0aW5nc0NvbXBvbmVudCxcbiAgLi4ucHJvcHNcbn06IFZpZGVvQ29uZmVyZW5jZVByb3BzKSB7XG4gIGNvbnN0IFt3aWRnZXRTdGF0ZSwgc2V0V2lkZ2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGU8V2lkZ2V0U3RhdGU+KHtcbiAgICBzaG93Q2hhdDogZmFsc2UsXG4gICAgdW5yZWFkTWVzc2FnZXM6IDAsXG4gICAgc2hvd1NldHRpbmdzOiBmYWxzZSxcbiAgfSk7XG4gIGNvbnN0IGxhc3RBdXRvRm9jdXNlZFNjcmVlblNoYXJlVHJhY2sgPSBSZWFjdC51c2VSZWY8VHJhY2tSZWZlcmVuY2VPclBsYWNlaG9sZGVyIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgdHJhY2tzID0gdXNlVHJhY2tzKFxuICAgIFtcbiAgICAgIHsgc291cmNlOiBUcmFjay5Tb3VyY2UuQ2FtZXJhLCB3aXRoUGxhY2Vob2xkZXI6IHRydWUgfSxcbiAgICAgIHsgc291cmNlOiBUcmFjay5Tb3VyY2UuU2NyZWVuU2hhcmUsIHdpdGhQbGFjZWhvbGRlcjogZmFsc2UgfSxcbiAgICBdLFxuICAgIHsgdXBkYXRlT25seU9uOiBbUm9vbUV2ZW50LkFjdGl2ZVNwZWFrZXJzQ2hhbmdlZF0sIG9ubHlTdWJzY3JpYmVkOiBmYWxzZSB9LFxuICApO1xuXG4gIGNvbnN0IHdpZGdldFVwZGF0ZSA9IChzdGF0ZTogV2lkZ2V0U3RhdGUpID0+IHtcbiAgICBsb2cuZGVidWcoJ3VwZGF0aW5nIHdpZGdldCBzdGF0ZScsIHN0YXRlKTtcbiAgICBzZXRXaWRnZXRTdGF0ZShzdGF0ZSk7XG4gIH07XG5cbiAgY29uc3QgbGF5b3V0Q29udGV4dCA9IHVzZUNyZWF0ZUxheW91dENvbnRleHQoKTtcblxuICBjb25zdCBzY3JlZW5TaGFyZVRyYWNrcyA9IHRyYWNrc1xuICAgIC5maWx0ZXIoaXNUcmFja1JlZmVyZW5jZSlcbiAgICAuZmlsdGVyKCh0cmFjaykgPT4gdHJhY2sucHVibGljYXRpb24uc291cmNlID09PSBUcmFjay5Tb3VyY2UuU2NyZWVuU2hhcmUpO1xuXG4gIGNvbnN0IGZvY3VzVHJhY2sgPSB1c2VQaW5uZWRUcmFja3MobGF5b3V0Q29udGV4dCk/LlswXTtcbiAgY29uc3QgY2Fyb3VzZWxUcmFja3MgPSB0cmFja3MuZmlsdGVyKCh0cmFjaykgPT4gIWlzRXF1YWxUcmFja1JlZih0cmFjaywgZm9jdXNUcmFjaykpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSWYgc2NyZWVuIHNoYXJlIHRyYWNrcyBhcmUgcHVibGlzaGVkLCBhbmQgbm8gcGluIGlzIHNldCBleHBsaWNpdGx5LCBhdXRvIHNldCB0aGUgc2NyZWVuIHNoYXJlLlxuICAgIGlmIChcbiAgICAgIHNjcmVlblNoYXJlVHJhY2tzLnNvbWUoKHRyYWNrKSA9PiB0cmFjay5wdWJsaWNhdGlvbi5pc1N1YnNjcmliZWQpICYmXG4gICAgICBsYXN0QXV0b0ZvY3VzZWRTY3JlZW5TaGFyZVRyYWNrLmN1cnJlbnQgPT09IG51bGxcbiAgICApIHtcbiAgICAgIGxvZy5kZWJ1ZygnQXV0byBzZXQgc2NyZWVuIHNoYXJlIGZvY3VzOicsIHsgbmV3U2NyZWVuU2hhcmVUcmFjazogc2NyZWVuU2hhcmVUcmFja3NbMF0gfSk7XG4gICAgICBsYXlvdXRDb250ZXh0LnBpbi5kaXNwYXRjaD8uKHsgbXNnOiAnc2V0X3BpbicsIHRyYWNrUmVmZXJlbmNlOiBzY3JlZW5TaGFyZVRyYWNrc1swXSB9KTtcbiAgICAgIGxhc3RBdXRvRm9jdXNlZFNjcmVlblNoYXJlVHJhY2suY3VycmVudCA9IHNjcmVlblNoYXJlVHJhY2tzWzBdO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBsYXN0QXV0b0ZvY3VzZWRTY3JlZW5TaGFyZVRyYWNrLmN1cnJlbnQgJiZcbiAgICAgICFzY3JlZW5TaGFyZVRyYWNrcy5zb21lKFxuICAgICAgICAodHJhY2spID0+XG4gICAgICAgICAgdHJhY2sucHVibGljYXRpb24udHJhY2tTaWQgPT09XG4gICAgICAgICAgbGFzdEF1dG9Gb2N1c2VkU2NyZWVuU2hhcmVUcmFjay5jdXJyZW50Py5wdWJsaWNhdGlvbj8udHJhY2tTaWQsXG4gICAgICApXG4gICAgKSB7XG4gICAgICBsb2cuZGVidWcoJ0F1dG8gY2xlYXJpbmcgc2NyZWVuIHNoYXJlIGZvY3VzLicpO1xuICAgICAgbGF5b3V0Q29udGV4dC5waW4uZGlzcGF0Y2g/Lih7IG1zZzogJ2NsZWFyX3BpbicgfSk7XG4gICAgICBsYXN0QXV0b0ZvY3VzZWRTY3JlZW5TaGFyZVRyYWNrLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZm9jdXNUcmFjayAmJiAhaXNUcmFja1JlZmVyZW5jZShmb2N1c1RyYWNrKSkge1xuICAgICAgY29uc3QgdXBkYXRlZEZvY3VzVHJhY2sgPSB0cmFja3MuZmluZChcbiAgICAgICAgKHRyKSA9PlxuICAgICAgICAgIHRyLnBhcnRpY2lwYW50LmlkZW50aXR5ID09PSBmb2N1c1RyYWNrLnBhcnRpY2lwYW50LmlkZW50aXR5ICYmXG4gICAgICAgICAgdHIuc291cmNlID09PSBmb2N1c1RyYWNrLnNvdXJjZSxcbiAgICAgICk7XG4gICAgICBpZiAodXBkYXRlZEZvY3VzVHJhY2sgIT09IGZvY3VzVHJhY2sgJiYgaXNUcmFja1JlZmVyZW5jZSh1cGRhdGVkRm9jdXNUcmFjaykpIHtcbiAgICAgICAgbGF5b3V0Q29udGV4dC5waW4uZGlzcGF0Y2g/Lih7IG1zZzogJ3NldF9waW4nLCB0cmFja1JlZmVyZW5jZTogdXBkYXRlZEZvY3VzVHJhY2sgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXG4gICAgc2NyZWVuU2hhcmVUcmFja3NcbiAgICAgIC5tYXAoKHJlZikgPT4gYCR7cmVmLnB1YmxpY2F0aW9uLnRyYWNrU2lkfV8ke3JlZi5wdWJsaWNhdGlvbi5pc1N1YnNjcmliZWR9YClcbiAgICAgIC5qb2luKCksXG4gICAgZm9jdXNUcmFjaz8ucHVibGljYXRpb24/LnRyYWNrU2lkLFxuICAgIHRyYWNrcyxcbiAgXSk7XG5cbiAgdXNlV2FybkFib3V0TWlzc2luZ1N0eWxlcygpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJsay12aWRlby1jb25mZXJlbmNlXCIgey4uLnByb3BzfT5cbiAgICAgIHtpc1dlYigpICYmIChcbiAgICAgICAgPExheW91dENvbnRleHRQcm92aWRlclxuICAgICAgICAgIHZhbHVlPXtsYXlvdXRDb250ZXh0fVxuICAgICAgICAgIC8vIG9uUGluQ2hhbmdlPXtoYW5kbGVGb2N1c1N0YXRlQ2hhbmdlfVxuICAgICAgICAgIG9uV2lkZ2V0Q2hhbmdlPXt3aWRnZXRVcGRhdGV9XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxrLXZpZGVvLWNvbmZlcmVuY2UtaW5uZXJcIj5cbiAgICAgICAgICAgIHshZm9jdXNUcmFjayA/IChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsay1ncmlkLWxheW91dC13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgPEdyaWRMYXlvdXQgdHJhY2tzPXt0cmFja3N9PlxuICAgICAgICAgICAgICAgICAgPFBhcnRpY2lwYW50VGlsZSAvPlxuICAgICAgICAgICAgICAgIDwvR3JpZExheW91dD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxrLWZvY3VzLWxheW91dC13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgPEZvY3VzTGF5b3V0Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgPENhcm91c2VsTGF5b3V0IHRyYWNrcz17Y2Fyb3VzZWxUcmFja3N9PlxuICAgICAgICAgICAgICAgICAgICA8UGFydGljaXBhbnRUaWxlIC8+XG4gICAgICAgICAgICAgICAgICA8L0Nhcm91c2VsTGF5b3V0PlxuICAgICAgICAgICAgICAgICAge2ZvY3VzVHJhY2sgJiYgPEZvY3VzTGF5b3V0IHRyYWNrUmVmPXtmb2N1c1RyYWNrfSAvPn1cbiAgICAgICAgICAgICAgICA8L0ZvY3VzTGF5b3V0Q29udGFpbmVyPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29udHJvbEJhciBjb250cm9scz17eyBjaGF0OiB0cnVlLCBzZXR0aW5nczogISFTZXR0aW5nc0NvbXBvbmVudCB9fSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxDaGF0XG4gICAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiB3aWRnZXRTdGF0ZS5zaG93Q2hhdCA/ICdncmlkJyA6ICdub25lJyB9fVxuICAgICAgICAgICAgbWVzc2FnZUZvcm1hdHRlcj17Y2hhdE1lc3NhZ2VGb3JtYXR0ZXJ9XG4gICAgICAgICAgICBtZXNzYWdlRW5jb2Rlcj17Y2hhdE1lc3NhZ2VFbmNvZGVyfVxuICAgICAgICAgICAgbWVzc2FnZURlY29kZXI9e2NoYXRNZXNzYWdlRGVjb2Rlcn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtTZXR0aW5nc0NvbXBvbmVudCAmJiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImxrLXNldHRpbmdzLW1lbnUtbW9kYWxcIlxuICAgICAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiB3aWRnZXRTdGF0ZS5zaG93U2V0dGluZ3MgPyAnYmxvY2snIDogJ25vbmUnIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTZXR0aW5nc0NvbXBvbmVudCAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9MYXlvdXRDb250ZXh0UHJvdmlkZXI+XG4gICAgICApfVxuICAgICAgPFJvb21BdWRpb1JlbmRlcmVyIC8+XG4gICAgICA8Q29ubmVjdGlvblN0YXRlVG9hc3QgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbnRyb2xCYXIgfSBmcm9tICcuL0NvbnRyb2xCYXInO1xuXG5pbXBvcnQgeyBQYXJ0aWNpcGFudEF1ZGlvVGlsZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvcGFydGljaXBhbnQvUGFydGljaXBhbnRBdWRpb1RpbGUnO1xuaW1wb3J0IHsgTGF5b3V0Q29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9sYXlvdXQvTGF5b3V0Q29udGV4dFByb3ZpZGVyJztcbmltcG9ydCB0eXBlIHsgV2lkZ2V0U3RhdGUgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHsgQ2hhdCB9IGZyb20gJy4vQ2hhdCc7XG5pbXBvcnQgeyBUcmFja0xvb3AgfSBmcm9tICcuLi9jb21wb25lbnRzJztcbmltcG9ydCB7IHVzZVRyYWNrcyB9IGZyb20gJy4uL2hvb2tzJztcbmltcG9ydCB7IHVzZVdhcm5BYm91dE1pc3NpbmdTdHlsZXMgfSBmcm9tICcuLi9ob29rcy91c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzJztcbmltcG9ydCB7IFRyYWNrIH0gZnJvbSAnbGl2ZWtpdC1jbGllbnQnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBBdWRpb0NvbmZlcmVuY2VQcm9wcyBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiB7fVxuXG4vKipcbiAqIFRoaXMgY29tcG9uZW50IGlzIHRoZSBkZWZhdWx0IHNldHVwIG9mIGEgY2xhc3NpYyBMaXZlS2l0IGF1ZGlvIGNvbmZlcmVuY2luZyBhcHAuXG4gKiBJdCBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IGxpa2Ugc3dpdGNoaW5nIGJldHdlZW4gcGFydGljaXBhbnQgZ3JpZCB2aWV3IGFuZCBmb2N1cyB2aWV3LlxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGUgY29tcG9uZW50IGlzIGltcGxlbWVudGVkIHdpdGggb3RoZXIgTGl2ZUtpdCBjb21wb25lbnRzIGxpa2UgYEZvY3VzQ29udGV4dFByb3ZpZGVyYCxcbiAqIGBHcmlkTGF5b3V0YCwgYENvbnRyb2xCYXJgLCBgRm9jdXNMYXlvdXRDb250YWluZXJgIGFuZCBgRm9jdXNMYXlvdXRgLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIDxMaXZlS2l0Um9vbT5cbiAqICAgPEF1ZGlvQ29uZmVyZW5jZSAvPlxuICogPExpdmVLaXRSb29tPlxuICogYGBgXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBdWRpb0NvbmZlcmVuY2UoeyAuLi5wcm9wcyB9OiBBdWRpb0NvbmZlcmVuY2VQcm9wcykge1xuICBjb25zdCBbd2lkZ2V0U3RhdGUsIHNldFdpZGdldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlPFdpZGdldFN0YXRlPih7XG4gICAgc2hvd0NoYXQ6IGZhbHNlLFxuICAgIHVucmVhZE1lc3NhZ2VzOiAwLFxuICB9KTtcblxuICBjb25zdCBhdWRpb1RyYWNrcyA9IHVzZVRyYWNrcyhbVHJhY2suU291cmNlLk1pY3JvcGhvbmVdKTtcblxuICB1c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0Q29udGV4dFByb3ZpZGVyIG9uV2lkZ2V0Q2hhbmdlPXtzZXRXaWRnZXRTdGF0ZX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImxrLWF1ZGlvLWNvbmZlcmVuY2VcIiB7Li4ucHJvcHN9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxrLWF1ZGlvLWNvbmZlcmVuY2Utc3RhZ2VcIj5cbiAgICAgICAgICA8VHJhY2tMb29wIHRyYWNrcz17YXVkaW9UcmFja3N9PlxuICAgICAgICAgICAgPFBhcnRpY2lwYW50QXVkaW9UaWxlIC8+XG4gICAgICAgICAgPC9UcmFja0xvb3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Q29udHJvbEJhclxuICAgICAgICAgIGNvbnRyb2xzPXt7IG1pY3JvcGhvbmU6IHRydWUsIHNjcmVlblNoYXJlOiBmYWxzZSwgY2FtZXJhOiBmYWxzZSwgY2hhdDogdHJ1ZSB9fVxuICAgICAgICAvPlxuICAgICAgICB7d2lkZ2V0U3RhdGUuc2hvd0NoYXQgJiYgPENoYXQgLz59XG4gICAgICA8L2Rpdj5cbiAgICA8L0xheW91dENvbnRleHRQcm92aWRlcj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IFRyYWNrIH0gZnJvbSAnbGl2ZWtpdC1jbGllbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTWVkaWFEZXZpY2VNZW51IH0gZnJvbSAnLi9NZWRpYURldmljZU1lbnUnO1xuaW1wb3J0IHsgVHJhY2tUb2dnbGUgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRyb2xzL1RyYWNrVG9nZ2xlJztcbmltcG9ydCB7XG4gIHVzZUxvY2FsUGFydGljaXBhbnQsXG4gIHVzZUxvY2FsUGFydGljaXBhbnRQZXJtaXNzaW9ucyxcbiAgdXNlUGVyc2lzdGVudFVzZXJDaG9pY2VzLFxufSBmcm9tICcuLi9ob29rcyc7XG5pbXBvcnQgeyBtZXJnZVByb3BzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgU3RhcnRNZWRpYUJ1dHRvbiB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29udHJvbHMvU3RhcnRNZWRpYUJ1dHRvbic7XG5pbXBvcnQgeyBCYXJWaXN1YWxpemVyLCBEaXNjb25uZWN0QnV0dG9uIH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5pbXBvcnQgdHlwZSB7IFRyYWNrUmVmZXJlbmNlT3JQbGFjZWhvbGRlciB9IGZyb20gJ0BsaXZla2l0L2NvbXBvbmVudHMtY29yZSc7XG5cbi8qKiBAYmV0YSAqL1xuZXhwb3J0IHR5cGUgVm9pY2VBc3Npc3RhbnRDb250cm9sQmFyQ29udHJvbHMgPSB7XG4gIG1pY3JvcGhvbmU/OiBib29sZWFuO1xuICBsZWF2ZT86IGJvb2xlYW47XG59O1xuXG4vKiogQGJldGEgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVm9pY2VBc3Npc3RhbnRDb250cm9sQmFyUHJvcHMgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4ge1xuICBvbkRldmljZUVycm9yPzogKGVycm9yOiB7IHNvdXJjZTogVHJhY2suU291cmNlOyBlcnJvcjogRXJyb3IgfSkgPT4gdm9pZDtcbiAgY29udHJvbHM/OiBWb2ljZUFzc2lzdGFudENvbnRyb2xCYXJDb250cm9scztcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHVzZXIncyBkZXZpY2UgY2hvaWNlcyB3aWxsIGJlIHBlcnNpc3RlZC5cbiAgICogVGhpcyB3aWxsIGVuYWJsZXMgdGhlIHVzZXIgdG8gaGF2ZSB0aGUgc2FtZSBkZXZpY2UgY2hvaWNlcyB3aGVuIHRoZXkgcmVqb2luIHRoZSByb29tLlxuICAgKiBAZGVmYXVsdFZhbHVlIHRydWVcbiAgICovXG4gIHNhdmVVc2VyQ2hvaWNlcz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogPExpdmVLaXRSb29tIC4uLiA+XG4gKiAgIDxWb2ljZUFzc2lzdGFudENvbnRyb2xCYXIgLz5cbiAqIDwvTGl2ZUtpdFJvb20+XG4gKiBgYGBcbiAqIEBiZXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWb2ljZUFzc2lzdGFudENvbnRyb2xCYXIoe1xuICBjb250cm9scyxcbiAgc2F2ZVVzZXJDaG9pY2VzID0gdHJ1ZSxcbiAgb25EZXZpY2VFcnJvcixcbiAgLi4ucHJvcHNcbn06IFZvaWNlQXNzaXN0YW50Q29udHJvbEJhclByb3BzKSB7XG4gIGNvbnN0IHZpc2libGVDb250cm9scyA9IHsgbGVhdmU6IHRydWUsIG1pY3JvcGhvbmU6IHRydWUsIC4uLmNvbnRyb2xzIH07XG5cbiAgY29uc3QgbG9jYWxQZXJtaXNzaW9ucyA9IHVzZUxvY2FsUGFydGljaXBhbnRQZXJtaXNzaW9ucygpO1xuICBjb25zdCB7IG1pY3JvcGhvbmVUcmFjaywgbG9jYWxQYXJ0aWNpcGFudCB9ID0gdXNlTG9jYWxQYXJ0aWNpcGFudCgpO1xuXG4gIGNvbnN0IG1pY1RyYWNrUmVmOiBUcmFja1JlZmVyZW5jZU9yUGxhY2Vob2xkZXIgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFydGljaXBhbnQ6IGxvY2FsUGFydGljaXBhbnQsXG4gICAgICBzb3VyY2U6IFRyYWNrLlNvdXJjZS5NaWNyb3Bob25lLFxuICAgICAgcHVibGljYXRpb246IG1pY3JvcGhvbmVUcmFjayxcbiAgICB9O1xuICB9LCBbbG9jYWxQYXJ0aWNpcGFudCwgbWljcm9waG9uZVRyYWNrXSk7XG5cbiAgaWYgKCFsb2NhbFBlcm1pc3Npb25zKSB7XG4gICAgdmlzaWJsZUNvbnRyb2xzLm1pY3JvcGhvbmUgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB2aXNpYmxlQ29udHJvbHMubWljcm9waG9uZSA/Pz0gbG9jYWxQZXJtaXNzaW9ucy5jYW5QdWJsaXNoO1xuICB9XG5cbiAgY29uc3QgaHRtbFByb3BzID0gbWVyZ2VQcm9wcyh7IGNsYXNzTmFtZTogJ2xrLWFnZW50LWNvbnRyb2wtYmFyJyB9LCBwcm9wcyk7XG5cbiAgY29uc3QgeyBzYXZlQXVkaW9JbnB1dEVuYWJsZWQsIHNhdmVBdWRpb0lucHV0RGV2aWNlSWQgfSA9IHVzZVBlcnNpc3RlbnRVc2VyQ2hvaWNlcyh7XG4gICAgcHJldmVudFNhdmU6ICFzYXZlVXNlckNob2ljZXMsXG4gIH0pO1xuXG4gIGNvbnN0IG1pY3JvcGhvbmVPbkNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChlbmFibGVkOiBib29sZWFuLCBpc1VzZXJJbml0aWF0ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgIGlmIChpc1VzZXJJbml0aWF0ZWQpIHtcbiAgICAgICAgc2F2ZUF1ZGlvSW5wdXRFbmFibGVkKGVuYWJsZWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3NhdmVBdWRpb0lucHV0RW5hYmxlZF0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHsuLi5odG1sUHJvcHN9PlxuICAgICAge3Zpc2libGVDb250cm9scy5taWNyb3Bob25lICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsay1idXR0b24tZ3JvdXBcIj5cbiAgICAgICAgICA8VHJhY2tUb2dnbGVcbiAgICAgICAgICAgIHNvdXJjZT17VHJhY2suU291cmNlLk1pY3JvcGhvbmV9XG4gICAgICAgICAgICBzaG93SWNvbj17dHJ1ZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXttaWNyb3Bob25lT25DaGFuZ2V9XG4gICAgICAgICAgICBvbkRldmljZUVycm9yPXsoZXJyb3IpID0+IG9uRGV2aWNlRXJyb3I/Lih7IHNvdXJjZTogVHJhY2suU291cmNlLk1pY3JvcGhvbmUsIGVycm9yIH0pfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxCYXJWaXN1YWxpemVyIHRyYWNrUmVmPXttaWNUcmFja1JlZn0gYmFyQ291bnQ9ezd9IG9wdGlvbnM9e3sgbWluSGVpZ2h0OiA1IH19IC8+XG4gICAgICAgICAgPC9UcmFja1RvZ2dsZT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxrLWJ1dHRvbi1ncm91cC1tZW51XCI+XG4gICAgICAgICAgICA8TWVkaWFEZXZpY2VNZW51XG4gICAgICAgICAgICAgIGtpbmQ9XCJhdWRpb2lucHV0XCJcbiAgICAgICAgICAgICAgb25BY3RpdmVEZXZpY2VDaGFuZ2U9eyhfa2luZCwgZGV2aWNlSWQpID0+XG4gICAgICAgICAgICAgICAgc2F2ZUF1ZGlvSW5wdXREZXZpY2VJZChkZXZpY2VJZCA/PyAnZGVmYXVsdCcpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAge3Zpc2libGVDb250cm9scy5sZWF2ZSAmJiA8RGlzY29ubmVjdEJ1dHRvbj57J0Rpc2Nvbm5lY3QnfTwvRGlzY29ubmVjdEJ1dHRvbj59XG4gICAgICA8U3RhcnRNZWRpYUJ1dHRvbiAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbIkNoYXQiLCJtZXNzYWdlRm9ybWF0dGVyIiwibWVzc2FnZURlY29kZXIiLCJtZXNzYWdlRW5jb2RlciIsImNoYW5uZWxUb3BpYyIsInByb3BzIiwidWxSZWYiLCJSZWFjdCIsInVzZVJlZiIsImlucHV0UmVmIiwiY2hhdE9wdGlvbnMiLCJ1c2VNZW1vIiwiY2hhdE1lc3NhZ2VzIiwic2VuZCIsImlzU2VuZGluZyIsInVzZUNoYXQiLCJsYXlvdXRDb250ZXh0IiwidXNlTWF5YmVMYXlvdXRDb250ZXh0IiwibGFzdFJlYWRNc2dBdCIsImhhbmRsZVN1Ym1pdCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50IiwidmFsdWUiLCJ0cmltIiwiZm9jdXMiLCJ1c2VFZmZlY3QiLCJfYSIsInNjcm9sbFRvIiwidG9wIiwic2Nyb2xsSGVpZ2h0IiwibGVuZ3RoIiwid2lkZ2V0Iiwic3RhdGUiLCJzaG93Q2hhdCIsIl9iIiwidGltZXN0YW1wIiwiX2MiLCJ1bnJlYWRNZXNzYWdlQ291bnQiLCJmaWx0ZXIiLCJtc2ciLCJfZCIsInVucmVhZE1lc3NhZ2VzIiwiX2UiLCJkaXNwYXRjaCIsImNhbGwiLCJjb3VudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJDaGF0VG9nZ2xlIiwiQ2hhdENsb3NlSWNvbiIsInJlZiIsImNoaWxkcmVuIiwibWFwIiwiaWR4IiwiY2xvbmVTaW5nbGVDaGlsZCIsImVudHJ5Iiwia2V5IiwiaWQiLCJhbGxNc2ciLCJoaWRlTmFtZSIsImZyb20iLCJoaWRlVGltZXN0YW1wIiwiQ2hhdEVudHJ5Iiwib25TdWJtaXQiLCJkaXNhYmxlZCIsInR5cGUiLCJwbGFjZWhvbGRlciIsIm9uSW5wdXQiLCJldiIsInN0b3BQcm9wYWdhdGlvbiIsIm9uS2V5RG93biIsIm9uS2V5VXAiLCJNZWRpYURldmljZU1lbnUiLCJraW5kIiwiaW5pdGlhbFNlbGVjdGlvbiIsIm9uQWN0aXZlRGV2aWNlQ2hhbmdlIiwidHJhY2tzIiwicmVxdWVzdFBlcm1pc3Npb25zIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwidXNlU3RhdGUiLCJkZXZpY2VzIiwic2V0RGV2aWNlcyIsInVwZGF0ZVJlcXVpcmVkIiwic2V0VXBkYXRlUmVxdWlyZWQiLCJuZWVkUGVybWlzc2lvbnMiLCJzZXROZWVkUGVybWlzc2lvbnMiLCJoYW5kbGVBY3RpdmVEZXZpY2VDaGFuZ2UiLCJkZXZpY2VJZCIsImxvZyIsImRlYnVnIiwiYnV0dG9uIiwidG9vbHRpcCIsInVzZUxheW91dEVmZmVjdCIsImNsZWFudXAiLCJjb21wdXRlTWVudVBvc2l0aW9uIiwieCIsInkiLCJPYmplY3QiLCJhc3NpZ24iLCJzdHlsZSIsImxlZnQiLCJoYW5kbGVDbGlja091dHNpZGUiLCJ1c2VDYWxsYmFjayIsInRhcmdldCIsIndhc0NsaWNrT3V0c2lkZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJGcmFnbWVudCIsIm9uQ2xpY2siLCJ2aXNpYmlsaXR5IiwiTWVkaWFEZXZpY2VTZWxlY3QiLCJvbkRldmljZUxpc3RDaGFuZ2UiLCJ0cmFjayIsImF1ZGlvaW5wdXQiLCJ2aWRlb2lucHV0IiwidXNlV2FybkFib3V0TWlzc2luZ1N0eWxlcyIsIndhcm5BYm91dE1pc3NpbmdTdHlsZXMiLCJ1c2VQcmV2aWV3VHJhY2tzIiwib3B0aW9ucyIsIm9uRXJyb3IiLCJzZXRUcmFja3MiLCJ0cmFja0xvY2siLCJNdXRleCIsIm5lZWRzQ2xlYW51cCIsImxvY2FsVHJhY2tzIiwibG9jayIsInRoZW4iLCJ1bmxvY2siLCJhdWRpbyIsInZpZGVvIiwiY3JlYXRlTG9jYWxUcmFja3MiLCJmb3JFYWNoIiwidHIiLCJzdG9wIiwiZSIsIkVycm9yIiwiZXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwicm9vbU9wdGlvbnNTdHJpbmdpZnlSZXBsYWNlciIsInVzZVByZXZpZXdEZXZpY2UiLCJlbmFibGVkIiwiZGV2aWNlRXJyb3IiLCJzZXREZXZpY2VFcnJvciIsImlzQ3JlYXRpbmdUcmFjayIsInNldElzQ3JlYXRpbmdUcmFjayIsInVzZU1lZGlhRGV2aWNlcyIsInNlbGVjdGVkRGV2aWNlIiwic2V0U2VsZWN0ZWREZXZpY2UiLCJsb2NhbFRyYWNrIiwic2V0TG9jYWxUcmFjayIsImxvY2FsRGV2aWNlSWQiLCJzZXRMb2NhbERldmljZUlkIiwiY3JlYXRlVHJhY2siLCJjcmVhdGVMb2NhbFZpZGVvVHJhY2siLCJyZXNvbHV0aW9uIiwiVmlkZW9QcmVzZXRzIiwiaDcyMCIsImNyZWF0ZUxvY2FsQXVkaW9UcmFjayIsIm5ld0RldmljZUlkIiwiZ2V0RGV2aWNlSWQiLCJwcmV2RGV2aWNlSWQiLCJzd2l0Y2hEZXZpY2UiLCJzZXREZXZpY2VJZCIsImZpbmFsbHkiLCJ1bm11dGUiLCJtdXRlIiwibWVkaWFTdHJlYW1UcmFjayIsImZpbmQiLCJkZXYiLCJQcmVKb2luIiwiZGVmYXVsdHMiLCJvblZhbGlkYXRlIiwiam9pbkxhYmVsIiwibWljTGFiZWwiLCJjYW1MYWJlbCIsInVzZXJMYWJlbCIsInBlcnNpc3RVc2VyQ2hvaWNlcyIsInZpZGVvUHJvY2Vzc29yIiwiaHRtbFByb3BzIiwidXNlckNob2ljZXMiLCJpbml0aWFsVXNlckNob2ljZXMiLCJzYXZlQXVkaW9JbnB1dERldmljZUlkIiwic2F2ZUF1ZGlvSW5wdXRFbmFibGVkIiwic2F2ZVZpZGVvSW5wdXREZXZpY2VJZCIsInNhdmVWaWRlb0lucHV0RW5hYmxlZCIsInNhdmVVc2VybmFtZSIsInVzZVBlcnNpc3RlbnRVc2VyQ2hvaWNlcyIsInByZXZlbnRTYXZlIiwicHJldmVudExvYWQiLCJzZXRVc2VyQ2hvaWNlcyIsImF1ZGlvRW5hYmxlZCIsInNldEF1ZGlvRW5hYmxlZCIsInZpZGVvRW5hYmxlZCIsInNldFZpZGVvRW5hYmxlZCIsImF1ZGlvRGV2aWNlSWQiLCJzZXRBdWRpb0RldmljZUlkIiwidmlkZW9EZXZpY2VJZCIsInNldFZpZGVvRGV2aWNlSWQiLCJ1c2VybmFtZSIsInNldFVzZXJuYW1lIiwicHJvY2Vzc29yIiwidmlkZW9FbCIsInZpZGVvVHJhY2siLCJUcmFjayIsIktpbmQiLCJWaWRlbyIsImZhY2luZ01vZGUiLCJmYWNpbmdNb2RlRnJvbUxvY2FsVHJhY2siLCJhdWRpb1RyYWNrIiwiQXVkaW8iLCJhdHRhY2giLCJkZXRhY2giLCJpc1ZhbGlkIiwic2V0SXNWYWxpZCIsImhhbmRsZVZhbGlkYXRpb24iLCJ2YWx1ZXMiLCJuZXdVc2VyQ2hvaWNlcyIsIndhcm4iLCJ3aWR0aCIsImhlaWdodCIsIlBhcnRpY2lwYW50UGxhY2Vob2xkZXIiLCJUcmFja1RvZ2dsZSIsImluaXRpYWxTdGF0ZSIsInNvdXJjZSIsIlNvdXJjZSIsIk1pY3JvcGhvbmUiLCJvbkNoYW5nZSIsIl8iLCJDYW1lcmEiLCJuYW1lIiwiZGVmYXVsdFZhbHVlIiwiaW5wdXRFbCIsImF1dG9Db21wbGV0ZSIsIm92ZXJmbG93IiwibWF4V2lkdGgiLCJ1c2VTZXR0aW5nc1RvZ2dsZSIsInVzZUxheW91dENvbnRleHQiLCJtZXJnZWRQcm9wcyIsIm1lcmdlUHJvcHMiLCJzaG93U2V0dGluZ3MiLCJTZXR0aW5nc01lbnVUb2dnbGUiLCJmb3J3YXJkUmVmIiwiQ29udHJvbEJhciIsInZhcmlhdGlvbiIsImNvbnRyb2xzIiwic2F2ZVVzZXJDaG9pY2VzIiwib25EZXZpY2VFcnJvciIsImlzQ2hhdE9wZW4iLCJzZXRJc0NoYXRPcGVuIiwiZGVmYXVsdFZhcmlhdGlvbiIsInVzZU1lZGlhUXVlcnkiLCJ2aXNpYmxlQ29udHJvbHMiLCJsZWF2ZSIsImxvY2FsUGVybWlzc2lvbnMiLCJ1c2VMb2NhbFBhcnRpY2lwYW50UGVybWlzc2lvbnMiLCJjYW1lcmEiLCJjYW5QdWJsaXNoIiwibWljcm9waG9uZSIsInNjcmVlblNoYXJlIiwiY2hhdCIsImNhblB1Ymxpc2hEYXRhIiwic2hvd0ljb24iLCJzaG93VGV4dCIsImJyb3dzZXJTdXBwb3J0c1NjcmVlblNoYXJpbmciLCJzdXBwb3J0c1NjcmVlblNoYXJpbmciLCJpc1NjcmVlblNoYXJlRW5hYmxlZCIsInNldElzU2NyZWVuU2hhcmVFbmFibGVkIiwib25TY3JlZW5TaGFyZUNoYW5nZSIsIm1pY3JvcGhvbmVPbkNoYW5nZSIsImlzVXNlckluaXRpYXRlZCIsImNhbWVyYU9uQ2hhbmdlIiwiX2tpbmQiLCJTY3JlZW5TaGFyZSIsImNhcHR1cmVPcHRpb25zIiwic2VsZkJyb3dzZXJTdXJmYWNlIiwiQ2hhdEljb24iLCJzZXR0aW5ncyIsIkdlYXJJY29uIiwiRGlzY29ubmVjdEJ1dHRvbiIsIkxlYXZlSWNvbiIsIlN0YXJ0TWVkaWFCdXR0b24iLCJWaWRlb0NvbmZlcmVuY2UiLCJjaGF0TWVzc2FnZUZvcm1hdHRlciIsImNoYXRNZXNzYWdlRGVjb2RlciIsImNoYXRNZXNzYWdlRW5jb2RlciIsIlNldHRpbmdzQ29tcG9uZW50Iiwid2lkZ2V0U3RhdGUiLCJzZXRXaWRnZXRTdGF0ZSIsImxhc3RBdXRvRm9jdXNlZFNjcmVlblNoYXJlVHJhY2siLCJ1c2VUcmFja3MiLCJ3aXRoUGxhY2Vob2xkZXIiLCJ1cGRhdGVPbmx5T24iLCJSb29tRXZlbnQiLCJBY3RpdmVTcGVha2Vyc0NoYW5nZWQiLCJvbmx5U3Vic2NyaWJlZCIsIndpZGdldFVwZGF0ZSIsInVzZUNyZWF0ZUxheW91dENvbnRleHQiLCJzY3JlZW5TaGFyZVRyYWNrcyIsImlzVHJhY2tSZWZlcmVuY2UiLCJwdWJsaWNhdGlvbiIsImZvY3VzVHJhY2siLCJ1c2VQaW5uZWRUcmFja3MiLCJjYXJvdXNlbFRyYWNrcyIsImlzRXF1YWxUcmFja1JlZiIsInNvbWUiLCJpc1N1YnNjcmliZWQiLCJuZXdTY3JlZW5TaGFyZVRyYWNrIiwicGluIiwidHJhY2tSZWZlcmVuY2UiLCJ0cmFja1NpZCIsInVwZGF0ZWRGb2N1c1RyYWNrIiwicGFydGljaXBhbnQiLCJpZGVudGl0eSIsIl9mIiwiam9pbiIsImlzV2ViIiwiTGF5b3V0Q29udGV4dFByb3ZpZGVyIiwib25XaWRnZXRDaGFuZ2UiLCJGb2N1c0xheW91dENvbnRhaW5lciIsIkNhcm91c2VsTGF5b3V0IiwiUGFydGljaXBhbnRUaWxlIiwiRm9jdXNMYXlvdXQiLCJ0cmFja1JlZiIsIkdyaWRMYXlvdXQiLCJkaXNwbGF5IiwiUm9vbUF1ZGlvUmVuZGVyZXIiLCJDb25uZWN0aW9uU3RhdGVUb2FzdCIsIkF1ZGlvQ29uZmVyZW5jZSIsImF1ZGlvVHJhY2tzIiwiVHJhY2tMb29wIiwiUGFydGljaXBhbnRBdWRpb1RpbGUiLCJWb2ljZUFzc2lzdGFudENvbnRyb2xCYXIiLCJtaWNyb3Bob25lVHJhY2siLCJsb2NhbFBhcnRpY2lwYW50IiwidXNlTG9jYWxQYXJ0aWNpcGFudCIsIm1pY1RyYWNrUmVmIiwiQmFyVmlzdWFsaXplciIsImJhckNvdW50IiwibWluSGVpZ2h0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/prefabs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/room-BgiuQa2X.mjs":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/room-BgiuQa2X.mjs ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   L: () => (/* binding */ Q),\n/* harmony export */   a: () => (/* binding */ B),\n/* harmony export */   c: () => (/* binding */ G),\n/* harmony export */   m: () => (/* binding */ M),\n/* harmony export */   r: () => (/* binding */ J),\n/* harmony export */   u: () => (/* binding */ q),\n/* harmony export */   w: () => (/* binding */ H)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contexts-CPsnPrz2.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/contexts-CPsnPrz2.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.11.2/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n\n\n\nfunction L(n) {\n    var e, o, t = \"\";\n    if (typeof n == \"string\" || typeof n == \"number\") t += n;\n    else if (typeof n == \"object\") if (Array.isArray(n)) {\n        var r = n.length;\n        for(e = 0; e < r; e++)n[e] && (o = L(n[e])) && (t && (t += \" \"), t += o);\n    } else for(o in n)n[o] && (t && (t += \" \"), t += o);\n    return t;\n}\nfunction A() {\n    for(var n, e, o = 0, t = \"\", r = arguments.length; o < r; o++)(n = arguments[o]) && (e = L(n)) && (t && (t += \" \"), t += e);\n    return t;\n}\nfunction _(...n) {\n    return (...e)=>{\n        for (const o of n)if (typeof o == \"function\") try {\n            o(...e);\n        } catch (t) {\n            console.error(t);\n        }\n    };\n}\nfunction M(...n) {\n    const e = {\n        ...n[0]\n    };\n    for(let o = 1; o < n.length; o++){\n        const t = n[o];\n        for(const r in t){\n            const d = e[r], a = t[r];\n            typeof d == \"function\" && typeof a == \"function\" && // This is a lot faster than a regex.\n            r[0] === \"o\" && r[1] === \"n\" && r.charCodeAt(2) >= /* 'A' */ 65 && r.charCodeAt(2) <= /* 'Z' */ 90 ? e[r] = _(d, a) : (r === \"className\" || r === \"UNSAFE_className\") && typeof d == \"string\" && typeof a == \"string\" ? e[r] = A(d, a) : e[r] = a !== void 0 ? a : d;\n        }\n    }\n    return e;\n}\nfunction I(n) {\n    return n !== void 0;\n}\nfunction B(...n) {\n    return M(...n.filter(I));\n}\nfunction G(n, e, o) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(n, (t)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(t) && react__WEBPACK_IMPORTED_MODULE_0__.Children.only(n) ? (t.props.class && (e ?? (e = {}), e.class = A(t.props.class, e.class), e.style = {\n            ...t.props.style,\n            ...e.style\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(t, {\n            ...e,\n            key: o\n        })) : t);\n}\nfunction H(n) {\n    var e, o;\n    if (false) {}\n}\nfunction J(n, e) {\n    return n === \"processor\" && e && typeof e == \"object\" && \"name\" in e ? e.name : n === \"e2ee\" && e ? \"e2ee-enabled\" : e;\n}\nconst T = {\n    connect: !0,\n    audio: !1,\n    video: !1\n};\nfunction q(n) {\n    const { token: e, serverUrl: o, options: t, room: r, connectOptions: d, connect: a, audio: p, video: y, screen: g, onConnected: v, onDisconnected: h, onError: c, onMediaDeviceFailure: b, onEncryptionError: E, simulateParticipants: w, ...P } = {\n        ...T,\n        ...n\n    };\n    t && r && _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.warn(\"when using a manually created room, the options object will be ignored. set the desired options directly when creating the room instead.\");\n    const [s, O] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), C = react__WEBPACK_IMPORTED_MODULE_0__.useRef(a);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        O(r ?? new livekit_client__WEBPACK_IMPORTED_MODULE_1__.Room(t));\n    }, [\n        r,\n        JSON.stringify(t, J)\n    ]);\n    const F = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className: m } = (0,_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.s)();\n        return M(P, {\n            className: m\n        });\n    }, [\n        P\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!s) return;\n        const m = ()=>{\n            const f = s.localParticipant;\n            _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"trying to publish local tracks\"), Promise.all([\n                f.setMicrophoneEnabled(!!p, typeof p != \"boolean\" ? p : void 0),\n                f.setCameraEnabled(!!y, typeof y != \"boolean\" ? y : void 0),\n                f.setScreenShareEnabled(!!g, typeof g != \"boolean\" ? g : void 0)\n            ]).catch((R)=>{\n                _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.warn(R), c == null || c(R);\n            });\n        }, S = (f)=>{\n            const R = livekit_client__WEBPACK_IMPORTED_MODULE_1__.MediaDeviceFailure.getFailure(f);\n            b == null || b(R);\n        }, k = (f)=>{\n            E == null || E(f);\n        }, N = (f)=>{\n            h == null || h(f);\n        }, D = ()=>{\n            v == null || v();\n        };\n        return s.on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.SignalConnected, m).on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.MediaDevicesError, S).on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.EncryptionError, k).on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.Disconnected, N).on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.Connected, D), ()=>{\n            s.off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.SignalConnected, m).off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.MediaDevicesError, S).off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.EncryptionError, k).off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.Disconnected, N).off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.Connected, D);\n        };\n    }, [\n        s,\n        p,\n        y,\n        g,\n        c,\n        E,\n        b,\n        v,\n        h\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (s) {\n            if (w) {\n                s.simulateParticipants({\n                    participants: {\n                        count: w\n                    },\n                    publish: {\n                        audio: !0,\n                        useRealTracks: !0\n                    }\n                });\n                return;\n            }\n            if (a) {\n                if (C.current = !0, _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"connecting\"), !e) {\n                    _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"no token yet\");\n                    return;\n                }\n                if (!o) {\n                    _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.warn(\"no livekit url provided\"), c == null || c(Error(\"no livekit url provided\"));\n                    return;\n                }\n                s.connect(o, e, d).catch((m)=>{\n                    _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.warn(m), C.current === !0 && (c == null || c(m));\n                });\n            } else _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"disconnecting because connect is false\"), C.current = !1, s.disconnect();\n        }\n    }, [\n        a,\n        e,\n        JSON.stringify(d),\n        s,\n        c,\n        o,\n        w\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (s) return ()=>{\n            _contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.l.info(\"disconnecting on onmount\"), s.disconnect();\n        };\n    }, [\n        s\n    ]), {\n        room: s,\n        htmlProps: F\n    };\n}\nconst Q = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function(e, o) {\n    const { room: t, htmlProps: r } = q(e);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: o,\n        ...r\n    }, t && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.R.Provider, {\n        value: t\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_CPsnPrz2_mjs__WEBPACK_IMPORTED_MODULE_2__.L.Provider, {\n        value: e.featureFlags\n    }, e.children)));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjkuMl9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjE2X2xpdmVraXQtY2xpZW50QDIuMTEuMl9fbGl2X3FwNXZ5NnA2eDZyZmhudmdyMzdlYXk0NnNpL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L2Rpc3Qvcm9vbS1CZ2l1UWEyWC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBQVNBLEVBQUVDLENBQUFBO0lBQUcsSUFBSUMsR0FBRUMsR0FBRUMsSUFBRTtJQUFHLElBQWEsT0FBT0gsS0FBakIsWUFBOEIsT0FBT0EsS0FBakIsVUFBbUJHLEtBQUdIO1NBQUEsSUFBb0IsT0FBT0EsS0FBakIsVUFBbUIsSUFBR0ksTUFBTUMsT0FBQSxDQUFRTCxJQUFHO1FBQUMsSUFBSU0sSUFBRU4sRUFBRU8sTUFBQTtRQUFPLElBQUlOLElBQUUsR0FBRUEsSUFBRUssR0FBRUwsSUFBSUQsQ0FBQUEsQ0FBRUMsRUFBQyxJQUFJQyxDQUFBQSxJQUFFSCxFQUFFQyxDQUFBQSxDQUFFQyxFQUFFLE1BQUtFLENBQUFBLEtBQUlBLENBQUFBLEtBQUcsTUFBS0EsS0FBR0QsQ0FBQUE7SUFBRSxPQUFNLElBQUlBLEtBQUtGLEVBQUVBLENBQUFBLENBQUVFLEVBQUMsSUFBSUMsQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxNQUFLQSxLQUFHRCxDQUFBQTtJQUFHLE9BQU9DO0FBQUM7QUFBUSxTQUFTSztJQUFPLFFBQVFSLEdBQUVDLEdBQUVDLElBQUUsR0FBRUMsSUFBRSxJQUFHRyxJQUFFRyxVQUFVRixNQUFBLEVBQU9MLElBQUVJLEdBQUVKLElBQUksQ0FBQ0YsSUFBRVMsU0FBQSxDQUFVUCxFQUFDLEtBQUtELENBQUFBLElBQUVGLEVBQUVDLEVBQUMsS0FBS0csQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxNQUFLQSxLQUFHRixDQUFB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QSxDQUczQyxTQUFxQlgsQ0FBQUEsRUFBa0R3RyxDQUFBQTtJQUN2RSxNQUFNLEVBQUUzRCxNQUFBQSxDQUFBQSxFQUFNbUIsV0FBQUEsQ0FBQUEsRUFBQUEsR0FBY3ZCLEVBQWV6QztJQUV6QyxxQ0FBQVcsZ0RBQUEsQ0FBQztRQUFJNkYsS0FBQUE7UUFBVyxHQUFHeEMsQ0FBQUE7SUFBQUEsR0FDaEJuQixLQUNDLDhCQUFBbEMsZ0RBQUEsQ0FBQytGLHFEQUFBQSxDQUFZQyxRQUFBLEVBQVo7UUFBcUJDLE9BQU8vRDtJQUFBQSxHQUMxQiw4QkFBQWxDLGdEQUFBLENBQUFrRyxxREFBQUEsQ0FBaUJGLFFBQUEsRUFBakI7UUFBMEJDLE9BQU81RyxFQUFNOEcsWUFBQTtJQUNyQyxHQUFBOUcsRUFBTVUsUUFDVDtBQUtWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL2Nsc3hAMi4xLjEvbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm1qcz84YzNhIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuOS4yX0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTZfbGl2ZWtpdC1jbGllbnRAMi4xMS4yX19saXZfcXA1dnk2cDZ4NnJmaG52Z3IzN2VheTQ2c2kvbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3Qvc3JjL21lcmdlUHJvcHMudHM/NDg0YSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjkuMl9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjE2X2xpdmVraXQtY2xpZW50QDIuMTEuMl9fbGl2X3FwNXZ5NnA2eDZyZmhudmdyMzdlYXk0NnNpL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L3NyYy91dGlscy50cz83NzY2Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuOS4yX0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTZfbGl2ZWtpdC1jbGllbnRAMi4xMS4yX19saXZfcXA1dnk2cDZ4NnJmaG52Z3IzN2VheTQ2c2kvbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3Qvc3JjL2hvb2tzL3VzZUxpdmVLaXRSb29tLnRzP2JhMjUiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi45LjJfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xNl9saXZla2l0LWNsaWVudEAyLjExLjJfX2xpdl9xcDV2eTZwNng2cmZobnZncjM3ZWF5NDZzaS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvY29tcG9uZW50cy9MaXZlS2l0Um9vbS50c3g/MjViOCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjkuMl9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjE2X2xpdmVraXQtY2xpZW50QDIuMTEuMl9fbGl2X3FwNXZ5NnA2eDZyZmhudmdyMzdlYXk0NnNpL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L2Rpc3Qvcm9vbS1CZ2l1UWEyWC5tanM/NjdiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByKGUpe3ZhciB0LGYsbj1cIlwiO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZSluKz1lO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSl7dmFyIG89ZS5sZW5ndGg7Zm9yKHQ9MDt0PG87dCsrKWVbdF0mJihmPXIoZVt0XSkpJiYobiYmKG4rPVwiIFwiKSxuKz1mKX1lbHNlIGZvcihmIGluIGUpZVtmXSYmKG4mJihuKz1cIiBcIiksbis9Zik7cmV0dXJuIG59ZXhwb3J0IGZ1bmN0aW9uIGNsc3goKXtmb3IodmFyIGUsdCxmPTAsbj1cIlwiLG89YXJndW1lbnRzLmxlbmd0aDtmPG87ZisrKShlPWFyZ3VtZW50c1tmXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcblxuLyoqXG4gKiBDYWxscyBhbGwgZnVuY3Rpb25zIGluIHRoZSBvcmRlciB0aGV5IHdlcmUgY2hhaW5lZCB3aXRoIHRoZSBzYW1lIGFyZ3VtZW50cy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhaW4oLi4uY2FsbGJhY2tzOiBhbnlbXSk6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCB7XG4gIHJldHVybiAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGNhbGxiYWNrcykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vLyB0YWtlbiBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81MTYwMzI1MC90eXBlc2NyaXB0LTMtcGFyYW1ldGVyLWxpc3QtaW50ZXJzZWN0aW9uLXR5cGUvNTE2MDQzNzkjNTE2MDQzNzlcbnR5cGUgVHVwbGVUeXBlczxUPiA9IHsgW1AgaW4ga2V5b2YgVF06IFRbUF0gfSBleHRlbmRzIHsgW2tleTogbnVtYmVyXTogaW5mZXIgViB9ID8gViA6IG5ldmVyO1xudHlwZSBVbmlvblRvSW50ZXJzZWN0aW9uPFU+ID0gKFUgZXh0ZW5kcyBhbnkgPyAoazogVSkgPT4gdm9pZCA6IG5ldmVyKSBleHRlbmRzIChrOiBpbmZlciBJKSA9PiB2b2lkXG4gID8gSVxuICA6IG5ldmVyO1xuXG4vKipcbiAqIE1lcmdlcyBtdWx0aXBsZSBwcm9wcyBvYmplY3RzIHRvZ2V0aGVyLiBFdmVudCBoYW5kbGVycyBhcmUgY2hhaW5lZCxcbiAqIGNsYXNzTmFtZXMgYXJlIGNvbWJpbmVkLCBhbmQgaWRzIGFyZSBkZWR1cGxpY2F0ZWQgLSBkaWZmZXJlbnQgaWRzXG4gKiB3aWxsIHRyaWdnZXIgYSBzaWRlLWVmZmVjdCBhbmQgcmUtcmVuZGVyIGNvbXBvbmVudHMgaG9va2VkIHVwIHdpdGggYHVzZUlkYC5cbiAqIEZvciBhbGwgb3RoZXIgcHJvcHMsIHRoZSBsYXN0IHByb3Agb2JqZWN0IG92ZXJyaWRlcyBhbGwgcHJldmlvdXMgb25lcy5cbiAqIEBwYXJhbSBhcmdzIC0gTXVsdGlwbGUgc2V0cyBvZiBwcm9wcyB0byBtZXJnZSB0b2dldGhlci5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VQcm9wczxUIGV4dGVuZHMgUHJvcHNbXT4oLi4uYXJnczogVCk6IFVuaW9uVG9JbnRlcnNlY3Rpb248VHVwbGVUeXBlczxUPj4ge1xuICAvLyBTdGFydCB3aXRoIGEgYmFzZSBjbG9uZSBvZiB0aGUgZmlyc3QgYXJndW1lbnQuIFRoaXMgaXMgYSBsb3QgZmFzdGVyIHRoYW4gc3RhcnRpbmdcbiAgLy8gd2l0aCBhbiBlbXB0eSBvYmplY3QgYW5kIGFkZGluZyBwcm9wZXJ0aWVzIGFzIHdlIGdvLlxuICBjb25zdCByZXN1bHQ6IFByb3BzID0geyAuLi5hcmdzWzBdIH07XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByb3BzID0gYXJnc1tpXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgY29uc3QgYSA9IHJlc3VsdFtrZXldO1xuICAgICAgY29uc3QgYiA9IHByb3BzW2tleV07XG5cbiAgICAgIC8vIENoYWluIGV2ZW50c1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgYiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAvLyBUaGlzIGlzIGEgbG90IGZhc3RlciB0aGFuIGEgcmVnZXguXG4gICAgICAgIGtleVswXSA9PT0gJ28nICYmXG4gICAgICAgIGtleVsxXSA9PT0gJ24nICYmXG4gICAgICAgIGtleS5jaGFyQ29kZUF0KDIpID49IC8qICdBJyAqLyA2NSAmJlxuICAgICAgICBrZXkuY2hhckNvZGVBdCgyKSA8PSAvKiAnWicgKi8gOTBcbiAgICAgICkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGNoYWluKGEsIGIpO1xuXG4gICAgICAgIC8vIE1lcmdlIGNsYXNzbmFtZXMsIHNvbWV0aW1lcyBjbGFzc05hbWVzIGFyZSBlbXB0eSBzdHJpbmcgd2hpY2ggZXZhbCB0byBmYWxzZSwgc28gd2UganVzdCBuZWVkIHRvIGRvIGEgdHlwZSBjaGVja1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKGtleSA9PT0gJ2NsYXNzTmFtZScgfHwga2V5ID09PSAnVU5TQUZFX2NsYXNzTmFtZScpICYmXG4gICAgICAgIHR5cGVvZiBhID09PSAnc3RyaW5nJyAmJlxuICAgICAgICB0eXBlb2YgYiA9PT0gJ3N0cmluZydcbiAgICAgICkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGNsc3goYSwgYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRba2V5XSA9IGIgIT09IHVuZGVmaW5lZCA/IGIgOiBhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgYXMgVW5pb25Ub0ludGVyc2VjdGlvbjxUdXBsZVR5cGVzPFQ+Pjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1lcmdlUHJvcHMgYXMgbWVyZ2VQcm9wc1JlYWN0QXJpYSB9IGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3A8VSBleHRlbmRzIEhUTUxFbGVtZW50LCBUIGV4dGVuZHMgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8VT4+KFxuICBwcm9wOiBUIHwgdW5kZWZpbmVkLFxuKTogcHJvcCBpcyBUIHtcbiAgcmV0dXJuIHByb3AgIT09IHVuZGVmaW5lZDtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlUHJvcHM8XG4gIFUgZXh0ZW5kcyBIVE1MRWxlbWVudCxcbiAgVCBleHRlbmRzIEFycmF5PFJlYWN0LkhUTUxBdHRyaWJ1dGVzPFU+IHwgdW5kZWZpbmVkPixcbj4oLi4ucHJvcHM6IFQpIHtcbiAgcmV0dXJuIG1lcmdlUHJvcHNSZWFjdEFyaWEoLi4ucHJvcHMuZmlsdGVyKGlzUHJvcCkpO1xufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVTaW5nbGVDaGlsZChcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB8IFJlYWN0LlJlYWN0Tm9kZVtdLFxuICBwcm9wcz86IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIGtleT86IGFueSxcbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQpID0+IHtcbiAgICAvLyBDaGVja2luZyBpc1ZhbGlkRWxlbWVudCBpcyB0aGUgc2FmZSB3YXkgYW5kIGF2b2lkcyBhIHR5cGVzY3JpcHRcbiAgICAvLyBlcnJvciB0b28uXG4gICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSAmJiBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKGNoaWxkLnByb3BzLmNsYXNzKSB7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSByZXRhaW4gY2xhc3NuYW1lcyBvZiBib3RoIHBhc3NlZCBwcm9wcyBhbmQgY2hpbGRcbiAgICAgICAgcHJvcHMgPz89IHt9O1xuICAgICAgICBwcm9wcy5jbGFzcyA9IGNsc3goY2hpbGQucHJvcHMuY2xhc3MsIHByb3BzLmNsYXNzKTtcbiAgICAgICAgcHJvcHMuc3R5bGUgPSB7IC4uLmNoaWxkLnByb3BzLnN0eWxlLCAuLi5wcm9wcy5zdHlsZSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyAuLi5wcm9wcywga2V5IH0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2FybkFib3V0TWlzc2luZ1N0eWxlcyhlbD86IEhUTUxFbGVtZW50KSB7XG4gIGlmIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB0dXJiby9uby11bmRlY2xhcmVkLWVudi12YXJzXG4gICAgKHByb2Nlc3M/LmVudj8uTk9ERV9FTlYgPT09ICdkZXYnIHx8XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdHVyYm8vbm8tdW5kZWNsYXJlZC1lbnYtdmFyc1xuICAgICAgcHJvY2Vzcz8uZW52Py5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JylcbiAgKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZWwgPz8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxrLXJvb20tY29udGFpbmVyJyk7XG4gICAgaWYgKHRhcmdldCAmJiAhZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUoJy0tbGstaGFzLWltcG9ydGVkLXN0eWxlcycpKSB7XG4gICAgICBsb2cud2FybihcbiAgICAgICAgXCJJdCBsb29rcyBsaWtlIHlvdSdyZSBub3QgdXNpbmcgdGhlIGBAbGl2ZWtpdC9jb21wb25lbnRzLXN0eWxlcyBwYWNrYWdlYC4gVG8gcmVuZGVyIHRoZSBVSSB3aXRoIHRoZSBkZWZhdWx0IHN0eWxpbmcsIHBsZWFzZSBpbXBvcnQgaXQgaW4geW91ciBsYXlvdXQgb3IgcGFnZS5cIixcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICpcbiAqIEBpbnRlcm5hbFxuICogdXNlZCB0byBzdHJpbmdpZnkgcm9vbSBvcHRpb25zIHRvIGRldGVjdCBkZXBlbmRlbmN5IGNoYW5nZXMgZm9yIHJlYWN0IGhvb2tzLlxuICogUmVwbGFjZXMgcHJvY2Vzc29ycyBhbmQgZTJlZSBvcHRpb25zIHdpdGggc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvb21PcHRpb25zU3RyaW5naWZ5UmVwbGFjZXIoa2V5OiBzdHJpbmcsIHZhbDogdW5rbm93bikge1xuICBpZiAoa2V5ID09PSAncHJvY2Vzc29yJyAmJiB2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgJ25hbWUnIGluIHZhbCkge1xuICAgIHJldHVybiB2YWwubmFtZTtcbiAgfVxuICBpZiAoa2V5ID09PSAnZTJlZScgJiYgdmFsKSB7XG4gICAgcmV0dXJuICdlMmVlLWVuYWJsZWQnO1xuICB9XG4gIHJldHVybiB2YWw7XG59XG4iLCJpbXBvcnQgeyBsb2csIHNldHVwTGl2ZUtpdFJvb20gfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHR5cGUgeyBEaXNjb25uZWN0UmVhc29uIH0gZnJvbSAnbGl2ZWtpdC1jbGllbnQnO1xuaW1wb3J0IHsgUm9vbSwgTWVkaWFEZXZpY2VGYWlsdXJlLCBSb29tRXZlbnQgfSBmcm9tICdsaXZla2l0LWNsaWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IEhUTUxBdHRyaWJ1dGVzIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSB7IExpdmVLaXRSb29tUHJvcHMgfSBmcm9tICcuLi9jb21wb25lbnRzJztcbmltcG9ydCB7IG1lcmdlUHJvcHMgfSBmcm9tICcuLi9tZXJnZVByb3BzJztcbmltcG9ydCB7IHJvb21PcHRpb25zU3RyaW5naWZ5UmVwbGFjZXIgfSBmcm9tICcuLi91dGlscyc7XG5cbmNvbnN0IGRlZmF1bHRSb29tUHJvcHM6IFBhcnRpYWw8TGl2ZUtpdFJvb21Qcm9wcz4gPSB7XG4gIGNvbm5lY3Q6IHRydWUsXG4gIGF1ZGlvOiBmYWxzZSxcbiAgdmlkZW86IGZhbHNlLFxufTtcblxuLyoqXG4gKiBUaGUgYHVzZUxpdmVLaXRSb29tYCBob29rIGlzIHVzZWQgdG8gaW1wbGVtZW50IHRoZSBgTGl2ZUtpdFJvb21gIG9yIHlvdXIgY3VzdG9tIGltcGxlbWVudGF0aW9uIG9mIGl0LlxuICogSXQgcmV0dXJucyBhIGBSb29tYCBpbnN0YW5jZSBhbmQgSFRNTCBwcm9wcyB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBjb25zdCB7IHJvb20sIGh0bWxQcm9wcyB9ID0gdXNlTGl2ZUtpdFJvb20oKTtcbiAqIHJldHVybiA8ZGl2IHsuLi5odG1sUHJvcHN9Pi4uLjwvZGl2PjtcbiAqIGBgYFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTGl2ZUtpdFJvb208VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgcHJvcHM6IExpdmVLaXRSb29tUHJvcHMsXG4pOiB7XG4gIHJvb206IFJvb20gfCB1bmRlZmluZWQ7XG4gIGh0bWxQcm9wczogSFRNTEF0dHJpYnV0ZXM8VD47XG59IHtcbiAgY29uc3Qge1xuICAgIHRva2VuLFxuICAgIHNlcnZlclVybCxcbiAgICBvcHRpb25zLFxuICAgIHJvb206IHBhc3NlZFJvb20sXG4gICAgY29ubmVjdE9wdGlvbnMsXG4gICAgY29ubmVjdCxcbiAgICBhdWRpbyxcbiAgICB2aWRlbyxcbiAgICBzY3JlZW4sXG4gICAgb25Db25uZWN0ZWQsXG4gICAgb25EaXNjb25uZWN0ZWQsXG4gICAgb25FcnJvcixcbiAgICBvbk1lZGlhRGV2aWNlRmFpbHVyZSxcbiAgICBvbkVuY3J5cHRpb25FcnJvcixcbiAgICBzaW11bGF0ZVBhcnRpY2lwYW50cyxcbiAgICAuLi5yZXN0XG4gIH0gPSB7IC4uLmRlZmF1bHRSb29tUHJvcHMsIC4uLnByb3BzIH07XG4gIGlmIChvcHRpb25zICYmIHBhc3NlZFJvb20pIHtcbiAgICBsb2cud2FybihcbiAgICAgICd3aGVuIHVzaW5nIGEgbWFudWFsbHkgY3JlYXRlZCByb29tLCB0aGUgb3B0aW9ucyBvYmplY3Qgd2lsbCBiZSBpZ25vcmVkLiBzZXQgdGhlIGRlc2lyZWQgb3B0aW9ucyBkaXJlY3RseSB3aGVuIGNyZWF0aW5nIHRoZSByb29tIGluc3RlYWQuJyxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgW3Jvb20sIHNldFJvb21dID0gUmVhY3QudXNlU3RhdGU8Um9vbSB8IHVuZGVmaW5lZD4oKTtcblxuICBjb25zdCBzaG91bGRDb25uZWN0ID0gUmVhY3QudXNlUmVmKGNvbm5lY3QpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0Um9vbShwYXNzZWRSb29tID8/IG5ldyBSb29tKG9wdGlvbnMpKTtcbiAgfSwgW3Bhc3NlZFJvb20sIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMsIHJvb21PcHRpb25zU3RyaW5naWZ5UmVwbGFjZXIpXSk7XG5cbiAgY29uc3QgaHRtbFByb3BzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IHNldHVwTGl2ZUtpdFJvb20oKTtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhyZXN0LCB7IGNsYXNzTmFtZSB9KSBhcyBIVE1MQXR0cmlidXRlczxUPjtcbiAgfSwgW3Jlc3RdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghcm9vbSkgcmV0dXJuO1xuICAgIGNvbnN0IG9uU2lnbmFsQ29ubmVjdGVkID0gKCkgPT4ge1xuICAgICAgY29uc3QgbG9jYWxQID0gcm9vbS5sb2NhbFBhcnRpY2lwYW50O1xuXG4gICAgICBsb2cuZGVidWcoJ3RyeWluZyB0byBwdWJsaXNoIGxvY2FsIHRyYWNrcycpO1xuICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICBsb2NhbFAuc2V0TWljcm9waG9uZUVuYWJsZWQoISFhdWRpbywgdHlwZW9mIGF1ZGlvICE9PSAnYm9vbGVhbicgPyBhdWRpbyA6IHVuZGVmaW5lZCksXG4gICAgICAgIGxvY2FsUC5zZXRDYW1lcmFFbmFibGVkKCEhdmlkZW8sIHR5cGVvZiB2aWRlbyAhPT0gJ2Jvb2xlYW4nID8gdmlkZW8gOiB1bmRlZmluZWQpLFxuICAgICAgICBsb2NhbFAuc2V0U2NyZWVuU2hhcmVFbmFibGVkKCEhc2NyZWVuLCB0eXBlb2Ygc2NyZWVuICE9PSAnYm9vbGVhbicgPyBzY3JlZW4gOiB1bmRlZmluZWQpLFxuICAgICAgXSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgbG9nLndhcm4oZSk7XG4gICAgICAgIG9uRXJyb3I/LihlIGFzIEVycm9yKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVNZWRpYURldmljZUVycm9yID0gKGU6IEVycm9yKSA9PiB7XG4gICAgICBjb25zdCBtZWRpYURldmljZUZhaWx1cmUgPSBNZWRpYURldmljZUZhaWx1cmUuZ2V0RmFpbHVyZShlKTtcbiAgICAgIG9uTWVkaWFEZXZpY2VGYWlsdXJlPy4obWVkaWFEZXZpY2VGYWlsdXJlKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUVuY3J5cHRpb25FcnJvciA9IChlOiBFcnJvcikgPT4ge1xuICAgICAgb25FbmNyeXB0aW9uRXJyb3I/LihlKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZURpc2Nvbm5lY3RlZCA9IChyZWFzb24/OiBEaXNjb25uZWN0UmVhc29uKSA9PiB7XG4gICAgICBvbkRpc2Nvbm5lY3RlZD8uKHJlYXNvbik7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDb25uZWN0ZWQgPSAoKSA9PiB7XG4gICAgICBvbkNvbm5lY3RlZD8uKCk7XG4gICAgfTtcblxuICAgIHJvb21cbiAgICAgIC5vbihSb29tRXZlbnQuU2lnbmFsQ29ubmVjdGVkLCBvblNpZ25hbENvbm5lY3RlZClcbiAgICAgIC5vbihSb29tRXZlbnQuTWVkaWFEZXZpY2VzRXJyb3IsIGhhbmRsZU1lZGlhRGV2aWNlRXJyb3IpXG4gICAgICAub24oUm9vbUV2ZW50LkVuY3J5cHRpb25FcnJvciwgaGFuZGxlRW5jcnlwdGlvbkVycm9yKVxuICAgICAgLm9uKFJvb21FdmVudC5EaXNjb25uZWN0ZWQsIGhhbmRsZURpc2Nvbm5lY3RlZClcbiAgICAgIC5vbihSb29tRXZlbnQuQ29ubmVjdGVkLCBoYW5kbGVDb25uZWN0ZWQpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJvb21cbiAgICAgICAgLm9mZihSb29tRXZlbnQuU2lnbmFsQ29ubmVjdGVkLCBvblNpZ25hbENvbm5lY3RlZClcbiAgICAgICAgLm9mZihSb29tRXZlbnQuTWVkaWFEZXZpY2VzRXJyb3IsIGhhbmRsZU1lZGlhRGV2aWNlRXJyb3IpXG4gICAgICAgIC5vZmYoUm9vbUV2ZW50LkVuY3J5cHRpb25FcnJvciwgaGFuZGxlRW5jcnlwdGlvbkVycm9yKVxuICAgICAgICAub2ZmKFJvb21FdmVudC5EaXNjb25uZWN0ZWQsIGhhbmRsZURpc2Nvbm5lY3RlZClcbiAgICAgICAgLm9mZihSb29tRXZlbnQuQ29ubmVjdGVkLCBoYW5kbGVDb25uZWN0ZWQpO1xuICAgIH07XG4gIH0sIFtcbiAgICByb29tLFxuICAgIGF1ZGlvLFxuICAgIHZpZGVvLFxuICAgIHNjcmVlbixcbiAgICBvbkVycm9yLFxuICAgIG9uRW5jcnlwdGlvbkVycm9yLFxuICAgIG9uTWVkaWFEZXZpY2VGYWlsdXJlLFxuICAgIG9uQ29ubmVjdGVkLFxuICAgIG9uRGlzY29ubmVjdGVkLFxuICBdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghcm9vbSkgcmV0dXJuO1xuXG4gICAgaWYgKHNpbXVsYXRlUGFydGljaXBhbnRzKSB7XG4gICAgICByb29tLnNpbXVsYXRlUGFydGljaXBhbnRzKHtcbiAgICAgICAgcGFydGljaXBhbnRzOiB7XG4gICAgICAgICAgY291bnQ6IHNpbXVsYXRlUGFydGljaXBhbnRzLFxuICAgICAgICB9LFxuICAgICAgICBwdWJsaXNoOiB7XG4gICAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgICAgdXNlUmVhbFRyYWNrczogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjb25uZWN0KSB7XG4gICAgICBzaG91bGRDb25uZWN0LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgbG9nLmRlYnVnKCdjb25uZWN0aW5nJyk7XG4gICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgIGxvZy5kZWJ1Zygnbm8gdG9rZW4geWV0Jyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghc2VydmVyVXJsKSB7XG4gICAgICAgIGxvZy53YXJuKCdubyBsaXZla2l0IHVybCBwcm92aWRlZCcpO1xuICAgICAgICBvbkVycm9yPy4oRXJyb3IoJ25vIGxpdmVraXQgdXJsIHByb3ZpZGVkJykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByb29tLmNvbm5lY3Qoc2VydmVyVXJsLCB0b2tlbiwgY29ubmVjdE9wdGlvbnMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGxvZy53YXJuKGUpO1xuICAgICAgICBpZiAoc2hvdWxkQ29ubmVjdC5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICAgICAgb25FcnJvcj8uKGUgYXMgRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKCdkaXNjb25uZWN0aW5nIGJlY2F1c2UgY29ubmVjdCBpcyBmYWxzZScpO1xuICAgICAgc2hvdWxkQ29ubmVjdC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByb29tLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gIH0sIFtcbiAgICBjb25uZWN0LFxuICAgIHRva2VuLFxuICAgIEpTT04uc3RyaW5naWZ5KGNvbm5lY3RPcHRpb25zKSxcbiAgICByb29tLFxuICAgIG9uRXJyb3IsXG4gICAgc2VydmVyVXJsLFxuICAgIHNpbXVsYXRlUGFydGljaXBhbnRzLFxuICBdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghcm9vbSkgcmV0dXJuO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBsb2cuaW5mbygnZGlzY29ubmVjdGluZyBvbiBvbm1vdW50Jyk7XG4gICAgICByb29tLmRpc2Nvbm5lY3QoKTtcbiAgICB9O1xuICB9LCBbcm9vbV0pO1xuXG4gIHJldHVybiB7IHJvb20sIGh0bWxQcm9wcyB9O1xufVxuIiwiaW1wb3J0IHR5cGUge1xuICBBdWRpb0NhcHR1cmVPcHRpb25zLFxuICBEaXNjb25uZWN0UmVhc29uLFxuICBSb29tQ29ubmVjdE9wdGlvbnMsXG4gIFJvb21PcHRpb25zLFxuICBTY3JlZW5TaGFyZUNhcHR1cmVPcHRpb25zLFxuICBWaWRlb0NhcHR1cmVPcHRpb25zLFxufSBmcm9tICdsaXZla2l0LWNsaWVudCc7XG5pbXBvcnQgdHlwZSB7IE1lZGlhRGV2aWNlRmFpbHVyZSwgUm9vbSB9IGZyb20gJ2xpdmVraXQtY2xpZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHR5cGUgRmVhdHVyZUZsYWdzLCBMS0ZlYXR1cmVDb250ZXh0LCBSb29tQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQnO1xuaW1wb3J0IHsgdXNlTGl2ZUtpdFJvb20gfSBmcm9tICcuLi9ob29rcyc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIExpdmVLaXRSb29tUHJvcHMgZXh0ZW5kcyBPbWl0PFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiwgJ29uRXJyb3InPiB7XG4gIC8qKlxuICAgKiBVUkwgdG8gdGhlIExpdmVLaXQgc2VydmVyLlxuICAgKiBGb3IgZXhhbXBsZTogYHdzczovLzxkb21haW4+LmxpdmVraXQuY2xvdWRgXG4gICAqIFRvIHNpbXBsaWZ5IHRoZSBpbXBsZW1lbnRhdGlvbiwgYHVuZGVmaW5lZGAgaXMgYWxzbyBhY2NlcHRlZCBhcyBhbiBpbnRlcm1lZGlhdGUgdmFsdWUsIGJ1dCBvbmx5IHdpdGggYSB2YWxpZCBzdHJpbmcgdXJsIGNhbiB0aGUgY29ubmVjdGlvbiBiZSBlc3RhYmxpc2hlZC5cbiAgICovXG4gIHNlcnZlclVybDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogQSB1c2VyIHNwZWNpZmljIGFjY2VzcyB0b2tlbiBmb3IgYSBjbGllbnQgdG8gYXV0aGVudGljYXRlIHRvIHRoZSByb29tLlxuICAgKiBUaGlzIHRva2VuIGlzIG5lY2Vzc2FyeSB0byBlc3RhYmxpc2ggYSBjb25uZWN0aW9uIHRvIHRoZSByb29tLlxuICAgKiBUbyBzaW1wbGlmeSB0aGUgaW1wbGVtZW50YXRpb24sIGB1bmRlZmluZWRgIGlzIGFsc28gYWNjZXB0ZWQgYXMgYW4gaW50ZXJtZWRpYXRlIHZhbHVlLCBidXQgb25seSB3aXRoIGEgdmFsaWQgc3RyaW5nIHRva2VuIGNhbiB0aGUgY29ubmVjdGlvbiBiZSBlc3RhYmxpc2hlZC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RvY3MubGl2ZWtpdC5pby9jbG91ZC9wcm9qZWN0LW1hbmFnZW1lbnQva2V5cy1hbmQtdG9rZW5zLyNnZW5lcmF0aW5nLWFjY2Vzcy10b2tlbnNcbiAgICovXG4gIHRva2VuOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBQdWJsaXNoIGF1ZGlvIGltbWVkaWF0ZWx5IGFmdGVyIGNvbm5lY3RpbmcgdG8geW91ciBMaXZlS2l0IHJvb20uXG4gICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5saXZla2l0LmlvL2NsaWVudC1zZGstanMvaW50ZXJmYWNlcy9BdWRpb0NhcHR1cmVPcHRpb25zLmh0bWxcbiAgICovXG4gIGF1ZGlvPzogQXVkaW9DYXB0dXJlT3B0aW9ucyB8IGJvb2xlYW47XG4gIC8qKlxuICAgKiBQdWJsaXNoIHZpZGVvIGltbWVkaWF0ZWx5IGFmdGVyIGNvbm5lY3RpbmcgdG8geW91ciBMaXZlS2l0IHJvb20uXG4gICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5saXZla2l0LmlvL2NsaWVudC1zZGstanMvaW50ZXJmYWNlcy9WaWRlb0NhcHR1cmVPcHRpb25zLmh0bWxcbiAgICovXG4gIHZpZGVvPzogVmlkZW9DYXB0dXJlT3B0aW9ucyB8IGJvb2xlYW47XG4gIC8qKlxuICAgKiBQdWJsaXNoIHNjcmVlbiBzaGFyZSBpbW1lZGlhdGVseSBhZnRlciBjb25uZWN0aW5nIHRvIHlvdXIgTGl2ZUtpdCByb29tLlxuICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICogQHNlZSBodHRwczovL2RvY3MubGl2ZWtpdC5pby9jbGllbnQtc2RrLWpzL2ludGVyZmFjZXMvU2NyZWVuU2hhcmVDYXB0dXJlT3B0aW9ucy5odG1sXG4gICAqL1xuICBzY3JlZW4/OiBTY3JlZW5TaGFyZUNhcHR1cmVPcHRpb25zIHwgYm9vbGVhbjtcbiAgLyoqXG4gICAqIElmIHNldCB0byB0cnVlIGEgY29ubmVjdGlvbiB0byBMaXZlS2l0IHJvb20gaXMgaW5pdGlhdGVkLlxuICAgKiBAZGVmYXVsdFZhbHVlIGB0cnVlYFxuICAgKi9cbiAgY29ubmVjdD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBPcHRpb25zIGZvciB3aGVuIGNyZWF0aW5nIGEgbmV3IHJvb20uXG4gICAqIFdoZW4geW91IHBhc3MgeW91ciBvd24gcm9vbSBpbnN0YW5jZSB0byB0aGlzIGNvbXBvbmVudCwgdGhlc2Ugb3B0aW9ucyBoYXZlIG5vIGVmZmVjdC5cbiAgICogSW5zdGVhZCwgc2V0IHRoZSBvcHRpb25zIGRpcmVjdGx5IGluIHRoZSByb29tIGluc3RhbmNlLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5saXZla2l0LmlvL2NsaWVudC1zZGstanMvaW50ZXJmYWNlcy9Sb29tT3B0aW9ucy5odG1sXG4gICAqL1xuICBvcHRpb25zPzogUm9vbU9wdGlvbnM7XG4gIC8qKlxuICAgKiBEZWZpbmUgb3B0aW9ucyBob3cgdG8gY29ubmVjdCB0byB0aGUgTGl2ZUtpdCBzZXJ2ZXIuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmxpdmVraXQuaW8vY2xpZW50LXNkay1qcy9pbnRlcmZhY2VzL1Jvb21Db25uZWN0T3B0aW9ucy5odG1sXG4gICAqL1xuICBjb25uZWN0T3B0aW9ucz86IFJvb21Db25uZWN0T3B0aW9ucztcbiAgb25Db25uZWN0ZWQ/OiAoKSA9PiB2b2lkO1xuICBvbkRpc2Nvbm5lY3RlZD86IChyZWFzb24/OiBEaXNjb25uZWN0UmVhc29uKSA9PiB2b2lkO1xuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcbiAgb25NZWRpYURldmljZUZhaWx1cmU/OiAoZmFpbHVyZT86IE1lZGlhRGV2aWNlRmFpbHVyZSkgPT4gdm9pZDtcbiAgb25FbmNyeXB0aW9uRXJyb3I/OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkO1xuICAvKipcbiAgICogT3B0aW9uYWwgcm9vbSBpbnN0YW5jZS5cbiAgICogQnkgcGFzc2luZyB5b3VyIG93biByb29tIGluc3RhbmNlIHlvdSBvdmVyd3JpdGUgdGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIsXG4gICAqIG1ha2Ugc3VyZSB0byBzZXQgdGhlIG9wdGlvbnMgZGlyZWN0bHkgb24gdGhlIHJvb20gaW5zdGFuY2UgaXRzZWxmLlxuICAgKi9cbiAgcm9vbT86IFJvb207XG5cbiAgc2ltdWxhdGVQYXJ0aWNpcGFudHM/OiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZmVhdHVyZUZsYWdzPzogRmVhdHVyZUZsYWdzO1xufVxuXG4vKipcbiAqIFRoZSBgTGl2ZUtpdFJvb21gIGNvbXBvbmVudCBwcm92aWRlcyB0aGUgcm9vbSBjb250ZXh0IHRvIGFsbCBpdHMgY2hpbGQgY29tcG9uZW50cy5cbiAqIEl0IGlzIGdlbmVyYWxseSB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgeW91ciBMaXZlS2l0IGFwcCBhbmQgdGhlIHJvb3Qgb2YgdGhlIExpdmVLaXQgY29tcG9uZW50IHRyZWUuXG4gKiBJdCBwcm92aWRlcyB0aGUgcm9vbSBzdGF0ZSBhcyBhIFJlYWN0IGNvbnRleHQgdG8gYWxsIGNoaWxkIGNvbXBvbmVudHMsIHNvIHlvdSBkb24ndCBoYXZlIHRvIHBhc3MgaXQgeW91cnNlbGYuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogPExpdmVLaXRSb29tXG4gKiAgdG9rZW49JzxsaXZla2l0LXRva2VuPidcbiAqICBzZXJ2ZXJVcmw9Jzx1cmwtdG8tbGl2ZWtpdC1zZXJ2ZXI+J1xuICogIGNvbm5lY3Q9e3RydWV9XG4gKiA+XG4gKiAgICAgLi4uXG4gKiA8L0xpdmVLaXRSb29tPlxuICogYGBgXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBMaXZlS2l0Um9vbTogKFxuICBwcm9wczogUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48TGl2ZUtpdFJvb21Qcm9wcz4gJiBSZWFjdC5SZWZBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PixcbikgPT4gUmVhY3QuUmVhY3ROb2RlID0gLyogQF9fUFVSRV9fICovIFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxEaXZFbGVtZW50LFxuICBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjxMaXZlS2l0Um9vbVByb3BzPlxuPihmdW5jdGlvbiBMaXZlS2l0Um9vbShwcm9wczogUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48TGl2ZUtpdFJvb21Qcm9wcz4sIHJlZikge1xuICBjb25zdCB7IHJvb20sIGh0bWxQcm9wcyB9ID0gdXNlTGl2ZUtpdFJvb20ocHJvcHMpO1xuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtyZWZ9IHsuLi5odG1sUHJvcHN9PlxuICAgICAge3Jvb20gJiYgKFxuICAgICAgICA8Um9vbUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Jvb219PlxuICAgICAgICAgIDxMS0ZlYXR1cmVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwcm9wcy5mZWF0dXJlRmxhZ3N9PlxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICAgIDwvTEtGZWF0dXJlQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICAgPC9Sb29tQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59KTtcbiJdLCJuYW1lcyI6WyJyIiwiZSIsInQiLCJmIiwibiIsIkFycmF5IiwiaXNBcnJheSIsIm8iLCJsZW5ndGgiLCJjbHN4IiwiYXJndW1lbnRzIiwiY2hhaW4iLCJjYWxsYmFja3MiLCJhcmdzIiwiY2FsbGJhY2siLCJjb25zb2xlIiwiZXJyb3IiLCJtZXJnZVByb3BzIiwicmVzdWx0IiwiaSIsInByb3BzIiwia2V5IiwiYSIsImIiLCJjaGFyQ29kZUF0IiwiaXNQcm9wIiwicHJvcCIsIm1lcmdlUHJvcHNSZWFjdEFyaWEiLCJmaWx0ZXIiLCJjbG9uZVNpbmdsZUNoaWxkIiwiY2hpbGRyZW4iLCJSZWFjdCIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJpc1ZhbGlkRWxlbWVudCIsIm9ubHkiLCJjbGFzcyIsInN0eWxlIiwiY2xvbmVFbGVtZW50Iiwid2FybkFib3V0TWlzc2luZ1N0eWxlcyIsImVsIiwicHJvY2VzcyIsIl9hIiwiZW52IiwiTk9ERV9FTlYiLCJfYiIsInRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibG9nIiwid2FybiIsInJvb21PcHRpb25zU3RyaW5naWZ5UmVwbGFjZXIiLCJ2YWwiLCJuYW1lIiwiZGVmYXVsdFJvb21Qcm9wcyIsImNvbm5lY3QiLCJhdWRpbyIsInZpZGVvIiwidXNlTGl2ZUtpdFJvb20iLCJ0b2tlbiIsInNlcnZlclVybCIsIm9wdGlvbnMiLCJyb29tIiwicGFzc2VkUm9vbSIsImNvbm5lY3RPcHRpb25zIiwic2NyZWVuIiwib25Db25uZWN0ZWQiLCJvbkRpc2Nvbm5lY3RlZCIsIm9uRXJyb3IiLCJvbk1lZGlhRGV2aWNlRmFpbHVyZSIsIm9uRW5jcnlwdGlvbkVycm9yIiwic2ltdWxhdGVQYXJ0aWNpcGFudHMiLCJyZXN0Iiwic2V0Um9vbSIsInVzZVN0YXRlIiwic2hvdWxkQ29ubmVjdCIsInVzZVJlZiIsInVzZUVmZmVjdCIsIlJvb20iLCJKU09OIiwic3RyaW5naWZ5IiwiaHRtbFByb3BzIiwidXNlTWVtbyIsImNsYXNzTmFtZSIsInNldHVwTGl2ZUtpdFJvb20iLCJvblNpZ25hbENvbm5lY3RlZCIsImxvY2FsUCIsImxvY2FsUGFydGljaXBhbnQiLCJkZWJ1ZyIsIlByb21pc2UiLCJhbGwiLCJzZXRNaWNyb3Bob25lRW5hYmxlZCIsInNldENhbWVyYUVuYWJsZWQiLCJzZXRTY3JlZW5TaGFyZUVuYWJsZWQiLCJjYXRjaCIsImhhbmRsZU1lZGlhRGV2aWNlRXJyb3IiLCJtZWRpYURldmljZUZhaWx1cmUiLCJNZWRpYURldmljZUZhaWx1cmUiLCJnZXRGYWlsdXJlIiwiaGFuZGxlRW5jcnlwdGlvbkVycm9yIiwiaGFuZGxlRGlzY29ubmVjdGVkIiwicmVhc29uIiwiaGFuZGxlQ29ubmVjdGVkIiwib24iLCJSb29tRXZlbnQiLCJTaWduYWxDb25uZWN0ZWQiLCJNZWRpYURldmljZXNFcnJvciIsIkVuY3J5cHRpb25FcnJvciIsIkRpc2Nvbm5lY3RlZCIsIkNvbm5lY3RlZCIsIm9mZiIsInBhcnRpY2lwYW50cyIsImNvdW50IiwicHVibGlzaCIsInVzZVJlYWxUcmFja3MiLCJjdXJyZW50IiwiRXJyb3IiLCJkaXNjb25uZWN0IiwiaW5mbyIsIkxpdmVLaXRSb29tIiwiZm9yd2FyZFJlZiIsInJlZiIsImNyZWF0ZUVsZW1lbnQiLCJSb29tQ29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJMS0ZlYXR1cmVDb250ZXh0IiwiZmVhdHVyZUZsYWdzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.9.2_@livekit+krisp-noise-filter@0.2.16_livekit-client@2.11.2__liv_qp5vy6p6x6rfhnvgr37eay46si/node_modules/@livekit/components-react/dist/room-BgiuQa2X.mjs\n");

/***/ })

};
;