"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/quick-lru@6.1.2";
exports.ids = ["vendor-chunks/quick-lru@6.1.2"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/quick-lru@6.1.2/node_modules/quick-lru/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/quick-lru@6.1.2/node_modules/quick-lru/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ QuickLRU)\n/* harmony export */ });\nclass QuickLRU extends Map {\n    constructor(options = {}){\n        super();\n        if (!(options.maxSize && options.maxSize > 0)) {\n            throw new TypeError(\"`maxSize` must be a number greater than 0\");\n        }\n        if (typeof options.maxAge === \"number\" && options.maxAge === 0) {\n            throw new TypeError(\"`maxAge` must be a number greater than 0\");\n        }\n        // TODO: Use private class fields when ESLint supports them.\n        this.maxSize = options.maxSize;\n        this.maxAge = options.maxAge || Number.POSITIVE_INFINITY;\n        this.onEviction = options.onEviction;\n        this.cache = new Map();\n        this.oldCache = new Map();\n        this._size = 0;\n    }\n    // TODO: Use private class methods when targeting Node.js 16.\n    _emitEvictions(cache) {\n        if (typeof this.onEviction !== \"function\") {\n            return;\n        }\n        for (const [key, item] of cache){\n            this.onEviction(key, item.value);\n        }\n    }\n    _deleteIfExpired(key, item) {\n        if (typeof item.expiry === \"number\" && item.expiry <= Date.now()) {\n            if (typeof this.onEviction === \"function\") {\n                this.onEviction(key, item.value);\n            }\n            return this.delete(key);\n        }\n        return false;\n    }\n    _getOrDeleteIfExpired(key, item) {\n        const deleted = this._deleteIfExpired(key, item);\n        if (deleted === false) {\n            return item.value;\n        }\n    }\n    _getItemValue(key, item) {\n        return item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;\n    }\n    _peek(key, cache) {\n        const item = cache.get(key);\n        return this._getItemValue(key, item);\n    }\n    _set(key, value) {\n        this.cache.set(key, value);\n        this._size++;\n        if (this._size >= this.maxSize) {\n            this._size = 0;\n            this._emitEvictions(this.oldCache);\n            this.oldCache = this.cache;\n            this.cache = new Map();\n        }\n    }\n    _moveToRecent(key, item) {\n        this.oldCache.delete(key);\n        this._set(key, item);\n    }\n    *_entriesAscending() {\n        for (const item of this.oldCache){\n            const [key, value] = item;\n            if (!this.cache.has(key)) {\n                const deleted = this._deleteIfExpired(key, value);\n                if (deleted === false) {\n                    yield item;\n                }\n            }\n        }\n        for (const item of this.cache){\n            const [key, value] = item;\n            const deleted = this._deleteIfExpired(key, value);\n            if (deleted === false) {\n                yield item;\n            }\n        }\n    }\n    get(key) {\n        if (this.cache.has(key)) {\n            const item = this.cache.get(key);\n            return this._getItemValue(key, item);\n        }\n        if (this.oldCache.has(key)) {\n            const item = this.oldCache.get(key);\n            if (this._deleteIfExpired(key, item) === false) {\n                this._moveToRecent(key, item);\n                return item.value;\n            }\n        }\n    }\n    set(key, value, { maxAge = this.maxAge } = {}) {\n        const expiry = typeof maxAge === \"number\" && maxAge !== Number.POSITIVE_INFINITY ? Date.now() + maxAge : undefined;\n        if (this.cache.has(key)) {\n            this.cache.set(key, {\n                value,\n                expiry\n            });\n        } else {\n            this._set(key, {\n                value,\n                expiry\n            });\n        }\n        return this;\n    }\n    has(key) {\n        if (this.cache.has(key)) {\n            return !this._deleteIfExpired(key, this.cache.get(key));\n        }\n        if (this.oldCache.has(key)) {\n            return !this._deleteIfExpired(key, this.oldCache.get(key));\n        }\n        return false;\n    }\n    peek(key) {\n        if (this.cache.has(key)) {\n            return this._peek(key, this.cache);\n        }\n        if (this.oldCache.has(key)) {\n            return this._peek(key, this.oldCache);\n        }\n    }\n    delete(key) {\n        const deleted = this.cache.delete(key);\n        if (deleted) {\n            this._size--;\n        }\n        return this.oldCache.delete(key) || deleted;\n    }\n    clear() {\n        this.cache.clear();\n        this.oldCache.clear();\n        this._size = 0;\n    }\n    resize(newSize) {\n        if (!(newSize && newSize > 0)) {\n            throw new TypeError(\"`maxSize` must be a number greater than 0\");\n        }\n        const items = [\n            ...this._entriesAscending()\n        ];\n        const removeCount = items.length - newSize;\n        if (removeCount < 0) {\n            this.cache = new Map(items);\n            this.oldCache = new Map();\n            this._size = items.length;\n        } else {\n            if (removeCount > 0) {\n                this._emitEvictions(items.slice(0, removeCount));\n            }\n            this.oldCache = new Map(items.slice(removeCount));\n            this.cache = new Map();\n            this._size = 0;\n        }\n        this.maxSize = newSize;\n    }\n    *keys() {\n        for (const [key] of this){\n            yield key;\n        }\n    }\n    *values() {\n        for (const [, value] of this){\n            yield value;\n        }\n    }\n    *[Symbol.iterator]() {\n        for (const item of this.cache){\n            const [key, value] = item;\n            const deleted = this._deleteIfExpired(key, value);\n            if (deleted === false) {\n                yield [\n                    key,\n                    value.value\n                ];\n            }\n        }\n        for (const item of this.oldCache){\n            const [key, value] = item;\n            if (!this.cache.has(key)) {\n                const deleted = this._deleteIfExpired(key, value);\n                if (deleted === false) {\n                    yield [\n                        key,\n                        value.value\n                    ];\n                }\n            }\n        }\n    }\n    *entriesDescending() {\n        let items = [\n            ...this.cache\n        ];\n        for(let i = items.length - 1; i >= 0; --i){\n            const item = items[i];\n            const [key, value] = item;\n            const deleted = this._deleteIfExpired(key, value);\n            if (deleted === false) {\n                yield [\n                    key,\n                    value.value\n                ];\n            }\n        }\n        items = [\n            ...this.oldCache\n        ];\n        for(let i = items.length - 1; i >= 0; --i){\n            const item = items[i];\n            const [key, value] = item;\n            if (!this.cache.has(key)) {\n                const deleted = this._deleteIfExpired(key, value);\n                if (deleted === false) {\n                    yield [\n                        key,\n                        value.value\n                    ];\n                }\n            }\n        }\n    }\n    *entriesAscending() {\n        for (const [key, value] of this._entriesAscending()){\n            yield [\n                key,\n                value.value\n            ];\n        }\n    }\n    get size() {\n        if (!this._size) {\n            return this.oldCache.size;\n        }\n        let oldCacheSize = 0;\n        for (const key of this.oldCache.keys()){\n            if (!this.cache.has(key)) {\n                oldCacheSize++;\n            }\n        }\n        return Math.min(this._size + oldCacheSize, this.maxSize);\n    }\n    entries() {\n        return this.entriesAscending();\n    }\n    forEach(callbackFunction, thisArgument = this) {\n        for (const [key, value] of this.entriesAscending()){\n            callbackFunction.call(thisArgument, value, key, this);\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return JSON.stringify([\n            ...this.entriesAscending()\n        ]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/quick-lru@6.1.2/node_modules/quick-lru/index.js\n");

/***/ })

};
;