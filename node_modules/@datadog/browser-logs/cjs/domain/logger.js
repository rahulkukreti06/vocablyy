"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.STATUSES = exports.HandlerType = void 0;
var browser_core_1 = require("@datadog/browser-core");
var isAuthorized_1 = require("./logger/isAuthorized");
var createErrorFieldFromRawError_1 = require("./createErrorFieldFromRawError");
exports.HandlerType = {
    console: 'console',
    http: 'http',
    silent: 'silent',
};
exports.STATUSES = Object.keys(isAuthorized_1.StatusType);
// note: it is safe to merge declarations as long as the methods are actually defined on the prototype
// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging, no-restricted-syntax
var Logger = /** @class */ (function () {
    function Logger(handleLogStrategy, customerDataTracker, name, handlerType, level, loggerContext) {
        if (handlerType === void 0) { handlerType = exports.HandlerType.http; }
        if (level === void 0) { level = isAuthorized_1.StatusType.debug; }
        if (loggerContext === void 0) { loggerContext = {}; }
        this.handleLogStrategy = handleLogStrategy;
        this.handlerType = handlerType;
        this.level = level;
        this.contextManager = (0, browser_core_1.createContextManager)(customerDataTracker);
        this.contextManager.setContext(loggerContext);
        if (name) {
            this.contextManager.setContextProperty('logger', { name: name });
        }
    }
    Logger.prototype.logImplementation = function (message, messageContext, status, error, handlingStack) {
        if (status === void 0) { status = isAuthorized_1.StatusType.info; }
        var sanitizedMessageContext = (0, browser_core_1.sanitize)(messageContext);
        var context;
        if (error !== undefined && error !== null) {
            var rawError = (0, browser_core_1.computeRawError)({
                stackTrace: (0, browser_core_1.isError)(error) ? (0, browser_core_1.computeStackTrace)(error) : undefined,
                originalError: error,
                nonErrorPrefix: "Provided" /* NonErrorPrefix.PROVIDED */,
                source: browser_core_1.ErrorSource.LOGGER,
                handling: "handled" /* ErrorHandling.HANDLED */,
                startClocks: (0, browser_core_1.clocksNow)(),
            });
            context = (0, browser_core_1.combine)({
                error: (0, createErrorFieldFromRawError_1.createErrorFieldFromRawError)(rawError, { includeMessage: true }),
            }, sanitizedMessageContext);
        }
        else {
            context = sanitizedMessageContext;
        }
        this.handleLogStrategy({
            message: (0, browser_core_1.sanitize)(message),
            context: context,
            status: status,
        }, this, handlingStack);
    };
    Logger.prototype.log = function (message, messageContext, status, error) {
        if (status === void 0) { status = isAuthorized_1.StatusType.info; }
        var handlingStack;
        if ((0, isAuthorized_1.isAuthorized)(status, exports.HandlerType.http, this)) {
            handlingStack = (0, browser_core_1.createHandlingStack)();
        }
        this.logImplementation(message, messageContext, status, error, handlingStack);
    };
    Logger.prototype.setContext = function (context) {
        this.contextManager.setContext(context);
    };
    Logger.prototype.getContext = function () {
        return this.contextManager.getContext();
    };
    Logger.prototype.setContextProperty = function (key, value) {
        this.contextManager.setContextProperty(key, value);
    };
    Logger.prototype.removeContextProperty = function (key) {
        this.contextManager.removeContextProperty(key);
    };
    Logger.prototype.clearContext = function () {
        this.contextManager.clearContext();
    };
    Logger.prototype.setHandler = function (handler) {
        this.handlerType = handler;
    };
    Logger.prototype.getHandler = function () {
        return this.handlerType;
    };
    Logger.prototype.setLevel = function (level) {
        this.level = level;
    };
    Logger.prototype.getLevel = function () {
        return this.level;
    };
    __decorate([
        browser_core_1.monitored
    ], Logger.prototype, "logImplementation", null);
    return Logger;
}());
exports.Logger = Logger;
/* eslint-disable local-rules/disallow-side-effects */
Logger.prototype.ok = createLoggerMethod(isAuthorized_1.StatusType.ok);
Logger.prototype.debug = createLoggerMethod(isAuthorized_1.StatusType.debug);
Logger.prototype.info = createLoggerMethod(isAuthorized_1.StatusType.info);
Logger.prototype.notice = createLoggerMethod(isAuthorized_1.StatusType.notice);
Logger.prototype.warn = createLoggerMethod(isAuthorized_1.StatusType.warn);
Logger.prototype.error = createLoggerMethod(isAuthorized_1.StatusType.error);
Logger.prototype.critical = createLoggerMethod(isAuthorized_1.StatusType.critical);
Logger.prototype.alert = createLoggerMethod(isAuthorized_1.StatusType.alert);
Logger.prototype.emerg = createLoggerMethod(isAuthorized_1.StatusType.emerg);
function createLoggerMethod(status) {
    return function (message, messageContext, error) {
        var handlingStack;
        if ((0, isAuthorized_1.isAuthorized)(status, exports.HandlerType.http, this)) {
            handlingStack = (0, browser_core_1.createHandlingStack)();
        }
        this.logImplementation(message, messageContext, status, error, handlingStack);
    };
}
//# sourceMappingURL=logger.js.map