"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startTelemetry = startTelemetry;
exports.startFakeTelemetry = startFakeTelemetry;
exports.drainPreStartTelemetry = drainPreStartTelemetry;
exports.resetTelemetry = resetTelemetry;
exports.isTelemetryReplicationAllowed = isTelemetryReplicationAllowed;
exports.addTelemetryDebug = addTelemetryDebug;
exports.addTelemetryError = addTelemetryError;
exports.addTelemetryConfiguration = addTelemetryConfiguration;
exports.addTelemetryUsage = addTelemetryUsage;
exports.formatError = formatError;
exports.scrubCustomerFrames = scrubCustomerFrames;
var display_1 = require("../../tools/display");
var error_1 = require("../error/error");
var handlingStack_1 = require("../../tools/stackTrace/handlingStack");
var experimentalFeatures_1 = require("../../tools/experimentalFeatures");
var configuration_1 = require("../configuration");
var observable_1 = require("../../tools/observable");
var timeUtils_1 = require("../../tools/utils/timeUtils");
var monitor_1 = require("../../tools/monitor");
var sendToExtension_1 = require("../../tools/sendToExtension");
var polyfills_1 = require("../../tools/utils/polyfills");
var numberUtils_1 = require("../../tools/utils/numberUtils");
var jsonStringify_1 = require("../../tools/serialisation/jsonStringify");
var mergeInto_1 = require("../../tools/mergeInto");
var computeStackTrace_1 = require("../../tools/stackTrace/computeStackTrace");
var connectivity_1 = require("../connectivity");
var boundedBuffer_1 = require("../../tools/boundedBuffer");
var rawTelemetryEvent_types_1 = require("./rawTelemetryEvent.types");
var ALLOWED_FRAME_URLS = [
    'https://www.datadoghq-browser-agent.com',
    'https://www.datad0g-browser-agent.com',
    'https://d3uc069fcn7uxw.cloudfront.net',
    'https://d20xtzwzcl0ceb.cloudfront.net',
    'http://localhost',
    '<anonymous>',
];
var TELEMETRY_EXCLUDED_SITES = [configuration_1.INTAKE_SITE_US1_FED];
// eslint-disable-next-line local-rules/disallow-side-effects
var preStartTelemetryBuffer = (0, boundedBuffer_1.createBoundedBuffer)();
var onRawTelemetryEventCollected = function (event) {
    preStartTelemetryBuffer.add(function () { return onRawTelemetryEventCollected(event); });
};
function startTelemetry(telemetryService, configuration) {
    var _a;
    var contextProvider;
    var observable = new observable_1.Observable();
    var alreadySentEvents = new Set();
    var telemetryEnabled = !(0, polyfills_1.includes)(TELEMETRY_EXCLUDED_SITES, configuration.site) && (0, numberUtils_1.performDraw)(configuration.telemetrySampleRate);
    var telemetryEnabledPerType = (_a = {},
        _a[rawTelemetryEvent_types_1.TelemetryType.log] = telemetryEnabled,
        _a[rawTelemetryEvent_types_1.TelemetryType.configuration] = telemetryEnabled && (0, numberUtils_1.performDraw)(configuration.telemetryConfigurationSampleRate),
        _a[rawTelemetryEvent_types_1.TelemetryType.usage] = telemetryEnabled && (0, numberUtils_1.performDraw)(configuration.telemetryUsageSampleRate),
        _a);
    var runtimeEnvInfo = getRuntimeEnvInfo();
    onRawTelemetryEventCollected = function (rawEvent) {
        var stringifiedEvent = (0, jsonStringify_1.jsonStringify)(rawEvent);
        if (telemetryEnabledPerType[rawEvent.type] &&
            alreadySentEvents.size < configuration.maxTelemetryEventsPerPage &&
            !alreadySentEvents.has(stringifiedEvent)) {
            var event_1 = toTelemetryEvent(telemetryService, rawEvent, runtimeEnvInfo);
            observable.notify(event_1);
            (0, sendToExtension_1.sendToExtension)('telemetry', event_1);
            alreadySentEvents.add(stringifiedEvent);
        }
    };
    (0, monitor_1.startMonitorErrorCollection)(addTelemetryError);
    function toTelemetryEvent(telemetryService, event, runtimeEnvInfo) {
        return (0, mergeInto_1.combine)({
            type: 'telemetry',
            date: (0, timeUtils_1.timeStampNow)(),
            service: telemetryService,
            version: "5.35.1",
            source: 'browser',
            _dd: {
                format_version: 2,
            },
            telemetry: (0, mergeInto_1.combine)(event, {
                runtime_env: runtimeEnvInfo,
                connectivity: (0, connectivity_1.getConnectivity)(),
                sdk_setup: "npm",
            }),
            experimental_features: (0, polyfills_1.arrayFrom)((0, experimentalFeatures_1.getExperimentalFeatures)()),
        }, contextProvider !== undefined ? contextProvider() : {});
    }
    return {
        setContextProvider: function (provider) {
            contextProvider = provider;
        },
        observable: observable,
        enabled: telemetryEnabled,
    };
}
function getRuntimeEnvInfo() {
    return {
        is_local_file: window.location.protocol === 'file:',
        is_worker: 'WorkerGlobalScope' in self,
    };
}
function startFakeTelemetry() {
    var events = [];
    onRawTelemetryEventCollected = function (event) {
        events.push(event);
    };
    return events;
}
// need to be called after telemetry context is provided and observers are registered
function drainPreStartTelemetry() {
    preStartTelemetryBuffer.drain();
}
function resetTelemetry() {
    preStartTelemetryBuffer = (0, boundedBuffer_1.createBoundedBuffer)();
    onRawTelemetryEventCollected = function (event) {
        preStartTelemetryBuffer.add(function () { return onRawTelemetryEventCollected(event); });
    };
}
/**
 * Avoid mixing telemetry events from different data centers
 * but keep replicating staging events for reliability
 */
function isTelemetryReplicationAllowed(configuration) {
    return configuration.site === configuration_1.INTAKE_SITE_STAGING;
}
function addTelemetryDebug(message, context) {
    (0, monitor_1.displayIfDebugEnabled)(display_1.ConsoleApiName.debug, message, context);
    onRawTelemetryEventCollected((0, polyfills_1.assign)({
        type: rawTelemetryEvent_types_1.TelemetryType.log,
        message: message,
        status: "debug" /* StatusType.debug */,
    }, context));
}
function addTelemetryError(e, context) {
    onRawTelemetryEventCollected((0, polyfills_1.assign)({
        type: rawTelemetryEvent_types_1.TelemetryType.log,
        status: "error" /* StatusType.error */,
    }, formatError(e), context));
}
function addTelemetryConfiguration(configuration) {
    onRawTelemetryEventCollected({
        type: rawTelemetryEvent_types_1.TelemetryType.configuration,
        configuration: configuration,
    });
}
function addTelemetryUsage(usage) {
    onRawTelemetryEventCollected({
        type: rawTelemetryEvent_types_1.TelemetryType.usage,
        usage: usage,
    });
}
function formatError(e) {
    if ((0, error_1.isError)(e)) {
        var stackTrace = (0, computeStackTrace_1.computeStackTrace)(e);
        return {
            error: {
                kind: stackTrace.name,
                stack: (0, handlingStack_1.toStackTraceString)(scrubCustomerFrames(stackTrace)),
            },
            message: stackTrace.message,
        };
    }
    return {
        error: {
            stack: error_1.NO_ERROR_STACK_PRESENT_MESSAGE,
        },
        message: "".concat("Uncaught" /* NonErrorPrefix.UNCAUGHT */, " ").concat((0, jsonStringify_1.jsonStringify)(e)),
    };
}
function scrubCustomerFrames(stackTrace) {
    stackTrace.stack = stackTrace.stack.filter(function (frame) { return !frame.url || ALLOWED_FRAME_URLS.some(function (allowedFrameUrl) { return (0, polyfills_1.startsWith)(frame.url, allowedFrameUrl); }); });
    return stackTrace;
}
//# sourceMappingURL=telemetry.js.map