"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXPIRED = void 0;
exports.getExpiredSessionState = getExpiredSessionState;
exports.isSessionInNotStartedState = isSessionInNotStartedState;
exports.isSessionStarted = isSessionStarted;
exports.isSessionInExpiredState = isSessionInExpiredState;
exports.expandSessionState = expandSessionState;
exports.toSessionString = toSessionString;
exports.toSessionState = toSessionState;
var experimentalFeatures_1 = require("../../tools/experimentalFeatures");
var objectUtils_1 = require("../../tools/utils/objectUtils");
var polyfills_1 = require("../../tools/utils/polyfills");
var timeUtils_1 = require("../../tools/utils/timeUtils");
var user_1 = require("../user");
var sessionConstants_1 = require("./sessionConstants");
var sessionStateValidation_1 = require("./sessionStateValidation");
exports.EXPIRED = '1';
function getExpiredSessionState(previousSessionState) {
    var expiredSessionState = {
        isExpired: exports.EXPIRED,
    };
    if ((0, experimentalFeatures_1.isExperimentalFeatureEnabled)(experimentalFeatures_1.ExperimentalFeature.ANONYMOUS_USER_TRACKING)) {
        if (previousSessionState === null || previousSessionState === void 0 ? void 0 : previousSessionState.anonymousId) {
            expiredSessionState.anonymousId = previousSessionState === null || previousSessionState === void 0 ? void 0 : previousSessionState.anonymousId;
        }
        else {
            expiredSessionState.anonymousId = (0, user_1.generateAnonymousId)();
        }
    }
    return expiredSessionState;
}
function isSessionInNotStartedState(session) {
    return (0, objectUtils_1.isEmptyObject)(session);
}
function isSessionStarted(session) {
    return !isSessionInNotStartedState(session);
}
function isSessionInExpiredState(session) {
    return session.isExpired !== undefined || !isActiveSession(session);
}
// An active session is a session in either `Tracked` or `NotTracked` state
function isActiveSession(sessionState) {
    // created and expire can be undefined for versions which was not storing them
    // these checks could be removed when older versions will not be available/live anymore
    return ((sessionState.created === undefined || (0, timeUtils_1.dateNow)() - Number(sessionState.created) < sessionConstants_1.SESSION_TIME_OUT_DELAY) &&
        (sessionState.expire === undefined || (0, timeUtils_1.dateNow)() < Number(sessionState.expire)));
}
function expandSessionState(session) {
    session.expire = String((0, timeUtils_1.dateNow)() + sessionConstants_1.SESSION_EXPIRATION_DELAY);
}
function toSessionString(session) {
    return ((0, polyfills_1.objectEntries)(session)
        // we use `aid` as a key for anonymousId
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return (key === 'anonymousId' ? "aid=".concat(value) : "".concat(key, "=").concat(value));
    })
        .join(sessionStateValidation_1.SESSION_ENTRY_SEPARATOR));
}
function toSessionState(sessionString) {
    var session = {};
    if ((0, sessionStateValidation_1.isValidSessionString)(sessionString)) {
        sessionString.split(sessionStateValidation_1.SESSION_ENTRY_SEPARATOR).forEach(function (entry) {
            var matches = sessionStateValidation_1.SESSION_ENTRY_REGEXP.exec(entry);
            if (matches !== null) {
                var key = matches[1], value = matches[2];
                if (key === 'aid') {
                    // we use `aid` as a key for anonymousId
                    session.anonymousId = value;
                }
                else {
                    session[key] = value;
                }
            }
        });
    }
    return session;
}
//# sourceMappingURL=sessionState.js.map