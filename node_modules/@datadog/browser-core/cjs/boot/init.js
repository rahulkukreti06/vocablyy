"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makePublicApi = makePublicApi;
exports.defineGlobal = defineGlobal;
var catchUserErrors_1 = require("../tools/catchUserErrors");
var monitor_1 = require("../tools/monitor");
var polyfills_1 = require("../tools/utils/polyfills");
var display_1 = require("../tools/display");
function makePublicApi(stub) {
    var publicApi = (0, polyfills_1.assign)({
        version: "5.35.1",
        // This API method is intentionally not monitored, since the only thing executed is the
        // user-provided 'callback'.  All SDK usages executed in the callback should be monitored, and
        // we don't want to interfere with the user uncaught exceptions.
        onReady: function (callback) {
            callback();
        },
    }, stub);
    // Add a "hidden" property to set debug mode. We define it that way to hide it
    // as much as possible but of course it's not a real protection.
    Object.defineProperty(publicApi, '_setDebug', {
        get: function () {
            return monitor_1.setDebugMode;
        },
        enumerable: false,
    });
    return publicApi;
}
function defineGlobal(global, name, api) {
    var existingGlobalVariable = global[name];
    if (existingGlobalVariable && !existingGlobalVariable.q && existingGlobalVariable.version) {
        display_1.display.warn('SDK is loaded more than once. This is unsupported and might have unexpected behavior.');
    }
    global[name] = api;
    if (existingGlobalVariable && existingGlobalVariable.q) {
        existingGlobalVariable.q.forEach(function (fn) { return (0, catchUserErrors_1.catchUserErrors)(fn, 'onReady callback threw an error:')(); });
    }
}
//# sourceMappingURL=init.js.map